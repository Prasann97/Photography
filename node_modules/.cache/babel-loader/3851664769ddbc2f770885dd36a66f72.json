{"ast":null,"code":"var _excluded = [\"background\", \"border\", \"color\", \"font\", \"gap\", \"pad\", \"units\"],\n    _excluded2 = [\"cellProps\", \"columns\", \"data\", \"disabled\", \"fill\", \"filtering\", \"filters\", \"groupBy\", \"groups\", \"groupState\", \"onFilter\", \"onFiltering\", \"onResize\", \"onSelect\", \"onSort\", \"onToggle\", \"onWidths\", \"pin\", \"pinnedOffset\", \"primaryProperty\", \"selected\", \"rowDetails\", \"sort\", \"widths\", \"verticalAlign\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* eslint-disable no-underscore-dangle */\n\n\nimport React, { forwardRef, useCallback, useContext, useEffect, useState } from 'react';\nimport styled, { css, ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { CheckBox } from '../CheckBox';\nimport { TableCell, verticalAlignToJustify } from '../TableCell/TableCell';\nimport { Text } from '../Text';\nimport { Resizer } from './Resizer';\nimport { Searcher } from './Searcher';\nimport { ExpanderCell } from './ExpanderCell';\nimport { StyledDataTableCell, StyledDataTableHeader, StyledDataTableRow } from './StyledDataTable';\nimport { datumValue } from './buildState';\nimport { kindPartStyles } from '../../utils/styles';\nimport { normalizeColor } from '../../utils/colors'; // separate theme values into groupings depending on what\n// part of header cell they should style\n\nvar separateThemeProps = function separateThemeProps(theme) {\n  var _theme$dataTable$head = theme.dataTable.header,\n      background = _theme$dataTable$head.background,\n      border = _theme$dataTable$head.border,\n      color = _theme$dataTable$head.color,\n      font = _theme$dataTable$head.font,\n      gap = _theme$dataTable$head.gap,\n      pad = _theme$dataTable$head.pad,\n      units = _theme$dataTable$head.units,\n      rest = _objectWithoutPropertiesLoose(_theme$dataTable$head, _excluded);\n\n  var textProps = _extends({\n    color: color\n  }, font);\n\n  var iconProps = {\n    color: color\n  };\n\n  var layoutProps = _extends({}, rest);\n\n  return [layoutProps, textProps, iconProps];\n}; // build up CSS from basic to specific based on the supplied sub-object paths.\n// adapted from StyledButtonKind to only include parts relevant for DataTable\n\n\nvar buttonStyle = function buttonStyle(_ref) {\n  var pad = _ref.pad,\n      theme = _ref.theme,\n      verticalAlign = _ref.verticalAlign;\n  var styles = [];\n\n  var _separateThemeProps = separateThemeProps(theme),\n      layoutProps = _separateThemeProps[0],\n      iconProps = _separateThemeProps[2]; // if cell is sortable, we want pad to be applied\n  // to the button instead of the cell\n\n\n  if (pad) {\n    styles.push(kindPartStyles({\n      pad: pad\n    }, theme));\n  }\n\n  if (layoutProps) {\n    styles.push(kindPartStyles(layoutProps, theme));\n  }\n\n  if (layoutProps.hover) {\n    // CSS for this sub-object in the theme\n    var partStyles = kindPartStyles(layoutProps.hover, theme);\n    if (partStyles.length > 0) styles.push(css([\"&:hover{\", \"}\"], partStyles));\n  }\n\n  if (iconProps.color) {\n    styles.push(css([\"svg{stroke:\", \";fill:\", \";}\"], normalizeColor(iconProps.color, theme), normalizeColor(iconProps.color, theme)));\n  }\n\n  var align = 'center';\n  if (verticalAlign === 'bottom') align = 'end';\n  if (verticalAlign === 'top') align = 'start';\n\n  if (verticalAlign) {\n    styles.push(css([\"display:inline-flex;align-items:\", \";\"], align));\n  }\n\n  return styles;\n};\n\nvar StyledHeaderCellButton = styled(Button).withConfig({\n  displayName: \"Header__StyledHeaderCellButton\",\n  componentId: \"sc-1baku5q-0\"\n})([\"\", \"\"], function (props) {\n  return buttonStyle(props);\n}); // allow extend to spread onto Box that surrounds column label\n\nvar StyledContentBox = styled(Box).withConfig({\n  displayName: \"Header__StyledContentBox\",\n  componentId: \"sc-1baku5q-1\"\n})([\"\", \"\"], function (props) {\n  return props.extend;\n});\nvar Header = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var cellProps = _ref2.cellProps,\n      columns = _ref2.columns,\n      data = _ref2.data,\n      disabled = _ref2.disabled,\n      fill = _ref2.fill,\n      filtering = _ref2.filtering,\n      filters = _ref2.filters,\n      groupBy = _ref2.groupBy,\n      groups = _ref2.groups,\n      groupState = _ref2.groupState,\n      onFilter = _ref2.onFilter,\n      onFiltering = _ref2.onFiltering,\n      onResize = _ref2.onResize,\n      onSelect = _ref2.onSelect,\n      onSort = _ref2.onSort,\n      onToggle = _ref2.onToggle,\n      onWidths = _ref2.onWidths,\n      pinProp = _ref2.pin,\n      pinnedOffset = _ref2.pinnedOffset,\n      primaryProperty = _ref2.primaryProperty,\n      selected = _ref2.selected,\n      rowDetails = _ref2.rowDetails,\n      sort = _ref2.sort,\n      widths = _ref2.widths,\n      verticalAlign = _ref2.verticalAlign,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _separateThemeProps2 = separateThemeProps(theme),\n      layoutProps = _separateThemeProps2[0],\n      textProps = _separateThemeProps2[1];\n\n  var _useState = useState([]),\n      cellWidths = _useState[0],\n      setCellWidths = _useState[1];\n\n  var updateWidths = useCallback(function (width) {\n    return setCellWidths(function (values) {\n      return [].concat(values, [width]);\n    });\n  }, []);\n  useEffect(function () {\n    if (onWidths && cellWidths.length !== 0) {\n      onWidths(cellWidths);\n    }\n  }, [cellWidths, onWidths]);\n  var pin = pinProp ? ['top'] : [];\n  var selectPin = pinnedOffset != null && pinnedOffset._grommetDataTableSelect ? [].concat(pin, ['left']) : pin;\n  var totalSelectedGroups = groupBy != null && groupBy.select ? Object.keys(groupBy.select).reduce(function (total, cur) {\n    return cur && groupBy.select[cur] === 'all' ? total + 1 : total;\n  }, 0) : 0;\n  var totalSelected = ((selected == null ? void 0 : selected.length) || 0) + totalSelectedGroups;\n  var onChangeSelection = useCallback(function () {\n    var nextSelected;\n    var nextGroupSelected = {}; // Since some rows might be disabled but already selected, we need to\n    // note which rows are enabled when determining how aggregate selection\n    // works.\n\n    var primaryValues = data.map(function (datum) {\n      return datumValue(datum, primaryProperty);\n    }) || []; // enabled includes what can be changed\n\n    var enabled = disabled && primaryValues.filter(function (v) {\n      return !disabled.includes(v);\n    }) || primaryValues; // enabledSelected includes what can be changed and is currently selected\n\n    var enabledSelected = selected && enabled.filter(function (v) {\n      return selected.includes(v);\n    }) || primaryValues;\n    var allSelected = groupBy != null && groupBy.select ? groupBy.select[''] === 'all' : enabledSelected.length === enabled.length;\n\n    if (allSelected) {\n      // if any are disabled and selected, leave those, otherwise clear\n      nextSelected = disabled ? primaryValues.filter(function (v) {\n        return disabled.includes(v) && selected.includes(v);\n      }) : [];\n      nextGroupSelected[''] = 'none';\n    } else {\n      var _groupBy$expandable; // if some or none are selected, select all enabled plus all disabled\n      // that are already selected\n\n\n      nextSelected = disabled ? primaryValues.filter(function (v) {\n        return !disabled.includes(v) || selected.includes(v);\n      }) : primaryValues;\n      nextGroupSelected[''] = 'all';\n      groupBy == null ? void 0 : (_groupBy$expandable = groupBy.expandable) == null ? void 0 : _groupBy$expandable.forEach(function (key) {\n        nextGroupSelected[key] = 'all';\n      });\n    }\n\n    if (groupBy != null && groupBy.onSelect) {\n      groupBy.onSelect(nextSelected, undefined, nextGroupSelected);\n    } else onSelect(nextSelected);\n  }, [data, disabled, groupBy, onSelect, primaryProperty, selected]);\n  return /*#__PURE__*/React.createElement(StyledDataTableHeader, _extends({\n    ref: ref,\n    fillProp: fill\n  }, rest), /*#__PURE__*/React.createElement(StyledDataTableRow, null, groups && /*#__PURE__*/React.createElement(ExpanderCell, {\n    background: cellProps.background,\n    border: cellProps.border,\n    context: \"header\",\n    expanded: Object.keys(groupState).filter(function (k) {\n      return !groupState[k].expanded;\n    }).length === 0,\n    onToggle: onToggle,\n    pad: cellProps.pad\n  }), (selected || onSelect) && /*#__PURE__*/React.createElement(StyledDataTableCell, {\n    background: cellProps.background,\n    onWidth: updateWidths,\n    plain: \"noPad\",\n    size: \"auto\",\n    context: \"header\",\n    scope: \"col\",\n    pin: selectPin,\n    pinnedOffset: pinnedOffset == null ? void 0 : pinnedOffset._grommetDataTableSelect,\n    verticalAlign: verticalAlign\n  }, onSelect && /*#__PURE__*/React.createElement(CheckBox, {\n    a11yTitle: totalSelected === data.length ? 'unselect all' : 'select all',\n    checked: groupBy != null && groupBy.select ? groupBy.select[''] === 'all' : totalSelected > 0 && data.length > 0 && totalSelected === data.length,\n    indeterminate: groupBy != null && groupBy.select ? groupBy.select[''] === 'some' : totalSelected > 0 && totalSelected < data.length,\n    onChange: onChangeSelection,\n    pad: cellProps.pad\n  })), rowDetails && /*#__PURE__*/React.createElement(TableCell, {\n    size: \"xxsmall\",\n    plain: true,\n    pad: \"none\"\n  }), columns.map(function (_ref3) {\n    var property = _ref3.property,\n        header = _ref3.header,\n        align = _ref3.align,\n        columnPin = _ref3.pin,\n        search = _ref3.search,\n        sortable = _ref3.sortable,\n        columnVerticalAlign = _ref3.verticalAlign,\n        size = _ref3.size,\n        units = _ref3.units;\n    var content;\n    var unitsContent = units ? /*#__PURE__*/React.createElement(Text, _extends({}, textProps, theme.dataTable.header.units), units) : undefined;\n\n    if (typeof header === 'string') {\n      content = /*#__PURE__*/React.createElement(Text, textProps, header);\n\n      if (Object.keys(layoutProps).length && (sortable === false || !onSort)) {\n        // apply rest of layout styling if cell is not sortable,\n        // otherwise this styling will be applied by\n        // StyledHeaderCellButton\n        content = /*#__PURE__*/React.createElement(StyledContentBox, layoutProps, content);\n      }\n    } else content = header;\n\n    if (unitsContent) {\n      content = /*#__PURE__*/React.createElement(Box, {\n        justify: align,\n        direction: \"row\"\n      }, content, unitsContent);\n    }\n\n    if (verticalAlign || columnVerticalAlign) {\n      var vertical = verticalAlign || columnVerticalAlign;\n      content = /*#__PURE__*/React.createElement(Box, {\n        height: \"100%\",\n        justify: verticalAlignToJustify[vertical]\n      }, content);\n    }\n\n    if (onSort && sortable !== false) {\n      var Icon;\n\n      if (onSort && sortable !== false) {\n        if (sort && sort.property === property) {\n          Icon = theme.dataTable.icons[sort.direction !== 'asc' ? 'ascending' : 'descending'];\n        } else if (theme.dataTable.icons.sortable) {\n          Icon = theme.dataTable.icons.sortable;\n        }\n      }\n\n      content = /*#__PURE__*/React.createElement(StyledHeaderCellButton, {\n        plain: true,\n        column: property,\n        fill: \"vertical\",\n        onClick: onSort(property),\n        sort: sort,\n        pad: cellProps.pad,\n        sortable: true,\n        verticalAlign: verticalAlign || columnVerticalAlign\n      }, /*#__PURE__*/React.createElement(Box, {\n        direction: \"row\",\n        align: \"center\",\n        gap: \"xsmall\",\n        justify: align\n      }, content, Icon && /*#__PURE__*/React.createElement(Icon, null)));\n    } // content should fill any available space in cell\n    // If `onResize` or `search` is true we need to explicitly set\n    // fill because later if either of these props is true content\n    // will be wrapped with an additional Box, preventing this Box\n    // from automatically filling the vertical space.\n\n\n    content = /*#__PURE__*/React.createElement(Box, {\n      flex: \"grow\",\n      fill: onResize || search ? 'vertical' : false\n    }, content);\n\n    if (search || onResize) {\n      var resizer = onResize ? /*#__PURE__*/React.createElement(Resizer, {\n        property: property,\n        onResize: onResize\n      }) : null;\n      var searcher = search && filters ? /*#__PURE__*/React.createElement(Searcher, {\n        filtering: filtering,\n        filters: filters,\n        property: property,\n        onFilter: onFilter,\n        onFiltering: onFiltering\n      }) : null;\n      content = /*#__PURE__*/React.createElement(Box, {\n        direction: \"row\",\n        align: \"center\",\n        justify: !align || align === 'start' ? 'between' : align,\n        gap: theme.dataTable.header.gap,\n        fill: \"vertical\",\n        style: onResize ? {\n          position: 'relative'\n        } : undefined\n      }, content, searcher && resizer ? /*#__PURE__*/React.createElement(Box, {\n        flex: \"shrink\",\n        direction: \"row\",\n        align: \"center\",\n        gap: theme.dataTable.header.gap\n      }, searcher, resizer) : searcher || resizer);\n    }\n\n    var cellPin = [].concat(pin);\n    if (columnPin) cellPin.push('left');\n    return /*#__PURE__*/React.createElement(StyledDataTableCell, {\n      key: property,\n      align: align,\n      context: \"header\",\n      verticalAlign: verticalAlign || columnVerticalAlign,\n      background: cellProps.background,\n      border: cellProps.border,\n      onWidth: updateWidths // if sortable, pad will be included in the button styling\n      ,\n      pad: sortable === false || !onSort ? cellProps.pad : 'none',\n      pin: cellPin,\n      plain: true,\n      pinnedOffset: pinnedOffset && pinnedOffset[property],\n      scope: \"col\",\n      size: widths && widths[property] ? undefined : size,\n      style: widths && widths[property] ? {\n        width: widths[property]\n      } : undefined\n    }, content);\n  })));\n});\nHeader.displayName = 'Header';\nHeader.defaultProps = {};\nObject.setPrototypeOf(Header.defaultProps, defaultProps);\nexport { Header };","map":null,"metadata":{},"sourceType":"module"}