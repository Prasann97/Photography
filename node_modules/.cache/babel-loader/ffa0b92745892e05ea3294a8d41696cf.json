{"ast":null,"code":"var _excluded = [\"activeDate\", \"animate\", \"bounds\", \"children\", \"date\", \"dates\", \"daysOfWeek\", \"disabled\", \"initialFocus\", \"fill\", \"firstDayOfWeek\", \"header\", \"locale\", \"messages\", \"onReference\", \"onSelect\", \"range\", \"reference\", \"showAdjacentDays\", \"size\", \"timestamp\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, useCallback, useContext, useMemo, useRef, useState, useEffect } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { AnnounceContext } from '../../contexts/AnnounceContext';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Heading } from '../Heading';\nimport { Keyboard } from '../Keyboard';\nimport { StyledCalendar, StyledDay, StyledDayContainer, StyledWeek, StyledWeeks, StyledWeeksContainer } from './StyledCalendar';\nimport { addDays, addMonths, betweenDates, daysApart, endOfMonth, handleOffset, startOfMonth, subtractDays, subtractMonths, withinDates } from './utils';\nimport { CalendarPropTypes } from './propTypes';\nvar headingPadMap = {\n  small: 'xsmall',\n  medium: 'small',\n  large: 'medium'\n};\n\nvar getLocaleString = function getLocaleString(value, locale) {\n  return value == null ? void 0 : value.toLocaleDateString(locale, {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n};\n\nvar currentlySelectedString = function currentlySelectedString(value, locale) {\n  var selected;\n\n  if (value instanceof Date) {\n    selected = \"Currently selected \" + getLocaleString(value, locale) + \";\";\n  } else if (value != null && value.length) {\n    selected = \"Currently selected \" + value.map(function (item) {\n      var dates;\n\n      if (!Array.isArray(item)) {\n        dates = \"\" + getLocaleString(item, locale);\n      } else {\n        var start = item[0] !== undefined ? getLocaleString(item[0], locale) : 'none';\n        var end = item[1] !== undefined ? getLocaleString(item[1], locale) : 'none';\n        dates = start + \" through \" + end;\n      }\n\n      return dates;\n    });\n  } else {\n    selected = 'No date selected';\n  }\n\n  return selected;\n}; // calendar value may be a single date, multiple dates, a range of dates\n// supplied as ISOstrings.\n\n\nvar normalizeInput = function normalizeInput(dateValue) {\n  var result;\n\n  if (dateValue instanceof Date) {\n    result = dateValue;\n  } // date may be an empty string ''\n  else if (typeof dateValue === 'string' && dateValue.length) {\n    var adjustedDate = new Date(dateValue); // if time is not specified in ISOstring, normalize to midnight\n\n    if (dateValue.indexOf('T') === -1) {\n      var offset = adjustedDate.getTimezoneOffset();\n      var hour = adjustedDate.getHours();\n      adjustedDate.setHours(hour, offset);\n    }\n\n    result = adjustedDate;\n  } else if (Array.isArray(dateValue)) {\n    result = dateValue.map(function (d) {\n      return normalizeInput(d);\n    });\n  }\n\n  return result;\n};\n\nvar normalizeOutput = function normalizeOutput(dateValue, outputFormat) {\n  var result;\n\n  var normalize = function normalize(value) {\n    var normalizedValue = value.toISOString();\n\n    if (normalizedValue && outputFormat === 'no timezone') {\n      var _handleOffset$toISOSt = handleOffset(normalizedValue).toISOString().split('T');\n\n      normalizedValue = _handleOffset$toISOSt[0];\n    }\n\n    return normalizedValue;\n  };\n\n  if (dateValue instanceof Date) {\n    result = normalize(dateValue);\n  } else if (typeof dateValue === 'undefined') {\n    result = undefined;\n  } else {\n    result = dateValue.map(function (d) {\n      return normalizeOutput(d, outputFormat);\n    });\n  }\n\n  return result;\n}; // format value to [[]] for internal functions\n\n\nvar normalizeRange = function normalizeRange(value, activeDate) {\n  var range = value;\n  if (range instanceof Date) range = activeDate === 'start' ? [[undefined, range]] : [[range, undefined]];else if (Array.isArray(range) && !Array.isArray(range[0])) range = [range];\n  return range;\n};\n\nvar getReference = function getReference(reference, value) {\n  var nextReference;\n\n  if (value) {\n    if (Array.isArray(value)) {\n      if (value[0] instanceof Date) {\n        nextReference = value[0];\n      } else if (Array.isArray(value[0])) {\n        nextReference = value[0][0] ? value[0][0] : value[0][1];\n      } else {\n        nextReference = new Date();\n        nextReference.setHours(0, 0, 0, 0);\n      }\n    } else nextReference = value;\n  } else if (reference) {\n    nextReference = reference;\n  } else {\n    nextReference = new Date();\n    nextReference.setHours(0, 0, 0, 0);\n  }\n\n  return nextReference;\n};\n\nvar buildDisplayBounds = function buildDisplayBounds(reference, firstDayOfWeek) {\n  var start = new Date(reference);\n  start.setDate(1); // first of month\n  // In case Sunday is the first day of the month, and the user asked for Monday\n  // to be the first day of the week, then we need to include Sunday and six\n  // days prior.\n\n  start = start.getDay() === 0 && firstDayOfWeek === 1 ? start = subtractDays(start, 6) : // beginning of week\n  start = subtractDays(start, start.getDay() - firstDayOfWeek);\n  var end = addDays(start, 7 * 5 + 7); // 5 weeks to end of week\n\n  return [start, end];\n};\n\nexport var getOutputFormat = function getOutputFormat(dates) {\n  if (typeof dates === 'string' && (dates == null ? void 0 : dates.indexOf('T')) === -1) {\n    return 'no timezone';\n  }\n\n  if (Array.isArray(dates)) {\n    return getOutputFormat(dates[0]);\n  }\n\n  return 'date timezone';\n};\nvar millisecondsPerYear = 31557600000;\n\nvar CalendarDayButton = function CalendarDayButton(props) {\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    tabIndex: -1,\n    plain: true\n  }, props));\n};\n\nvar CalendarDay = function CalendarDay(_ref) {\n  var children = _ref.children,\n      fill = _ref.fill,\n      size = _ref.size,\n      isInRange = _ref.isInRange,\n      isSelected = _ref.isSelected,\n      otherMonth = _ref.otherMonth,\n      _ref$buttonProps = _ref.buttonProps,\n      buttonProps = _ref$buttonProps === void 0 ? {} : _ref$buttonProps;\n  return /*#__PURE__*/React.createElement(StyledDayContainer, {\n    role: \"gridcell\",\n    sizeProp: size,\n    fillContainer: fill\n  }, /*#__PURE__*/React.createElement(CalendarDayButton, _extends({\n    fill: fill\n  }, buttonProps), /*#__PURE__*/React.createElement(StyledDay, {\n    disabledProp: buttonProps.disabled,\n    inRange: isInRange,\n    otherMonth: otherMonth,\n    isSelected: isSelected,\n    sizeProp: size,\n    fillContainer: fill\n  }, children)));\n};\n\nvar CalendarCustomDay = function CalendarCustomDay(_ref2) {\n  var children = _ref2.children,\n      fill = _ref2.fill,\n      size = _ref2.size,\n      buttonProps = _ref2.buttonProps;\n\n  if (!buttonProps) {\n    return /*#__PURE__*/React.createElement(StyledDayContainer, {\n      role: \"gridcell\",\n      sizeProp: size,\n      fillContainer: fill\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(StyledDayContainer, {\n    role: \"gridcell\",\n    sizeProp: size,\n    fillContainer: fill\n  }, /*#__PURE__*/React.createElement(CalendarDayButton, _extends({\n    fill: fill\n  }, buttonProps), children));\n};\n\nvar Calendar = /*#__PURE__*/forwardRef(function (_ref3, ref) {\n  var activeDateProp = _ref3.activeDate,\n      _ref3$animate = _ref3.animate,\n      animate = _ref3$animate === void 0 ? true : _ref3$animate,\n      boundsProp = _ref3.bounds,\n      children = _ref3.children,\n      dateProp = _ref3.date,\n      datesProp = _ref3.dates,\n      daysOfWeek = _ref3.daysOfWeek,\n      disabled = _ref3.disabled,\n      initialFocus = _ref3.initialFocus,\n      fill = _ref3.fill,\n      _ref3$firstDayOfWeek = _ref3.firstDayOfWeek,\n      firstDayOfWeek = _ref3$firstDayOfWeek === void 0 ? 0 : _ref3$firstDayOfWeek,\n      header = _ref3.header,\n      _ref3$locale = _ref3.locale,\n      locale = _ref3$locale === void 0 ? 'en-US' : _ref3$locale,\n      messages = _ref3.messages,\n      onReference = _ref3.onReference,\n      onSelect = _ref3.onSelect,\n      range = _ref3.range,\n      referenceProp = _ref3.reference,\n      _ref3$showAdjacentDay = _ref3.showAdjacentDays,\n      showAdjacentDays = _ref3$showAdjacentDay === void 0 ? true : _ref3$showAdjacentDay,\n      _ref3$size = _ref3.size,\n      size = _ref3$size === void 0 ? 'medium' : _ref3$size,\n      timestampProp = _ref3.timestamp,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var announce = useContext(AnnounceContext);\n\n  var _useContext = useContext(MessageContext),\n      format = _useContext.format; // when mousedown, we don't want to let Calendar set\n  // active date to firstInMonth\n\n\n  var _useState = useState(false),\n      mouseDown = _useState[0],\n      setMouseDown = _useState[1];\n\n  var onMouseDown = function onMouseDown() {\n    return setMouseDown(true);\n  };\n\n  var onMouseUp = function onMouseUp() {\n    return setMouseDown(false);\n  };\n\n  useEffect(function () {\n    document.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mouseup', onMouseUp);\n    return function () {\n      document.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n  }, []); // set activeDate when caller changes it, allows us to change\n  // it internally too\n\n  var _useState2 = useState(dateProp && typeof dateProp === 'string' && range ? 'end' : 'start'),\n      activeDate = _useState2[0],\n      setActiveDate = _useState2[1];\n\n  useEffect(function () {\n    if (activeDateProp) setActiveDate(activeDateProp);\n  }, [activeDateProp]);\n\n  var _useState3 = useState(normalizeInput(dateProp || datesProp)),\n      value = _useState3[0],\n      setValue = _useState3[1];\n\n  useEffect(function () {\n    var val = dateProp || datesProp;\n    setValue(normalizeInput(val));\n  }, [dateProp, datesProp]);\n\n  var _useState4 = useState(getReference(normalizeInput(referenceProp), value)),\n      reference = _useState4[0],\n      setReference = _useState4[1];\n\n  useEffect(function () {\n    if (value) {\n      setReference(getReference(normalizeInput(referenceProp), value));\n    }\n  }, [referenceProp, value]);\n\n  var _useState5 = useState(getOutputFormat(dateProp || datesProp)),\n      outputFormat = _useState5[0],\n      setOutputFormat = _useState5[1];\n\n  useEffect(function () {\n    setOutputFormat(getOutputFormat(dateProp || datesProp));\n  }, [dateProp, datesProp]); // normalize bounds\n\n  var _useState6 = useState(boundsProp),\n      bounds = _useState6[0],\n      setBounds = _useState6[1];\n\n  useEffect(function () {\n    if (boundsProp) setBounds(boundsProp);else setBounds(undefined);\n  }, [boundsProp]); // calculate the bounds we display based on the reference\n\n  var _useState7 = useState(buildDisplayBounds(reference, firstDayOfWeek)),\n      displayBounds = _useState7[0],\n      setDisplayBounds = _useState7[1];\n\n  var _useState8 = useState(),\n      targetDisplayBounds = _useState8[0],\n      setTargetDisplayBounds = _useState8[1];\n\n  var _useState9 = useState(),\n      slide = _useState9[0],\n      setSlide = _useState9[1];\n\n  var _useState10 = useState(),\n      animating = _useState10[0],\n      setAnimating = _useState10[1]; // When the reference changes, we need to update the displayBounds.\n  // This is easy when we aren't animating. If we are animating,\n  // we temporarily increase the displayBounds to be the union of the old\n  // and new ones and set slide to drive the animation. We keep track\n  // of where we are heading via targetDisplayBounds. When the animation\n  // finishes, we prune displayBounds down to where we are headed and\n  // clear the slide and targetDisplayBounds.\n\n\n  useEffect(function () {\n    var nextDisplayBounds = buildDisplayBounds(reference, firstDayOfWeek); // Checks if the difference between the current and next DisplayBounds is\n    // greater than a year. If that's the case, calendar should update without\n    // animation.\n\n    if (nextDisplayBounds[0].getTime() !== displayBounds[0].getTime() && nextDisplayBounds[1].getTime() !== displayBounds[1].getTime()) {\n      var diffBoundsAboveYear = false;\n\n      if (nextDisplayBounds[0].getTime() < displayBounds[0].getTime()) {\n        if (displayBounds[0].getTime() - nextDisplayBounds[0].getTime() > millisecondsPerYear) {\n          diffBoundsAboveYear = true;\n        }\n      } else if (nextDisplayBounds[1].getTime() > displayBounds[1].getTime()) {\n        if (nextDisplayBounds[1].getTime() - displayBounds[1].getTime() > millisecondsPerYear) {\n          diffBoundsAboveYear = true;\n        }\n      }\n\n      if (!animate || diffBoundsAboveYear) {\n        setDisplayBounds(nextDisplayBounds);\n      } else {\n        setTargetDisplayBounds(nextDisplayBounds);\n      }\n    }\n  }, [animate, firstDayOfWeek, reference, displayBounds]);\n  useEffect(function () {\n    // if the reference timezone has changed (e.g., controlled component),\n    // both ends of the displayBounds should inherit that new timestamp\n    if (targetDisplayBounds) {\n      if (targetDisplayBounds[0].getTime() < displayBounds[0].getTime() || targetDisplayBounds[1].getTime() > displayBounds[1].getTime()) {\n        setDisplayBounds([targetDisplayBounds[0], targetDisplayBounds[1]]);\n      }\n\n      if (targetDisplayBounds[0].getTime() < displayBounds[0].getTime()) {\n        // only animate if the duration is within a year\n        if (displayBounds[0].getTime() - targetDisplayBounds[0].getTime() < millisecondsPerYear && daysApart(displayBounds[0], targetDisplayBounds[0])) {\n          setSlide({\n            direction: 'down',\n            weeks: daysApart(displayBounds[0], targetDisplayBounds[0]) / 7\n          });\n          setAnimating(true);\n        }\n      } else if (targetDisplayBounds[1].getTime() > displayBounds[1].getTime()) {\n        if (targetDisplayBounds[1].getTime() - displayBounds[1].getTime() < millisecondsPerYear && daysApart(targetDisplayBounds[1], displayBounds[1])) {\n          setSlide({\n            direction: 'up',\n            weeks: daysApart(targetDisplayBounds[1], displayBounds[1]) / 7\n          });\n          setAnimating(true);\n        }\n      }\n\n      return undefined;\n    }\n\n    setSlide(undefined);\n    return undefined;\n  }, [animating, displayBounds, targetDisplayBounds]); // Last step in updating the displayBounds. Allows for pruning\n  // displayBounds and cleaning up states to occur after animation.\n\n  useEffect(function () {\n    if (animating && targetDisplayBounds) {\n      // Wait for animation to finish before cleaning up.\n      var timer = setTimeout(function () {\n        setDisplayBounds(targetDisplayBounds);\n        setTargetDisplayBounds(undefined);\n        setSlide(undefined);\n        setAnimating(false);\n      }, 400 // Empirically determined.\n      );\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n\n    return undefined;\n  }, [animating, targetDisplayBounds]); // We have to deal with reference being the end of a month with more\n  // days than the month we are changing to. So, we always set reference\n  // to the first of the month before changing the month.\n\n  var previousMonth = useMemo(function () {\n    return endOfMonth(subtractMonths(startOfMonth(reference), 1));\n  }, [reference]);\n  var nextMonth = useMemo(function () {\n    return startOfMonth(addMonths(startOfMonth(reference), 1));\n  }, [reference]);\n  var daysRef = useRef();\n\n  var _useState11 = useState(),\n      focus = _useState11[0],\n      setFocus = _useState11[1];\n\n  var _useState12 = useState(),\n      active = _useState12[0],\n      setActive = _useState12[1];\n\n  useEffect(function () {\n    if (initialFocus === 'days') daysRef.current.focus();\n  }, [initialFocus]);\n  var changeReference = useCallback(function (nextReference) {\n    if (betweenDates(nextReference, bounds)) {\n      setReference(nextReference);\n      if (onReference) onReference(nextReference.toISOString());\n    }\n  }, [onReference, bounds]);\n  var handleRange = useCallback(function (selectedDate) {\n    var _priorRange$, _priorRange$$, _priorRange$2, _priorRange$2$;\n\n    var result;\n    var priorRange = normalizeRange(value, activeDate); // deselect when date clicked was the start/end of the range\n\n    if (selectedDate.getTime() === (priorRange == null ? void 0 : (_priorRange$ = priorRange[0]) == null ? void 0 : (_priorRange$$ = _priorRange$[0]) == null ? void 0 : _priorRange$$.getTime())) {\n      result = [[undefined, priorRange[0][1]]];\n      setActiveDate('start');\n    } else if (selectedDate.getTime() === (priorRange == null ? void 0 : (_priorRange$2 = priorRange[0]) == null ? void 0 : (_priorRange$2$ = _priorRange$2[1]) == null ? void 0 : _priorRange$2$.getTime())) {\n      result = [[priorRange[0][0], undefined]];\n      setActiveDate('end');\n    } // selecting start date\n    else if (activeDate === 'start') {\n      if (!priorRange) {\n        result = [[selectedDate, undefined]];\n      } else if (!priorRange[0][1]) {\n        result = [[selectedDate, priorRange[0][1]]];\n      } else if (selectedDate.getTime() < priorRange[0][1].getTime()) {\n        result = [[selectedDate, priorRange[0][1]]];\n      } else if (selectedDate.getTime() > priorRange[0][1].getTime()) {\n        result = [[selectedDate, undefined]];\n      }\n\n      setActiveDate('end');\n    } // selecting end date\n    else if (!priorRange) {\n      result = [[undefined, selectedDate]];\n      setActiveDate('start');\n    } else if (selectedDate.getTime() < priorRange[0][0].getTime()) {\n      result = [[selectedDate, undefined]];\n      setActiveDate('end');\n    } else if (selectedDate.getTime() > priorRange[0][0].getTime()) {\n      result = [[priorRange[0][0], selectedDate]];\n      setActiveDate('start');\n    } // If no dates selected, always return undefined; else format\n    // result according to specified range value.\n\n\n    if (result[0].includes(undefined)) {\n      if (range === 'array') {\n        result = !result[0][0] && !result[0][1] ? undefined : result;\n      } else {\n        result = result[0].find(function (d) {\n          return d !== undefined;\n        });\n      }\n    }\n\n    setValue(result);\n    return result;\n  }, [activeDate, value, range]);\n  var selectDate = useCallback(function (selectedDate) {\n    var nextValue;\n\n    if (range || Array.isArray(value == null ? void 0 : value[0])) {\n      nextValue = handleRange(selectedDate);\n    } else {\n      nextValue = selectedDate;\n    }\n\n    if (onSelect) {\n      nextValue = normalizeOutput(nextValue, outputFormat);\n      onSelect(nextValue);\n    }\n  }, [handleRange, onSelect, outputFormat, range, value]);\n\n  var _onClick = function onClick(selectedDate) {\n    selectDate(selectedDate);\n    announce(\"Selected \" + getLocaleString(selectedDate, locale), 'assertive'); // Chrome moves the focus indicator to this button. Set\n    // the focus to the grid of days instead.\n\n    daysRef.current.focus();\n    setActive(selectedDate);\n  };\n\n  var renderCalendarHeader = function renderCalendarHeader() {\n    var PreviousIcon = size === 'small' ? theme.calendar.icons.small.previous : theme.calendar.icons.previous;\n    var NextIcon = size === 'small' ? theme.calendar.icons.small.next : theme.calendar.icons.next;\n    return /*#__PURE__*/React.createElement(Box, {\n      direction: \"row\",\n      justify: \"between\",\n      align: \"center\"\n    }, /*#__PURE__*/React.createElement(Box, {\n      flex: true,\n      pad: {\n        horizontal: headingPadMap[size] || 'small'\n      }\n    }, /*#__PURE__*/React.createElement(Heading, {\n      level: size === 'small' ? theme.calendar.heading && theme.calendar.heading.level || 4 : (theme.calendar.heading && theme.calendar.heading.level || 4) - 1,\n      size: size,\n      margin: \"none\"\n    }, reference.toLocaleDateString(locale, {\n      month: 'long',\n      year: 'numeric'\n    }))), /*#__PURE__*/React.createElement(Box, {\n      flex: false,\n      direction: \"row\",\n      align: \"center\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      a11yTitle: format({\n        id: 'calendar.previous',\n        messages: messages,\n        values: {\n          date: previousMonth.toLocaleDateString(locale, {\n            month: 'long',\n            year: 'numeric'\n          })\n        }\n      }),\n      icon: /*#__PURE__*/React.createElement(PreviousIcon, {\n        size: size !== 'small' ? size : undefined\n      }),\n      disabled: !betweenDates(previousMonth, bounds),\n      onClick: function onClick() {\n        changeReference(previousMonth);\n        announce(format({\n          id: 'calendar.previousMove',\n          messages: messages,\n          values: {\n            date: previousMonth.toLocaleDateString(locale, {\n              month: 'long',\n              year: 'numeric'\n            })\n          }\n        }));\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      a11yTitle: format({\n        id: 'calendar.next',\n        messages: messages,\n        values: {\n          date: nextMonth.toLocaleDateString(locale, {\n            month: 'long',\n            year: 'numeric'\n          })\n        }\n      }),\n      icon: /*#__PURE__*/React.createElement(NextIcon, {\n        size: size !== 'small' ? size : undefined\n      }),\n      disabled: !betweenDates(nextMonth, bounds),\n      onClick: function onClick() {\n        changeReference(nextMonth);\n        announce(format({\n          id: 'calendar.nextMove',\n          messages: messages,\n          values: {\n            date: nextMonth.toLocaleDateString(locale, {\n              month: 'long',\n              year: 'numeric'\n            })\n          }\n        }));\n      }\n    })));\n  };\n\n  var renderDaysOfWeek = function renderDaysOfWeek() {\n    var day = new Date(displayBounds[0]);\n    var days = [];\n\n    while (days.length < 7) {\n      days.push( /*#__PURE__*/React.createElement(StyledDayContainer, {\n        role: \"gridcell\",\n        key: days.length,\n        sizeProp: size,\n        fillContainer: fill\n      }, /*#__PURE__*/React.createElement(StyledDay, {\n        otherMonth: true,\n        sizeProp: size,\n        fillContainer: fill\n      }, day.toLocaleDateString(locale, {\n        weekday: 'narrow'\n      }))));\n      day = addDays(day, 1);\n    }\n\n    return /*#__PURE__*/React.createElement(StyledWeek, {\n      role: \"row\"\n    }, days);\n  };\n\n  var weeks = [];\n  var day = new Date(displayBounds[0]);\n  var days;\n  var firstDayInMonth;\n  var blankWeek = false;\n\n  while (day.getTime() < displayBounds[1].getTime()) {\n    if (day.getDay() === firstDayOfWeek) {\n      if (days) {\n        weeks.push( /*#__PURE__*/React.createElement(StyledWeek, {\n          role: \"row\",\n          key: day.getTime(),\n          fillContainer: fill\n        }, days));\n      }\n\n      days = [];\n    }\n\n    var otherMonth = day.getMonth() !== reference.getMonth();\n\n    if (!showAdjacentDays && otherMonth) {\n      days.push( /*#__PURE__*/React.createElement(StyledDayContainer, {\n        key: day.getTime(),\n        sizeProp: size,\n        fillContainer: fill\n      }, /*#__PURE__*/React.createElement(StyledDay, {\n        sizeProp: size,\n        fillContainer: fill\n      })));\n\n      if (weeks.length === 5 &&\n      /* If the length days array is less than the current getDate()\n      we know that all days in the array are from the next month. */\n      days.length < day.getDate()) {\n        blankWeek = true;\n      }\n    } else if (\n    /* Do not show adjacent days in 6th row if all days\n    fall in the next month */\n    showAdjacentDays === 'trim' && otherMonth && weeks.length === 5 &&\n    /* If the length days array is less than the current getDate()\n    we know that all days in the array are from the next month. */\n    days.length < day.getDate()) {\n      blankWeek = true;\n      days.push( /*#__PURE__*/React.createElement(StyledDayContainer, {\n        key: day.getTime(),\n        sizeProp: size,\n        fillContainer: fill\n      }, /*#__PURE__*/React.createElement(StyledDay, {\n        sizeProp: size,\n        fillContainer: fill\n      })));\n    } else {\n      (function () {\n        var dateObject = day; // this.dayRefs[dateObject] = React.createRef();\n\n        var selected = false;\n        var inRange = false;\n        var selectedState = withinDates(day, range ? normalizeRange(value, activeDate) : value);\n\n        if (selectedState === 2) {\n          selected = true;\n        } else if (selectedState === 1) {\n          inRange = true;\n        }\n\n        var dayDisabled = withinDates(day, normalizeInput(disabled)) || bounds && !betweenDates(day, normalizeInput(bounds));\n\n        if (!firstDayInMonth && !dayDisabled && day.getMonth() === reference.getMonth()) {\n          firstDayInMonth = dateObject;\n        }\n\n        if (!children) {\n          days.push( /*#__PURE__*/React.createElement(CalendarDay, {\n            key: day.getTime(),\n            buttonProps: {\n              a11yTitle: day.toDateString(),\n              active: active && active.getTime() === day.getTime(),\n              disabled: dayDisabled && !!dayDisabled,\n              onClick: function onClick() {\n                return _onClick(dateObject);\n              },\n              onMouseOver: function onMouseOver() {\n                return setActive(dateObject);\n              },\n              onMouseOut: function onMouseOut() {\n                return setActive(undefined);\n              }\n            },\n            isInRange: inRange,\n            isSelected: selected,\n            otherMonth: day.getMonth() !== reference.getMonth(),\n            size: size,\n            fill: fill\n          }, day.getDate()));\n        } else {\n          days.push( /*#__PURE__*/React.createElement(CalendarCustomDay, {\n            key: day.getTime(),\n            buttonProps: onSelect ? {\n              a11yTitle: day.toDateString(),\n              active: active && active.getTime() === day.getTime(),\n              disabled: dayDisabled && !!dayDisabled,\n              onClick: function onClick() {\n                return _onClick(dateObject);\n              },\n              onMouseOver: function onMouseOver() {\n                return setActive(dateObject);\n              },\n              onMouseOut: function onMouseOut() {\n                return setActive(undefined);\n              }\n            } : null,\n            size: size,\n            fill: fill\n          }, children({\n            date: day,\n            day: day.getDate(),\n            isInRange: inRange,\n            isSelected: selected\n          })));\n        }\n      })();\n    }\n\n    day = addDays(day, 1);\n  }\n\n  weeks.push( /*#__PURE__*/React.createElement(StyledWeek // if a week contains only blank days, for screen reader accessibility\n  // we don't want to set role=\"row\"\n  , {\n    role: !blankWeek ? 'row' : undefined,\n    key: day.getTime(),\n    fillContainer: fill\n  }, days));\n  return /*#__PURE__*/React.createElement(StyledCalendar, _extends({\n    ref: ref,\n    sizeProp: size,\n    fillContainer: fill\n  }, rest), /*#__PURE__*/React.createElement(Box, {\n    fill: fill\n  }, header ? header({\n    date: reference,\n    locale: locale,\n    onPreviousMonth: function onPreviousMonth() {\n      changeReference(previousMonth);\n      announce(format({\n        id: 'calendar.previous',\n        messages: messages,\n        values: {\n          date: previousMonth.toLocaleDateString(locale, {\n            month: 'long',\n            year: 'numeric'\n          })\n        }\n      }));\n    },\n    onNextMonth: function onNextMonth() {\n      changeReference(nextMonth);\n      announce(format({\n        id: 'calendar.next',\n        messages: messages,\n        values: {\n          date: nextMonth.toLocaleDateString(locale, {\n            month: 'long',\n            year: 'numeric'\n          })\n        }\n      }));\n    },\n    previousInBound: betweenDates(previousMonth, bounds),\n    nextInBound: betweenDates(nextMonth, bounds)\n  }) : renderCalendarHeader(previousMonth, nextMonth), daysOfWeek && renderDaysOfWeek(), /*#__PURE__*/React.createElement(Keyboard, {\n    onEnter: function onEnter() {\n      return active !== undefined ? _onClick(active) : undefined;\n    },\n    onUp: function onUp(event) {\n      event.preventDefault();\n      event.stopPropagation(); // so the page doesn't scroll\n\n      setActive(addDays(active, -7));\n\n      if (!betweenDates(addDays(active, -7), displayBounds)) {\n        changeReference(addDays(active, -7));\n      }\n    },\n    onDown: function onDown(event) {\n      event.preventDefault();\n      event.stopPropagation(); // so the page doesn't scroll\n\n      setActive(addDays(active, 7));\n\n      if (!betweenDates(addDays(active, 7), displayBounds)) {\n        changeReference(active);\n      }\n    },\n    onLeft: function onLeft() {\n      setActive(addDays(active, -1));\n\n      if (!betweenDates(addDays(active, -1), displayBounds)) {\n        changeReference(active);\n      }\n    },\n    onRight: function onRight() {\n      setActive(addDays(active, 1));\n\n      if (!betweenDates(addDays(active, 2), displayBounds)) {\n        changeReference(active);\n      }\n    }\n  }, /*#__PURE__*/React.createElement(StyledWeeksContainer, {\n    tabIndex: 0,\n    role: \"grid\",\n    \"aria-label\": reference.toLocaleDateString(locale, {\n      month: 'long',\n      year: 'numeric'\n    }) + \"; \" + currentlySelectedString(value, locale),\n    ref: daysRef,\n    sizeProp: size,\n    fillContainer: fill,\n    focus: focus,\n    onFocus: function onFocus() {\n      setFocus(true); // caller focused onto Calendar via keyboard\n\n      if (!mouseDown) {\n        setActive(new Date(firstDayInMonth));\n      }\n    },\n    onBlur: function onBlur() {\n      setFocus(false);\n      setActive(undefined);\n    }\n  }, /*#__PURE__*/React.createElement(StyledWeeks, {\n    slide: slide,\n    sizeProp: size,\n    fillContainer: fill\n  }, weeks)))));\n});\nCalendar.displayName = 'Calendar';\nCalendar.propTypes = CalendarPropTypes;\nexport { Calendar };","map":null,"metadata":{},"sourceType":"module"}