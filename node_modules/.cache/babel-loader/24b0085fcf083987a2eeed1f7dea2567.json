{"ast":null,"code":"var _excluded = [\"a11yTitle\", \"aria-label\", \"checked\", \"children\", \"defaultChecked\", \"disabled\", \"fill\", \"focus\", \"focusIndicator\", \"id\", \"label\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\", \"pad\", \"reverse\", \"toggle\", \"indeterminate\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { removeUndefined } from '../../utils/object';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { FormContext } from '../Form/FormContext';\nimport { CheckBoxPropTypes } from './propTypes';\nimport { StyledCheckBox, StyledCheckBoxBox, StyledCheckBoxIcon, StyledCheckBoxContainer, StyledCheckBoxInput, StyledCheckBoxToggle, StyledCheckBoxKnob } from './StyledCheckBox';\nimport { normalizeColor } from '../../utils';\n\nvar stopLabelClick = function stopLabelClick(event) {\n  // prevents clicking on the label trigging the event twice\n  // https://stackoverflow.com/questions/24501497/why-the-onclick-element-will-trigger-twice-for-label-element\n  if (event.target.type !== 'checkbox') {\n    event.stopPropagation();\n  }\n};\n\nvar CheckBox = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref2;\n\n  var a11yTitle = _ref.a11yTitle,\n      ariaLabel = _ref['aria-label'],\n      checkedProp = _ref.checked,\n      children = _ref.children,\n      _ref$defaultChecked = _ref.defaultChecked,\n      defaultChecked = _ref$defaultChecked === void 0 ? false : _ref$defaultChecked,\n      disabled = _ref.disabled,\n      fill = _ref.fill,\n      focusProp = _ref.focus,\n      _ref$focusIndicator = _ref.focusIndicator,\n      focusIndicator = _ref$focusIndicator === void 0 ? true : _ref$focusIndicator,\n      id = _ref.id,\n      label = _ref.label,\n      name = _ref.name,\n      _onBlur = _ref.onBlur,\n      _onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      _onMouseEnter = _ref.onMouseEnter,\n      _onMouseLeave = _ref.onMouseLeave,\n      _onMouseOut = _ref.onMouseOut,\n      _onMouseOver = _ref.onMouseOver,\n      pad = _ref.pad,\n      reverse = _ref.reverse,\n      toggle = _ref.toggle,\n      indeterminate = _ref.indeterminate,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var formContext = useContext(FormContext);\n\n  var _formContext$useFormI = formContext.useFormInput({\n    name: name,\n    value: checkedProp,\n    initialValue: defaultChecked\n  }),\n      checked = _formContext$useFormI[0],\n      setChecked = _formContext$useFormI[1];\n\n  var _useState = useState(focusProp),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  useEffect(function () {\n    // don't allow checkbox to have focus when disabled\n    if (disabled && focusProp) setFocus(false);else setFocus(focusProp);\n  }, [disabled, focusProp]);\n  useEffect(function () {\n    if (checkedProp && indeterminate) {\n      console.warn('Checkbox cannot be \"checked\" and \"indeterminate\" at the same time.');\n    }\n\n    if (toggle && indeterminate) {\n      console.warn('Checkbox of type toggle does not have \"indeterminate\" state.');\n    }\n  }, [checkedProp, toggle, indeterminate]);\n  var themeableProps = {\n    checked: checked,\n    disabled: disabled,\n    focus: focus,\n    // when contained in a FormField, focusIndicator = false,\n    // so that the FormField has focus style. However, we still\n    // need to visually indicate when a CheckBox is active.\n    // If focus = true but focusIndicator = false,\n    // we will apply the hover treament.\n    focusIndicator: focusIndicator,\n    reverse: reverse,\n    toggle: toggle,\n    indeterminate: indeterminate\n  };\n  var hidden;\n\n  if (disabled && checked) {\n    hidden = /*#__PURE__*/React.createElement(\"input\", {\n      name: name,\n      type: \"hidden\",\n      value: \"true\"\n    });\n  }\n\n  var _theme$checkBox$icons = theme.checkBox.icons,\n      CheckedIcon = _theme$checkBox$icons.checked,\n      IndeterminateIcon = _theme$checkBox$icons.indeterminate;\n  var borderColor = normalizeColor(theme.checkBox.border.color, theme);\n\n  if (checked) {\n    borderColor = normalizeColor(theme.checkBox.color || 'control', theme);\n  }\n\n  var visual = toggle ? /*#__PURE__*/React.createElement(StyledCheckBoxToggle, themeableProps, /*#__PURE__*/React.createElement(StyledCheckBoxKnob, themeableProps)) : /*#__PURE__*/React.createElement(StyledCheckBoxBox, _extends({\n    as: Box,\n    align: \"center\",\n    justify: \"center\",\n    width: theme.checkBox.size,\n    height: theme.checkBox.size,\n    border: {\n      size: theme.checkBox.border.width,\n      color: borderColor\n    },\n    round: theme.checkBox.check.radius\n  }, themeableProps), !indeterminate && checked && (CheckedIcon ? /*#__PURE__*/React.createElement(CheckedIcon, {\n    theme: theme,\n    as: StyledCheckBoxIcon\n  }) : /*#__PURE__*/React.createElement(StyledCheckBoxIcon, _extends({\n    theme: theme,\n    viewBox: \"0 0 24 24\",\n    preserveAspectRatio: \"xMidYMid meet\"\n  }, themeableProps), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M6,11.3 L10.3,16 L18,6.2\"\n  }))), !checked && indeterminate && (IndeterminateIcon ? /*#__PURE__*/React.createElement(IndeterminateIcon, {\n    theme: theme,\n    as: StyledCheckBoxIcon\n  }) : /*#__PURE__*/React.createElement(StyledCheckBoxIcon, _extends({\n    theme: theme,\n    viewBox: \"0 0 24 24\",\n    preserveAspectRatio: \"xMidYMid meet\"\n  }, themeableProps), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M6,12 L18,12\"\n  }))));\n  var side = !reverse !== !theme.dir ? 'left' : 'right';\n  var checkBoxNode = /*#__PURE__*/React.createElement(StyledCheckBox, _extends({\n    as: Box,\n    align: \"center\",\n    justify: \"center\",\n    margin: label && (_ref2 = {}, _ref2[side] = theme.checkBox.gap || 'small', _ref2)\n  }, themeableProps), /*#__PURE__*/React.createElement(StyledCheckBoxInput, _extends({\n    \"aria-label\": ariaLabel || a11yTitle\n  }, rest, {\n    ref: ref,\n    type: \"checkbox\"\n  }, removeUndefined({\n    id: id,\n    name: name,\n    checked: checked,\n    disabled: disabled\n  }), themeableProps, {\n    onFocus: function onFocus(event) {\n      setFocus(true);\n      if (_onFocus) _onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      setFocus(false);\n      if (_onBlur) _onBlur(event);\n    },\n    onChange: function onChange(event) {\n      setChecked(event.target.checked);\n      if (_onChange) _onChange(event);\n    }\n  })), children ? children({\n    checked: checked,\n    indeterminate: indeterminate\n  }) : visual, hidden);\n  var normalizedLabel = typeof label === 'string' ? /*#__PURE__*/React.createElement(\"span\", null, label) : label;\n  var first = reverse ? normalizedLabel : checkBoxNode;\n  var second = reverse ? checkBoxNode : normalizedLabel;\n  return /*#__PURE__*/React.createElement(StyledCheckBoxContainer, _extends({\n    fillProp: fill,\n    reverse: reverse\n  }, removeUndefined({\n    htmlFor: id,\n    disabled: disabled\n  }), {\n    checked: checked,\n    label: label,\n    onClick: stopLabelClick,\n    pad: pad,\n    onMouseEnter: function onMouseEnter(event) {\n      return _onMouseEnter == null ? void 0 : _onMouseEnter(event);\n    },\n    onMouseOver: function onMouseOver(event) {\n      return _onMouseOver == null ? void 0 : _onMouseOver(event);\n    },\n    onMouseLeave: function onMouseLeave(event) {\n      return _onMouseLeave == null ? void 0 : _onMouseLeave(event);\n    },\n    onMouseOut: function onMouseOut(event) {\n      return _onMouseOut == null ? void 0 : _onMouseOut(event);\n    }\n  }, themeableProps), first, second);\n});\nCheckBox.displayName = 'CheckBox';\nCheckBox.propTypes = CheckBoxPropTypes;\nexport { CheckBox };","map":null,"metadata":{},"sourceType":"module"}