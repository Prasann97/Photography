{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport PropTypes from 'prop-types';\nimport { genericProps } from '../../utils/general-prop-types';\nvar sizes = ['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge'];\nvar sides = ['horizontal', 'vertical', 'top', 'bottom', 'left', 'right'];\nvar parts = ['header', 'body', 'footer'];\nvar verticalAlign = ['bottom', 'middle', 'top'];\nvar padShapeSides = {};\nsides.forEach(function (side) {\n  padShapeSides[side] = PropTypes.oneOfType([PropTypes.oneOf(sizes), PropTypes.string]);\n});\nvar padShapeParts = {};\nparts.forEach(function (part) {\n  padShapeParts[part] = {};\n  sides.forEach(function (side) {\n    padShapeParts[part][side] = PropTypes.oneOf(sizes);\n  });\n});\nvar backgroundShape = {};\n[].concat(parts, ['pinned']).forEach(function (part) {\n  backgroundShape[part] = PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n    dark: PropTypes.string,\n    light: PropTypes.string\n  }), PropTypes.arrayOf(PropTypes.string)]);\n});\nvar borderTypes = [PropTypes.bool, PropTypes.oneOf(sides), PropTypes.shape({\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n    dark: PropTypes.string,\n    light: PropTypes.string\n  })]),\n  side: PropTypes.oneOf(sides),\n  size: PropTypes.oneOfType([PropTypes.oneOf(sizes), PropTypes.string])\n})];\nvar borderShape = {};\nparts.forEach(function (part) {\n  borderShape[part] = PropTypes.oneOfType(borderTypes);\n});\nvar PropType = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  PropType = _extends({}, genericProps, {\n    background: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), PropTypes.shape(backgroundShape)]),\n    border: PropTypes.oneOfType([].concat(borderTypes, [PropTypes.shape(borderShape)])),\n    columns: PropTypes.arrayOf(PropTypes.shape({\n      align: PropTypes.oneOf(['center', 'start', 'end']),\n      aggregate: PropTypes.oneOf(['avg', 'max', 'min', 'sum']),\n      footer: PropTypes.oneOfType([PropTypes.node, PropTypes.shape({\n        aggregate: PropTypes.bool\n      })]),\n      header: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.shape({\n        aggregate: PropTypes.bool\n      })]),\n      pin: PropTypes.bool,\n      plain: PropTypes.bool,\n      primary: PropTypes.bool,\n      property: PropTypes.string.isRequired,\n      render: PropTypes.func,\n      search: PropTypes.bool,\n      sortable: PropTypes.bool,\n      size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge', '1/2', '1/4', '2/4', '3/4', '1/3', '2/3']), PropTypes.string]),\n      units: PropTypes.string,\n      verticalAlign: PropTypes.oneOf(['middle', 'top', 'bottom'])\n    })),\n    data: PropTypes.arrayOf(PropTypes.shape({})),\n    disabled: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]),\n    groupBy: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      property: PropTypes.string,\n      expand: PropTypes.arrayOf(PropTypes.string),\n      expandable: PropTypes.arrayOf(PropTypes.string),\n      select: PropTypes.objectOf(PropTypes.oneOf(['all', 'some', 'none'])),\n      onExpand: PropTypes.func,\n      onSelect: PropTypes.func\n    })]),\n    onClickRow: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf(['select'])]),\n    rowDetails: PropTypes.func,\n    onMore: PropTypes.func,\n    onSearch: PropTypes.func,\n    onSelect: PropTypes.func,\n    onSort: PropTypes.func,\n    onUpdate: PropTypes.func,\n    pad: PropTypes.oneOfType([PropTypes.oneOf(sizes), PropTypes.string, PropTypes.shape(padShapeSides), PropTypes.shape(padShapeParts)]),\n    paginate: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    pin: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['header', 'footer'])]),\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    primaryKey: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    replace: PropTypes.bool,\n    resizeable: PropTypes.bool,\n    rowProps: PropTypes.shape({}),\n    select: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n    show: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n      page: PropTypes.number\n    })]),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]),\n    sort: PropTypes.shape({\n      direction: PropTypes.oneOf(['asc', 'desc']),\n      external: PropTypes.bool,\n      property: PropTypes.string.isRequired\n    }),\n    sortable: PropTypes.bool,\n    step: PropTypes.number,\n    verticalAlign: PropTypes.oneOfType([PropTypes.oneOf(verticalAlign), PropTypes.shape({\n      header: PropTypes.oneOf(verticalAlign),\n      body: PropTypes.oneOf(verticalAlign),\n      footer: PropTypes.oneOf(verticalAlign)\n    })])\n  });\n}\n\nexport var DataTablePropTypes = PropType;","map":null,"metadata":{},"sourceType":"module"}