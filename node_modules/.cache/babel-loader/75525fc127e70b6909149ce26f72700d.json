{"ast":null,"code":"var _excluded = [\"activeChild\", \"initialChild\", \"onChild\", \"play\", \"children\", \"controls\", \"height\", \"fill\", \"width\", \"onFocus\", \"onBlur\", \"wrap\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Children, useCallback, useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { ThemeContext } from '../../contexts';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Keyboard } from '../Keyboard';\nimport { StyledCarouselContainer, StyledControl } from './StyledCarousel';\nimport { CarouselChild } from './CarouselChild';\nimport { CarouselPropTypes } from './propTypes';\n\nvar Carousel = function Carousel(_ref) {\n  var activeChild = _ref.activeChild,\n      initialChild = _ref.initialChild,\n      onChild = _ref.onChild,\n      play = _ref.play,\n      children = _ref.children,\n      controls = _ref.controls,\n      height = _ref.height,\n      fill = _ref.fill,\n      width = _ref.width,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      wrap = _ref.wrap,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useContext = useContext(MessageContext),\n      format = _useContext.format;\n\n  var timerRef = useRef();\n  var animationDuration = useMemo(function () {\n    return play && play < theme.carousel.animation.duration ? play : theme.carousel.animation.duration;\n  }, [play, theme.carousel.animation.duration]);\n\n  var _useState = useState({\n    activeIndex: activeChild !== undefined ? activeChild : initialChild\n  }),\n      indexes = _useState[0],\n      setIndexes = _useState[1];\n\n  var _useState2 = useState(activeChild),\n      activeChildState = _useState2[0],\n      setActiveChildState = _useState2[1];\n\n  var _useState3 = useState(),\n      direction = _useState3[0],\n      setDirection = _useState3[1];\n\n  var _useState4 = useState(false),\n      inTransition = _useState4[0],\n      setInTransition = _useState4[1];\n\n  var activeIndex = indexes.activeIndex,\n      priorActiveIndex = indexes.priorActiveIndex;\n  var lastIndex = Children.count(children) - 1;\n  var onChildChange = useCallback(function (index) {\n    if (onChild) {\n      onChild(index);\n    }\n  }, [onChild]);\n  var onRight = useCallback(function () {\n    if (inTransition) return;\n    clearInterval(timerRef.current);\n    var nextActiveIndex = activeIndex < lastIndex ? activeIndex + 1 : 0;\n    setIndexes({\n      activeIndex: nextActiveIndex,\n      priorActiveIndex: activeIndex\n    });\n    setInTransition(true);\n    setDirection('left');\n    onChildChange(nextActiveIndex);\n  }, [activeIndex, inTransition, lastIndex, onChildChange]);\n  var onLeft = useCallback(function () {\n    if (inTransition) return;\n    clearInterval(timerRef.current);\n    var nextActiveIndex = activeIndex === 0 ? lastIndex : activeIndex - 1;\n    setIndexes({\n      activeIndex: nextActiveIndex,\n      priorActiveIndex: activeIndex\n    });\n    setInTransition(true);\n    setDirection('right');\n    onChildChange(nextActiveIndex);\n  }, [activeIndex, inTransition, lastIndex, onChildChange]);\n  var onSelect = useCallback(function (index) {\n    return function () {\n      if (!inTransition && activeIndex !== index) {\n        clearInterval(timerRef.current);\n        setIndexes({\n          activeIndex: index,\n          priorActiveIndex: activeIndex\n        });\n        setInTransition(true);\n        setDirection(index > activeIndex ? 'left' : 'right');\n        onChildChange(index);\n      }\n    };\n  }, [activeIndex, inTransition, onChildChange]);\n  var onControlledNavigation = useCallback(function () {\n    if (inTransition || activeChild === activeChildState || activeChild === activeIndex || activeChild === undefined || activeChild < 0 || activeChild > lastIndex) return;\n    setDirection(activeChild > activeIndex ? 'left' : 'right');\n    setInTransition(true);\n    setIndexes({\n      activeIndex: activeChild,\n      priorActiveIndex: activeIndex\n    });\n    setActiveChildState(activeChild);\n    onChildChange(activeChild);\n  }, [activeChild, activeChildState, activeIndex, inTransition, lastIndex, onChildChange]);\n  /**\n   * Delays the transitions between Carousel slides. This is needed to\n   * avoid users \"spamming\" the controls which results in jarring animations\n   * and a bad user experience.\n   */\n\n  useEffect(function () {\n    var transitionTimer;\n\n    if (inTransition) {\n      transitionTimer = setTimeout(function () {\n        setInTransition(false);\n      }, animationDuration);\n    }\n\n    return function () {\n      return clearTimeout(transitionTimer);\n    };\n  }, [inTransition, setInTransition, animationDuration]); // Handles auto-playing Carousel slides\n\n  useEffect(function () {\n    // stop playing if wrap is explicitly false and we're at the end\n    if (play && (wrap !== false || activeIndex < lastIndex)) {\n      var timer = setInterval(function () {\n        var nextActiveIndex = activeIndex < lastIndex ? activeIndex + 1 : 0;\n        setIndexes({\n          activeIndex: nextActiveIndex,\n          priorActiveIndex: activeIndex\n        });\n        setInTransition(true);\n        setDirection('left');\n        onChildChange(nextActiveIndex);\n      }, play);\n      timerRef.current = timer;\n      return function () {\n        clearTimeout(timer);\n      };\n    }\n\n    return function () {};\n  }, [activeIndex, play, children, lastIndex, onChildChange, wrap]); // Allow Carousel slides to be controlled outside the component\n\n  useEffect(function () {\n    onControlledNavigation(activeIndex, activeChild, activeChildState, inTransition);\n  }, [onControlledNavigation, activeIndex, activeChild, activeChildState, inTransition]);\n  var showArrows = controls && controls !== 'selectors';\n  var showSelectors = controls && controls !== 'arrows';\n  var CurrentIcon = theme.carousel.icons.current;\n  var iconColor = normalizeColor(theme.carousel.icons.color || 'control', theme);\n  var selectors = [];\n  var wrappedChildren = Children.map(children, function (child, index) {\n    selectors.push( /*#__PURE__*/React.createElement(Button, {\n      a11yTitle: format({\n        id: 'carousel.jump',\n        values: {\n          slide: index + 1\n        }\n      }) // eslint-disable-next-line react/no-array-index-key\n      ,\n      key: index,\n      icon: /*#__PURE__*/React.createElement(CurrentIcon, {\n        color: activeIndex === index ? iconColor : undefined\n      }),\n      onClick: onSelect(index)\n    }));\n    return /*#__PURE__*/React.createElement(CarouselChild, {\n      animationDuration: animationDuration,\n      fill: fill || !!height || !!width,\n      index: index,\n      activeIndex: activeIndex,\n      priorActiveIndex: priorActiveIndex,\n      direction: direction\n    }, child);\n  });\n  var NextIcon = theme.carousel.icons.next;\n  var PreviousIcon = theme.carousel.icons.previous;\n  var nextIconDisabled = !wrap && activeIndex >= lastIndex;\n  var previousIconDisabled = !wrap && activeIndex <= 0;\n  return /*#__PURE__*/React.createElement(Keyboard, {\n    onLeft: onLeft,\n    onRight: onRight\n  }, /*#__PURE__*/React.createElement(StyledCarouselContainer, _extends({\n    fill: fill,\n    height: height,\n    width: width\n  }, rest), showArrows && /*#__PURE__*/React.createElement(StyledControl, {\n    offsetProp: \"left\",\n    fill: \"vertical\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    fill: \"vertical\",\n    icon: /*#__PURE__*/React.createElement(PreviousIcon, {\n      color: normalizeColor(previousIconDisabled ? theme.carousel.disabled.icons.color : theme.carousel.icons.color, theme)\n    }),\n    a11yTitle: format({\n      id: 'carousel.previous',\n      values: {\n        slide: activeIndex\n      }\n    }),\n    plain: true,\n    disabled: previousIconDisabled,\n    onClick: onLeft,\n    hoverIndicator: true\n  })), wrappedChildren, showSelectors && /*#__PURE__*/React.createElement(StyledControl, {\n    offsetProp: \"bottom\",\n    fill: \"horizontal\"\n  }, /*#__PURE__*/React.createElement(Box, {\n    justify: \"end\",\n    fill: !showArrows && 'horizontal'\n  }, /*#__PURE__*/React.createElement(Box, {\n    direction: \"row\",\n    justify: \"center\"\n  }, selectors))), showArrows && /*#__PURE__*/React.createElement(StyledControl, {\n    offsetProp: \"right\",\n    fill: \"vertical\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    fill: \"vertical\",\n    icon: /*#__PURE__*/React.createElement(NextIcon, {\n      color: normalizeColor(nextIconDisabled ? theme.carousel.disabled.icons.color : theme.carousel.icons.color, theme)\n    }),\n    a11yTitle: format({\n      id: 'carousel.next',\n      values: {\n        slide: activeIndex + 2\n      }\n    }),\n    plain: true,\n    disabled: nextIconDisabled,\n    onClick: onRight,\n    hoverIndicator: true\n  }))));\n};\n\nCarousel.defaultProps = {\n  initialChild: 0,\n  controls: true\n};\nObject.setPrototypeOf(Carousel.defaultProps, defaultProps);\nCarousel.displayName = 'Carousel';\nCarousel.propTypes = CarouselPropTypes;\nexport { Carousel };","map":null,"metadata":{},"sourceType":"module"}