{"ast":null,"code":"var _excluded = [\"a11yTitle\", \"background\", \"border\", \"confirmRemove\", \"disabled\", \"id\", \"plain\", \"renderFile\", \"maxSize\", \"messages\", \"margin\", \"multiple\", \"name\", \"onChange\", \"pad\", \"value\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { CircleAlert } from 'grommet-icons/icons/CircleAlert';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { defaultProps } from '../../default-props';\nimport { disabledStyle, parseMetricToNum, useForwardedRef } from '../../utils';\nimport { Anchor } from '../Anchor';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { FormContext } from '../Form/FormContext';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { StyledFileInput } from './StyledFileInput';\nimport { FileInputPropTypes } from './propTypes';\n\nvar formatBytes = function formatBytes(size) {\n  var units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  var factor = 1024;\n  var index = 0;\n  var num = size;\n\n  while (num >= factor && index < units.length - 1) {\n    num /= factor;\n    index += 1;\n  }\n\n  return num.toFixed(1) + \" \" + units[index];\n}; // We want the interaction of <input type=\"file\" /> but none of its styling.\n// So, we put what we want to show underneath and\n// position the <input /> on top with an opacity of zero.\n// If there are any files selected, we need to show the buttons to remove them.\n// So, we offset the <input /> from the right by the appropriate width.\n// We don't use Stack because of how we need to control the positioning.\n\n\nvar ContentsBox = styled(Box).withConfig({\n  displayName: \"FileInput__ContentsBox\",\n  componentId: \"sc-1jzq7im-0\"\n})([\"cursor:pointer;position:relative;\", \" \", \";\", \";\", \";\"], function (props) {\n  return props.disabled && disabledStyle();\n}, function (props) {\n  return props.theme.fileInput && props.theme.fileInput.extend;\n}, function (props) {\n  return props.hover && props.theme.fileInput && props.theme.fileInput.hover && props.theme.fileInput.hover.extend;\n}, function (props) {\n  return props.dragOver && props.theme.fileInput && props.theme.fileInput.dragOver && props.theme.fileInput.dragOver.extend;\n});\nvar Label = styled(Text).withConfig({\n  displayName: \"FileInput__Label\",\n  componentId: \"sc-1jzq7im-1\"\n})([\"\", \";\"], function (props) {\n  return props.theme.fileInput && props.theme.fileInput.label && props.theme.fileInput.label.extend;\n});\nvar Message = styled(Text).withConfig({\n  displayName: \"FileInput__Message\",\n  componentId: \"sc-1jzq7im-2\"\n})([\"\", \";\"], function (props) {\n  return props.theme.fileInput && props.theme.fileInput.message && props.theme.fileInput.message.extend;\n});\nvar defaultPendingRemoval = {\n  event: undefined,\n  index: undefined\n};\nvar FileInput = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      background = _ref.background,\n      border = _ref.border,\n      confirmRemove = _ref.confirmRemove,\n      disabled = _ref.disabled,\n      id = _ref.id,\n      plain = _ref.plain,\n      renderFile = _ref.renderFile,\n      maxSize = _ref.maxSize,\n      messages = _ref.messages,\n      margin = _ref.margin,\n      multiple = _ref.multiple,\n      name = _ref.name,\n      _onChange = _ref.onChange,\n      pad = _ref.pad,\n      valueProp = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext);\n\n  var _useContext = useContext(MessageContext),\n      format = _useContext.format;\n\n  var formContext = useContext(FormContext);\n\n  var _React$useState = React.useState(),\n      hover = _React$useState[0],\n      setHover = _React$useState[1];\n\n  var _React$useState2 = React.useState(),\n      dragOver = _React$useState2[0],\n      setDragOver = _React$useState2[1];\n\n  var _useState = useState(false),\n      showRemoveConfirmation = _useState[0],\n      setShowRemoveConfirmation = _useState[1];\n\n  var _useState2 = useState(defaultPendingRemoval),\n      pendingRemoval = _useState2[0],\n      setPendingRemoval = _useState2[1];\n\n  var aggregateThreshold = multiple && multiple.aggregateThreshold || 10;\n  var max = multiple == null ? void 0 : multiple.max;\n  var inputRef = useForwardedRef(ref);\n  var controlRef = useRef();\n  var removeRef = useRef();\n  var ConfirmRemove = confirmRemove;\n  var RemoveIcon = theme.fileInput.icons.remove;\n\n  var _formContext$useFormI = formContext.useFormInput({\n    name: name,\n    value: valueProp,\n    initialValue: [],\n    validate: [maxSize ? function () {\n      var fileList = [].concat(files);\n      var message = '';\n      var numOfInvalidFiles = fileList.filter(function (_ref2) {\n        var size = _ref2.size;\n        return size > maxSize;\n      }).length;\n\n      if (numOfInvalidFiles) {\n        var messageId = 'fileInput.maxSizeSingle';\n\n        if (multiple) {\n          messageId = \"fileInput.maxSizeMultiple.\" + (numOfInvalidFiles === 1 ? 'singular' : 'plural');\n        }\n\n        message = format({\n          id: messageId,\n          messages: messages,\n          values: {\n            maxSize: formatBytes(maxSize),\n            numOfFiles: numOfInvalidFiles\n          }\n        });\n      }\n\n      return message;\n    } : '', max ? function () {\n      var fileList = [].concat(files);\n      var message = '';\n\n      if (fileList.length > max) {\n        message = format({\n          id: 'fileInput.maxFile',\n          messages: messages,\n          values: {\n            max: max\n          }\n        });\n      }\n\n      return message;\n    } : '']\n  }),\n      files = _formContext$useFormI[0],\n      setFiles = _formContext$useFormI[1];\n\n  var mergeTheme = function mergeTheme(propertyName, defaultKey) {\n    var result = {};\n    var themeProp = theme.fileInput[propertyName];\n    if (themeProp) if (typeof themeProp !== 'object') {\n      if (defaultKey) result[defaultKey] = themeProp;else result = themeProp;\n    } else result = _extends({}, themeProp);\n    var hoverThemeProp = theme.fileInput.hover[propertyName];\n    if (hover && hoverThemeProp) if (typeof hoverThemeProp !== 'object') {\n      if (defaultKey) result[defaultKey] = hoverThemeProp;else result = hoverThemeProp;\n    } else result = _extends({}, result, hoverThemeProp);\n    var dragOverThemeProp = theme.fileInput.dragOver[propertyName];\n    if (dragOver && dragOverThemeProp) if (typeof dragOverThemeProp !== 'object') {\n      if (defaultKey) result[defaultKey] = dragOverThemeProp;else result = dragOverThemeProp;\n    } else result = _extends({}, result, dragOverThemeProp);\n    return typeof result === 'object' && Object.keys(result).length === 0 ? undefined : result;\n  };\n\n  var rightPad;\n\n  if (mergeTheme('pad')) {\n    var _mergeTheme = mergeTheme('pad'),\n        horizontal = _mergeTheme.horizontal,\n        right = _mergeTheme.right;\n\n    if (right) {\n      rightPad = theme.global.edgeSize[right] || right;\n    } else if (horizontal) {\n      rightPad = theme.global.edgeSize[horizontal] || horizontal;\n    }\n  } // rightPad needs to be included in the rightOffset\n  // otherwise input may cover the RemoveButton, making it\n  // unreachable by mouse click.\n  // If browse anchor or button is greater than remove button then\n  // rightoffset will take the larger width\n\n\n  var rightOffset;\n\n  if (removeRef.current && controlRef.current) {\n    var rightOffsetBrowse = controlRef.current.getBoundingClientRect().width;\n    var rightOffsetRemove = removeRef.current.getBoundingClientRect().width;\n    if (rightPad && typeof rightPad === 'string') rightOffset = rightOffsetRemove + parseMetricToNum(rightPad);\n\n    if (files.length === 1 || files.length > aggregateThreshold) {\n      rightOffset = rightOffsetBrowse + rightOffsetRemove + parseMetricToNum(theme.global.edgeSize.small) * 2;\n    } else if (rightOffsetBrowse > rightOffsetRemove) {\n      rightOffset = rightOffsetBrowse + parseMetricToNum(theme.global.edgeSize.small) * 2;\n    } else rightOffset = rightOffsetRemove;\n  } else if (!files.length && controlRef.current) {\n    rightOffset = controlRef.current.getBoundingClientRect().width + parseMetricToNum(theme.global.edgeSize.small) * 2;\n  } // Show the number of files when more than one\n\n\n  var message;\n\n  if (!files.length) {\n    message = format({\n      id: multiple ? 'fileInput.dropPromptMultiple' : 'fileInput.dropPrompt',\n      messages: messages\n    });\n  } else message = files.length + \" items\";\n\n  var removeFile = function removeFile(index) {\n    var nextFiles;\n\n    if (index === 'all') {\n      nextFiles = [];\n    } else {\n      nextFiles = [].concat(files);\n      nextFiles.splice(index, 1);\n    }\n\n    setFiles(nextFiles); // Need to have a way to track the files other than an array\n    // since inputRef.current.files is a read-only FileList\n    // https://stackoverflow.com/a/64019766\n\n    /* eslint-disable no-undef */\n\n    var dt = new DataTransfer();\n    var curFiles = inputRef.current.files;\n    if (index === 'all' || nextFiles.length === 0) inputRef.current.value = '';\n\n    for (var i = 0; i < curFiles.length; i += 1) {\n      var curfile = curFiles[i];\n      if (index !== i) dt.items.add(curfile);\n    }\n\n    var nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'files').set;\n    nativeInputValueSetter.call(inputRef.current, dt.files);\n    var event = new Event('input', {\n      bubbles: true\n    });\n    inputRef.current.dispatchEvent(event);\n    if (_onChange) _onChange(event, {\n      files: nextFiles\n    });\n    inputRef.current.focus();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContentsBox, {\n    theme: theme,\n    flex: false,\n    disabled: disabled,\n    background: mergeTheme('background', 'color'),\n    border: !plain ? mergeTheme('border', 'side') : undefined,\n    margin: mergeTheme('margin'),\n    pad: mergeTheme('pad'),\n    round: mergeTheme('round', 'size'),\n    align: files.length ? 'stretch' : 'center',\n    justify: \"center\",\n    hover: hover,\n    onMouseOver: disabled ? undefined : function () {\n      return setHover(true);\n    },\n    onMouseOut: disabled ? undefined : function () {\n      return setHover(false);\n    },\n    dragOver: dragOver\n  }, (!files.length || files.length > 1) && /*#__PURE__*/React.createElement(Box, {\n    align: \"center\",\n    fill: \"horizontal\",\n    direction: \"row\",\n    justify: \"between\"\n  }, files.length <= aggregateThreshold && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Message, theme.fileInput.message, message), /*#__PURE__*/React.createElement(Keyboard, {\n    onSpace: function onSpace(event) {\n      event.preventDefault();\n      if (controlRef.current === event.target) inputRef.current.click();\n    },\n    onEnter: function onEnter(event) {\n      if (controlRef.current === event.target) inputRef.current.click();\n    }\n  }, theme.fileInput.button ? /*#__PURE__*/React.createElement(Button, {\n    ref: controlRef,\n    kind: theme.fileInput.button,\n    label: format({\n      id: 'fileInput.browse',\n      messages: messages\n    }),\n    onClick: function onClick() {\n      inputRef.current.click();\n      inputRef.current.focus();\n    }\n  }) : /*#__PURE__*/React.createElement(Anchor, {\n    tabIndex: 0,\n    alignSelf: \"center\",\n    ref: controlRef,\n    margin: \"small\",\n    onClick: function onClick() {\n      inputRef.current.click();\n      inputRef.current.focus();\n    },\n    label: format({\n      id: 'fileInput.browse',\n      messages: messages\n    })\n  })))), files.length > aggregateThreshold && /*#__PURE__*/React.createElement(Box, {\n    justify: \"between\",\n    direction: \"row\",\n    align: \"center\"\n  }, /*#__PURE__*/React.createElement(Label, theme.fileInput.label, files.length, ' ', format({\n    id: 'fileInput.files',\n    messages: messages\n  })), /*#__PURE__*/React.createElement(Box, {\n    flex: false,\n    direction: \"row\",\n    align: \"center\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    ref: removeRef,\n    a11yTitle: format({\n      id: 'fileInput.removeAll',\n      messages: messages\n    }),\n    icon: /*#__PURE__*/React.createElement(RemoveIcon, null),\n    hoverIndicator: true,\n    onClick: function onClick(event) {\n      if (confirmRemove) {\n        event.persist(); // necessary for when React < v17\n\n        setPendingRemoval({\n          event: event,\n          index: 'all'\n        });\n        setShowRemoveConfirmation(true);\n      } else removeFile('all');\n    }\n  }), /*#__PURE__*/React.createElement(Keyboard, {\n    onSpace: function onSpace(event) {\n      if (controlRef.current === event.target) inputRef.current.click();\n    },\n    onEnter: function onEnter(event) {\n      if (controlRef.current === event.target) inputRef.current.click();\n    }\n  }, theme.fileInput.button ? /*#__PURE__*/React.createElement(Button, {\n    ref: controlRef,\n    kind: theme.fileInput.button,\n    label: format({\n      id: 'fileInput.browse',\n      messages: messages\n    }),\n    onClick: function onClick() {\n      inputRef.current.click();\n      inputRef.current.focus();\n    }\n  }) : /*#__PURE__*/React.createElement(Anchor, {\n    tabIndex: 0,\n    alignSelf: \"center\",\n    ref: controlRef,\n    margin: \"small\",\n    onClick: function onClick() {\n      inputRef.current.click();\n      inputRef.current.focus();\n    },\n    label: format({\n      id: 'fileInput.browse',\n      messages: messages\n    })\n  })))), files.length > 0 && files.length <= aggregateThreshold && files.map(function (file, index) {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: file.name,\n      justify: \"between\",\n      direction: \"row\",\n      align: \"center\"\n    }, renderFile ? renderFile(file) : /*#__PURE__*/React.createElement(Box, _extends({}, theme.fileInput.label, {\n      gap: \"xsmall\",\n      align: \"center\",\n      direction: \"row\"\n    }), (maxSize && file.size > maxSize || max && index >= max) && /*#__PURE__*/React.createElement(CircleAlert, null), /*#__PURE__*/React.createElement(Label, {\n      weight: theme.global.input.weight || theme.global.input.font.weight,\n      truncate: true\n    }, file.name)), /*#__PURE__*/React.createElement(Box, {\n      flex: false,\n      direction: \"row\",\n      align: \"center\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      ref: index ? undefined : removeRef,\n      a11yTitle: format({\n        id: 'fileInput.remove',\n        messages: messages\n      }) + \" \" + file.name,\n      icon: /*#__PURE__*/React.createElement(RemoveIcon, null),\n      hoverIndicator: true,\n      onClick: function onClick(event) {\n        if (confirmRemove) {\n          event.persist(); // necessary for when React < v17\n\n          setPendingRemoval({\n            event: event,\n            index: index\n          });\n          setShowRemoveConfirmation(true);\n        } else removeFile(index);\n      }\n    }), files.length === 1 && /*#__PURE__*/React.createElement(Keyboard, {\n      onSpace: function onSpace(event) {\n        if (controlRef.current === event.target) inputRef.current.click();\n      },\n      onEnter: function onEnter(event) {\n        if (controlRef.current === event.target) inputRef.current.click();\n      }\n    }, theme.fileInput.button ? /*#__PURE__*/React.createElement(Button, {\n      ref: controlRef,\n      kind: theme.fileInput.button,\n      label: format({\n        id: 'fileInput.browse',\n        messages: messages\n      }),\n      onClick: function onClick() {\n        inputRef.current.click();\n        inputRef.current.focus();\n      }\n    }) : /*#__PURE__*/React.createElement(Anchor, {\n      tabIndex: 0,\n      ref: controlRef,\n      margin: \"small\",\n      onClick: function onClick() {\n        inputRef.current.click();\n        inputRef.current.focus();\n      },\n      label: format({\n        id: 'fileInput.browse',\n        messages: messages\n      })\n    }))));\n  }), /*#__PURE__*/React.createElement(StyledFileInput, _extends({\n    ref: inputRef,\n    type: \"file\",\n    id: id,\n    name: name,\n    maxSize: maxSize,\n    multiple: multiple,\n    disabled: disabled,\n    plain: true,\n    rightOffset: rightOffset\n  }, rest, {\n    onDragOver: function onDragOver() {\n      return setDragOver(true);\n    },\n    onDragLeave: function onDragLeave() {\n      return setDragOver(false);\n    },\n    onChange: function onChange(event) {\n      event.persist();\n      var fileList = event.target.files;\n      var nextFiles = multiple ? [].concat(files) : [];\n\n      var _loop = function _loop(i) {\n        // avoid duplicates\n        var existing = nextFiles.filter(function (file) {\n          return file.name === fileList[i].name && file.size === fileList[i].size;\n        }).length > 0;\n\n        if (!existing) {\n          nextFiles.push(fileList[i]);\n        }\n      };\n\n      for (var i = 0; i < fileList.length; i += 1) {\n        _loop(i);\n      }\n\n      setFiles(nextFiles);\n      setDragOver(false);\n      if (_onChange) _onChange(event, {\n        files: nextFiles\n      });\n    }\n  }))), showRemoveConfirmation && /*#__PURE__*/React.createElement(ConfirmRemove, {\n    onConfirm: function onConfirm() {\n      removeFile(pendingRemoval.index);\n      setPendingRemoval(defaultPendingRemoval);\n      setShowRemoveConfirmation(false);\n    },\n    onCancel: function onCancel() {\n      return setShowRemoveConfirmation(false);\n    }\n  }));\n});\nFileInput.defaultProps = {};\nObject.setPrototypeOf(FileInput.defaultProps, defaultProps);\nFileInput.displayName = 'FileInput';\nFileInput.propTypes = FileInputPropTypes;\nexport { FileInput };","map":null,"metadata":{},"sourceType":"module"}