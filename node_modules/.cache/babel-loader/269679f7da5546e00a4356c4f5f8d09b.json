{"ast":null,"code":"var _excluded = [\"actions\", \"message\", \"onClose\", \"id\", \"global\", \"status\", \"title\", \"toast\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback, useContext, useEffect, useState, useMemo, Fragment } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Anchor } from '../Anchor';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Layer } from '../Layer';\nimport { Paragraph } from '../Paragraph';\nimport { Text } from '../Text';\nimport { NotificationType } from './propTypes';\n\nvar adaptThemeStyle = function adaptThemeStyle(value, theme) {\n  var textStyle = value;\n  var closeButtonStyle = value;\n\n  if (typeof value === 'string' && theme.global.edgeSize[value]) {\n    textStyle = {\n      vertical: value,\n      left: value,\n      right: undefined\n    };\n    closeButtonStyle = {\n      vertical: value,\n      right: value\n    };\n  } else if (typeof value === 'object') {\n    var left = value.left,\n        right = value.right,\n        top = value.top,\n        bottom = value.bottom,\n        horizontal = value.horizontal,\n        vertical = value.vertical;\n    textStyle = {\n      top: top || vertical,\n      bottom: bottom || vertical,\n      left: left || horizontal,\n      right: undefined\n    };\n    closeButtonStyle = {\n      top: top || vertical,\n      bottom: bottom || vertical,\n      right: right || horizontal\n    };\n  }\n\n  return [textStyle, closeButtonStyle];\n};\n\nvar NotificationAnchor = styled(Anchor).withConfig({\n  displayName: \"Notification__NotificationAnchor\",\n  componentId: \"sc-1yq09yz-0\"\n})([\"white-space:nowrap;\"]);\n\nvar Notification = function Notification(_ref) {\n  var _theme$notification, _theme$notification2, _theme$notification2$, _theme$notification2$2, _theme$notification3, _theme$notification3$, _theme$notification4, _theme$notification4$, _theme$notification4$2;\n\n  var actionsProp = _ref.actions,\n      messageProp = _ref.message,\n      onClose = _ref.onClose,\n      id = _ref.id,\n      global = _ref.global,\n      status = _ref.status,\n      title = _ref.title,\n      toast = _ref.toast,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var autoClose = toast && (toast == null ? void 0 : toast.autoClose) === undefined ? true : toast.autoClose;\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(true),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var position = useMemo(function () {\n    return toast && (toast == null ? void 0 : toast.position) || 'top';\n  }, [toast]);\n  var close = useCallback(function (event) {\n    setVisible(false);\n    if (onClose) onClose(event);\n  }, [onClose]);\n  useEffect(function () {\n    if (autoClose) {\n      var timer = setTimeout(close, theme.notification.toast.time || theme.notification.time);\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n\n    return undefined;\n  }, [autoClose, close, theme.notification.toast.time, theme.notification.time]);\n  var CloseIcon = theme.notification.close.icon;\n\n  var _ref2 = ((_theme$notification = theme.notification) == null ? void 0 : _theme$notification[status]) || theme.notification.unknown,\n      StatusIcon = _ref2.icon,\n      color = _ref2.color;\n\n  var closeIconColor = theme.notification.close.color;\n  var kind = useMemo(function () {\n    if (toast) return 'toast';\n    if (global) return 'global';\n    return undefined;\n  }, [global, toast]);\n  var direction;\n  if (kind && theme.notification[kind].direction) direction = theme.notification[kind].direction;else direction = theme.notification.direction;\n  var background;\n  if (kind && (_theme$notification2 = theme.notification) != null && (_theme$notification2$ = _theme$notification2[status]) != null && (_theme$notification2$2 = _theme$notification2$[kind]) != null && _theme$notification2$2.background) background = theme.notification[status][kind].background;else if ((_theme$notification3 = theme.notification) != null && (_theme$notification3$ = _theme$notification3[status]) != null && _theme$notification3$.background) background = theme.notification[status].background;else background = ((_theme$notification4 = theme.notification) == null ? void 0 : (_theme$notification4$ = _theme$notification4[kind]) == null ? void 0 : (_theme$notification4$2 = _theme$notification4$.container) == null ? void 0 : _theme$notification4$2.background) || theme.notification.container.background;\n  var TextWrapper = direction === 'row' ? Text : Fragment; // notification is built with two child boxes that contain:\n  // 1. icon + text (wrapped in button when clickable)\n  // 2. close button\n  // pad needs to be applied to the child boxes, but we don't want to apply\n  // extra padding between the icon + text and the button.\n\n  var pad;\n  if (kind && theme.notification[kind].container.pad) pad = theme.notification[kind].container.pad;else pad = theme.notification.container.pad;\n  var textPad;\n  var closeButtonPad;\n\n  if (onClose) {\n    var _adaptThemeStyle = adaptThemeStyle(pad, theme);\n\n    textPad = _adaptThemeStyle[0];\n    closeButtonPad = _adaptThemeStyle[1];\n  } else textPad = pad;\n\n  var actions;\n  var message = messageProp;\n  if (actionsProp) actions = actionsProp.map(function (action) {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: action.label\n    }, /*#__PURE__*/React.createElement(NotificationAnchor // create space between first anchor and\n    // text content and next anchor\n    , _extends({\n      margin: {\n        right: 'xsmall'\n      }\n    }, action, theme.notification.actions)), ' ');\n  });\n  var Message = direction !== 'row' ? Paragraph : Text;\n  if (message || actions) message = /*#__PURE__*/React.createElement(Message, theme.notification.message, /*#__PURE__*/React.createElement(Text, {\n    margin: {\n      right: 'xsmall'\n    }\n  }, message), actions);\n  var content = /*#__PURE__*/React.createElement(Box, _extends({}, theme.notification.container, global ? _extends({}, theme.notification.global.container) : {}, toast ? _extends({}, theme.notification.toast.container) : {}, {\n    background: background // let internal box control pad\n    ,\n    pad: undefined,\n    direction: \"row\",\n    gap: \"small\",\n    id: toast ? undefined : id\n  }, rest), /*#__PURE__*/React.createElement(Box, {\n    direction: \"row\",\n    pad: textPad,\n    flex: true\n  }, /*#__PURE__*/React.createElement(Box, theme.notification.iconContainer, /*#__PURE__*/React.createElement(StatusIcon, {\n    color: color\n  })), /*#__PURE__*/React.createElement(Box, theme.notification.textContainer, /*#__PURE__*/React.createElement(TextWrapper, null, title && /*#__PURE__*/React.createElement(Text, theme.notification.title, title), message && title && direction === 'row' && /*#__PURE__*/React.createElement(React.Fragment, null, \"\\xA0\"), message))), onClose &&\n  /*#__PURE__*/\n  // theme.notification.container and textContainer may both have pad,\n  // account for both\n  React.createElement(Box, {\n    pad: closeButtonPad\n  }, /*#__PURE__*/React.createElement(Box, theme.notification.textContainer, /*#__PURE__*/React.createElement(Button, {\n    icon: /*#__PURE__*/React.createElement(CloseIcon, {\n      color: closeIconColor\n    }),\n    onClick: close,\n    hoverIndicator: true,\n    plain: true\n  }))));\n\n  if (toast) {\n    content = visible && /*#__PURE__*/React.createElement(Layer, _extends({}, theme.notification.toast.layer, {\n      role: \"log\",\n      modal: false,\n      onEsc: onClose,\n      id: id,\n      responsive: false,\n      plain: true,\n      position: position\n    }), content);\n  }\n\n  return content;\n};\n\nNotification.defaultProps = {\n  status: 'unknown',\n  toast: false\n};\nObject.setPrototypeOf(Notification.defaultProps, defaultProps);\nNotification.displayName = 'Notification';\nNotification.propTypes = NotificationType;\nexport { Notification };","map":null,"metadata":{},"sourceType":"module"}