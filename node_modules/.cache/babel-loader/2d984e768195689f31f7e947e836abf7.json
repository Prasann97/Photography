{"ast":null,"code":"var _excluded = [\"activeIndex\", \"animate\", \"children\", \"multiple\", \"onActive\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Children, forwardRef, useCallback, useState } from 'react';\nimport { AccordionPropTypes } from './propTypes';\nimport { Box } from '../Box';\nimport { AccordionContext } from './AccordionContext';\n\nvar activeAsArray = function activeAsArray(active) {\n  return typeof active === 'number' ? [active] : active;\n};\n\nvar Accordion = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var activeIndex = _ref.activeIndex,\n      _ref$animate = _ref.animate,\n      animate = _ref$animate === void 0 ? true : _ref$animate,\n      children = _ref.children,\n      multiple = _ref.multiple,\n      onActive = _ref.onActive,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var _useState = useState([]),\n      activeIndexes = _useState[0],\n      setActiveIndexes = _useState[1];\n\n  var _useState2 = useState(),\n      stateActiveIndex = _useState2[0],\n      setStateActiveIndex = _useState2[1]; // Derived state from props\n  // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n\n\n  var derivedActiveIndexes = activeAsArray(activeIndex) || [];\n\n  if ((typeof activeIndex !== 'undefined' || activeIndex !== stateActiveIndex) && derivedActiveIndexes.join() !== activeIndexes.join()) {\n    setActiveIndexes(derivedActiveIndexes);\n    setStateActiveIndex(activeIndex);\n  }\n\n  var getAccordionContext = useCallback(function (index) {\n    var _onPanelChange = function onPanelChange(nextIndex) {\n      var nextActiveIndexes = [].concat(activeIndexes || []);\n      var nextActiveIndex = nextActiveIndexes.indexOf(nextIndex);\n\n      if (nextActiveIndex > -1) {\n        nextActiveIndexes.splice(nextActiveIndex, 1);\n      } else if (multiple) {\n        nextActiveIndexes.push(nextIndex);\n      } else {\n        nextActiveIndexes = [nextIndex];\n      }\n\n      setActiveIndexes(nextActiveIndexes);\n\n      if (onActive) {\n        onActive(nextActiveIndexes);\n      }\n    };\n\n    return {\n      active: activeIndexes.indexOf(index) > -1,\n      animate: animate,\n      onPanelChange: function onPanelChange() {\n        return _onPanelChange(index);\n      }\n    };\n  }, [activeIndexes, animate, multiple, onActive]);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    ref: ref,\n    role: \"tablist\"\n  }, rest), Children.toArray(children).filter(function (child) {\n    return child;\n  }).map(function (child, index) {\n    return /*#__PURE__*/React.createElement(AccordionContext.Provider, {\n      // eslint-disable-next-line react/no-array-index-key\n      key: index,\n      value: getAccordionContext(index)\n    }, child);\n  }));\n});\nAccordion.propTypes = AccordionPropTypes;\nexport { Accordion };","map":null,"metadata":{},"sourceType":"module"}