{"ast":null,"code":"var _excluded = [\"inline\", \"restrictFocus\", \"target\", \"trapFocus\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useEffect, useState, useContext } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { getNewContainer, setFocusWithoutScroll } from '../../utils';\nimport { DropContainer } from './DropContainer';\nimport { ContainerTargetContext } from '../../contexts/ContainerTargetContext';\nimport { DropPropTypes } from './propTypes';\nvar Drop = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var inline = _ref.inline,\n      restrictFocus = _ref.restrictFocus,\n      dropTarget = _ref.target,\n      _ref$trapFocus = _ref.trapFocus,\n      trapFocus = _ref$trapFocus === void 0 ? true : _ref$trapFocus,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(),\n      originalFocusedElement = _useState[0],\n      setOriginalFocusedElement = _useState[1];\n\n  useEffect(function () {\n    return setOriginalFocusedElement(document.activeElement);\n  }, []);\n\n  var _useState2 = useState(),\n      dropContainer = _useState2[0],\n      setDropContainer = _useState2[1];\n\n  var containerTarget = useContext(ContainerTargetContext);\n  useEffect(function () {\n    return setDropContainer(!inline ? getNewContainer(containerTarget) : undefined);\n  }, [containerTarget, inline]); // just a few things to clean up when the Drop is unmounted\n\n  useEffect(function () {\n    return function () {\n      if (restrictFocus && originalFocusedElement) {\n        if (originalFocusedElement.focus) {\n          setFocusWithoutScroll(originalFocusedElement);\n        } else if (originalFocusedElement.parentNode && originalFocusedElement.parentNode.focus) {\n          // required for IE11 and Edge\n          setFocusWithoutScroll(originalFocusedElement.parentNode);\n        }\n      }\n\n      if (dropContainer) {\n        containerTarget.removeChild(dropContainer);\n      }\n    };\n  }, [containerTarget, dropContainer, originalFocusedElement, restrictFocus]);\n  var content = /*#__PURE__*/React.createElement(DropContainer, _extends({\n    ref: ref,\n    dir: theme && theme.dir,\n    dropTarget: dropTarget,\n    restrictFocus: restrictFocus,\n    trapFocus: trapFocus\n  }, rest));\n  if (inline) return content;\n  if (dropContainer) return /*#__PURE__*/createPortal(content, dropContainer);\n  return null;\n});\nDrop.displayName = 'Drop';\nDrop.propTypes = DropPropTypes;\nexport { Drop };","map":null,"metadata":{},"sourceType":"module"}