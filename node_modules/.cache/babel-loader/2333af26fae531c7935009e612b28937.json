{"ast":null,"code":"var _excluded = [\"ref\", \"size\"],\n    _excluded2 = [\"children\", \"color\", \"size\", \"message\"],\n    _excluded3 = [\"size\", \"color\", \"border\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { isValidElement, forwardRef, useContext, useEffect } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { AnnounceContext } from '../../contexts/AnnounceContext';\nimport { Box } from '../Box';\nimport { defaultProps } from '../../default-props';\nimport { SpinnerPropTypes } from './propTypes';\n\nvar BasicSpinner = function BasicSpinner(_ref) {\n  var ref = _ref.ref,\n      size = _ref.size,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    flex: false,\n    height: size,\n    width: size,\n    ref: ref\n  }, rest));\n};\n/**\n * If the user is calling <Spinner>…</Spinner> with children, it will take\n * precedence over theme styling. Yet, it will still inherit the\n * default animation and size of the spinner, and of course any additional\n * given props.\n *\n * If the user is providing an icon/svg via the theme.spinner.icon,\n * the Spinner will use it as a child and will include all its relevant\n * theme props (size/color/pad…) as well,\n * user will only need to type <Spinner />.\n * If the icon has its own animation, user can turn it off via the theme.\n *\n * If none of the above is provider, <Spinner /> will provide its default\n * border, size and friends, all configurable via theme or props.\n */\n\n\nvar Spinner = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      colorProp = _ref2.color,\n      size = _ref2.size,\n      message = _ref2.message,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var announce = useContext(AnnounceContext);\n  useEffect(function () {\n    if (message != null && message.start) announce(message.start);else if (typeof message === 'string') announce(message);\n    return function () {\n      return (message == null ? void 0 : message.end) && announce(message.end);\n    };\n  }, [announce, message]); // Avoid color and size leaking into the DOM\n\n  var _theme$spinner$contai = theme.spinner.container,\n      sizeThemeProp = _theme$spinner$contai.size,\n      colorThemeProp = _theme$spinner$contai.color,\n      borderThemeProp = _theme$spinner$contai.border,\n      themeProps = _objectWithoutPropertiesLoose(_theme$spinner$contai, _excluded3);\n\n  var normalizedSize = size || sizeThemeProp;\n  var spinnerSize = theme.spinner.size[normalizedSize] || normalizedSize;\n  var color = colorProp || colorThemeProp;\n  var Icon = theme.spinner.icon;\n  var defaultBorder = [{\n    side: 'all',\n    color: 'background-contrast',\n    size: size\n  }, {\n    side: 'top',\n    color: color,\n    size: size\n  }];\n  var spinnerBorder = Array.isArray(borderThemeProp) ? borderThemeProp.map(function (borderSide) {\n    return _extends({}, borderSide, {\n      color: borderSide.side === 'all' ? borderSide.color || 'background-contrast' : color\n    });\n  }) : borderThemeProp; // children will take precedence over theme attributes\n\n  if (children) {\n    return /*#__PURE__*/React.createElement(BasicSpinner, _extends({\n      size: spinnerSize,\n      ref: ref\n    }, rest), children);\n  } // In case icon is provided by the theme\n\n\n  if (Icon) return /*#__PURE__*/React.createElement(BasicSpinner, _extends({\n    size: spinnerSize,\n    ref: ref\n  }, themeProps, rest), /*#__PURE__*/isValidElement(Icon) ? Icon : /*#__PURE__*/React.createElement(Icon, {\n    size: spinnerSize,\n    color: color\n  }));\n  return /*#__PURE__*/React.createElement(BasicSpinner, _extends({\n    size: spinnerSize,\n    ref: ref,\n    border: typeof borderThemeProp === 'undefined' ? defaultBorder : spinnerBorder\n  }, themeProps, rest));\n});\nSpinner.displayName = 'Spinner';\nSpinner.propTypes = SpinnerPropTypes;\nexport { Spinner };","map":null,"metadata":{},"sourceType":"module"}