{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport PropTypes from 'prop-types';\nimport { colorPropType, genericProps, MARGIN_SIZES } from '../../utils/general-prop-types';\nvar PropType = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  PropType = _extends({}, genericProps, {\n    color: colorPropType,\n    margin: PropTypes.oneOfType([PropTypes.oneOf(['none'].concat(MARGIN_SIZES)), PropTypes.shape({\n      bottom: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      end: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      horizontal: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      left: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      right: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      start: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      top: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      vertical: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string])\n    }), PropTypes.string]),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge', '2xl', '3xl', '4xl', '5xl', '6xl']), PropTypes.string]),\n    tag: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n    textAlign: PropTypes.oneOf(['start', 'center', 'end', 'justify']),\n    tip: PropTypes.oneOfType([PropTypes.shape({\n      content: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n      dropProps: PropTypes.shape({}),\n      plain: PropTypes.bool\n    }), PropTypes.string]),\n    truncate: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['tip'])]),\n    weight: PropTypes.oneOfType([PropTypes.oneOf(['normal', 'bold', 'bolder', 'lighter']), PropTypes.number]),\n    wordBreak: PropTypes.oneOf(['normal', 'break-all', 'keep-all', 'break-word'])\n  });\n}\n\nexport var TextPropTypes = PropType;","map":null,"metadata":{},"sourceType":"module"}