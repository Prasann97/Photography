{"ast":null,"code":"var _excluded = [\"clear\", \"onClear\", \"name\", \"theme\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { getHoverIndicatorStyle, selectedStyle, setFocusWithoutScroll } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { StyledContainer } from './StyledSelect';\nimport { applyKey } from './utils';\nimport { containsFocus } from '../../utils/DOM'; // position relative is so scroll can be managed correctly\n\nvar OptionsBox = styled.div.withConfig({\n  displayName: \"SelectContainer__OptionsBox\",\n  componentId: \"sc-1wi0ul8-0\"\n})([\"position:relative;scroll-behavior:smooth;overflow:auto;outline:none;\"]);\nvar SelectOption = styled(Button).withConfig({\n  displayName: \"SelectContainer__SelectOption\",\n  componentId: \"sc-1wi0ul8-1\"\n})([\"\", \" \", \" &:focus{\", \"}display:block;width:100%;\"], function (props) {\n  return props.selected && props.textComponent && selectedStyle;\n}, function (props) {\n  return props.active && getHoverIndicatorStyle(!props.children && !props.theme.select.options ? undefined : 'background', props.theme);\n}, function (props) {\n  return props.active && getHoverIndicatorStyle(!props.children && !props.theme.select.options ? undefined : 'background', props.theme);\n}); // ensure ClearButton receives visual indication of keyboard\n\nvar StyledButton = styled(Button).withConfig({\n  displayName: \"SelectContainer__StyledButton\",\n  componentId: \"sc-1wi0ul8-2\"\n})([\"&:focus{\", \"}\"], function (props) {\n  return getHoverIndicatorStyle('background', props.theme);\n});\nvar ClearButton = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var clear = _ref.clear,\n      onClear = _ref.onClear,\n      name = _ref.name,\n      theme = _ref.theme,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var label = clear.label,\n      position = clear.position;\n  var align = position !== 'bottom' ? 'start' : 'center';\n  var buttonLabel = label || \"Clear \" + (name || 'selection');\n  return /*#__PURE__*/React.createElement(StyledButton, _extends({\n    a11yTitle: buttonLabel + \". Or, press \" + (position === 'bottom' ? 'shift tab' : 'down arrow') + \" to move to select options\",\n    fill: \"horizontal\",\n    ref: ref,\n    onClick: onClear,\n    focusIndicator: false\n  }, rest), /*#__PURE__*/React.createElement(Box, _extends({}, theme.select.clear.container, {\n    align: align\n  }), /*#__PURE__*/React.createElement(Text, theme.select.clear.text, buttonLabel)));\n});\nvar SelectContainer = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var clear = _ref2.clear,\n      _ref2$children = _ref2.children,\n      children = _ref2$children === void 0 ? null : _ref2$children,\n      disabled = _ref2.disabled,\n      disabledKey = _ref2.disabledKey,\n      dropHeight = _ref2.dropHeight,\n      _ref2$emptySearchMess = _ref2.emptySearchMessage,\n      emptySearchMessage = _ref2$emptySearchMess === void 0 ? 'No matches found' : _ref2$emptySearchMess,\n      id = _ref2.id,\n      labelKey = _ref2.labelKey,\n      multiple = _ref2.multiple,\n      name = _ref2.name,\n      onChange = _ref2.onChange,\n      onKeyDown = _ref2.onKeyDown,\n      onMore = _ref2.onMore,\n      onSearch = _ref2.onSearch,\n      optionIndexesInValue = _ref2.optionIndexesInValue,\n      options = _ref2.options,\n      allOptions = _ref2.allOptions,\n      searchPlaceholder = _ref2.searchPlaceholder,\n      search = _ref2.search,\n      setSearch = _ref2.setSearch,\n      selected = _ref2.selected,\n      usingKeyboard = _ref2.usingKeyboard,\n      _ref2$value = _ref2.value,\n      value = _ref2$value === void 0 ? '' : _ref2$value,\n      valueKey = _ref2.valueKey,\n      _ref2$replace = _ref2.replace,\n      replace = _ref2$replace === void 0 ? true : _ref2$replace;\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var shouldShowClearButton = useCallback(function (position) {\n    var hasValue = Boolean(multiple ? value.length : value);\n    var showAtPosition = position === 'bottom' ? (clear == null ? void 0 : clear.position) === 'bottom' : (clear == null ? void 0 : clear.position) !== 'bottom';\n    return clear && hasValue && showAtPosition;\n  }, [clear, multiple, value]);\n\n  var _useState = useState(usingKeyboard && !shouldShowClearButton('top') ? 0 : -1),\n      activeIndex = _useState[0],\n      setActiveIndex = _useState[1];\n\n  var _useState2 = useState(usingKeyboard),\n      keyboardNavigation = _useState2[0],\n      setKeyboardNavigation = _useState2[1];\n\n  var searchRef = useRef();\n  var optionsRef = useRef();\n  var clearRef = useRef();\n  var activeRef = useRef(); // for keyboard/screenreader, keep the active option in focus\n\n  useEffect(function () {\n    var _activeRef$current;\n\n    if (activeIndex >= 0) (_activeRef$current = activeRef.current) == null ? void 0 : _activeRef$current.focus();\n  }, [activeIndex]); // set initial focus\n\n  useEffect(function () {\n    // need to wait for Drop to be ready\n    var timer = setTimeout(function () {\n      var optionsNode = optionsRef.current;\n      var clearButton = clearRef.current;\n\n      if (onSearch) {\n        var searchInput = searchRef.current;\n\n        if (searchInput && searchInput.focus) {\n          setFocusWithoutScroll(searchInput);\n        }\n      } else if (clear && clearButton && clearButton.focus && clear.position !== 'bottom') {\n        setFocusWithoutScroll(clearButton);\n      } else if (usingKeyboard && activeRef.current) {\n        setFocusWithoutScroll(activeRef.current);\n      } else if (optionsNode) {\n        setFocusWithoutScroll(optionsNode);\n      }\n    }, 100);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [onSearch, usingKeyboard, clear]);\n  var optionLabel = useCallback(function (index) {\n    return applyKey(options[index], labelKey || valueKey);\n  }, [labelKey, options, valueKey]);\n  var optionValue = useCallback(function (index) {\n    return applyKey(options[index], valueKey || labelKey);\n  }, [options, valueKey, labelKey]);\n  var isDisabled = useCallback(function (index) {\n    var option = options[index];\n    var result;\n\n    if (disabledKey) {\n      result = applyKey(option, disabledKey);\n    } else if (Array.isArray(disabled)) {\n      if (typeof disabled[0] === 'number') {\n        result = disabled.indexOf(index) !== -1;\n      } else {\n        var optionVal = optionValue(index);\n        result = disabled.indexOf(optionVal) !== -1;\n      }\n    }\n\n    return result;\n  }, [disabled, disabledKey, options, optionValue]);\n  var isSelected = useCallback(function (index) {\n    var result;\n\n    if (selected) {\n      // deprecated in favor of value\n      result = selected.indexOf(index) !== -1;\n    } else {\n      var optionVal = optionValue(index);\n\n      if (Array.isArray(value)) {\n        if (value.length === 0) {\n          result = false;\n        } else if (typeof value[0] !== 'object') {\n          result = value.indexOf(optionVal) !== -1;\n        } else if (valueKey) {\n          result = value.some(function (valueItem) {\n            var valueValue = typeof valueKey === 'function' ? valueKey(valueItem) : valueItem[valueKey];\n            return valueValue === optionVal;\n          });\n        }\n      } else if (valueKey && typeof value === 'object') {\n        var valueValue = typeof valueKey === 'function' ? valueKey(value) : value[valueKey];\n        result = valueValue === optionVal;\n      } else {\n        result = value === optionVal;\n      }\n    }\n\n    return result;\n  }, [optionValue, selected, value, valueKey]);\n  var selectOption = useCallback(function (index) {\n    return function (event) {\n      if (onChange) {\n        var nextValue;\n        var nextSelected;\n\n        if (multiple) {\n          var nextOptionIndexesInValue = optionIndexesInValue.slice(0);\n          var allOptionsIndex = allOptions.indexOf(options[index]);\n          var valueIndex = optionIndexesInValue.indexOf(allOptionsIndex);\n\n          if (valueIndex === -1) {\n            nextOptionIndexesInValue.push(allOptionsIndex);\n          } else {\n            nextOptionIndexesInValue.splice(valueIndex, 1);\n          }\n\n          nextValue = nextOptionIndexesInValue.map(function (i) {\n            return valueKey && valueKey.reduce ? applyKey(allOptions[i], valueKey) : allOptions[i];\n          });\n          nextSelected = nextOptionIndexesInValue;\n        } else {\n          nextValue = valueKey && valueKey.reduce ? applyKey(options[index], valueKey) : options[index];\n          nextSelected = index;\n        }\n\n        onChange(event, {\n          option: options[index],\n          value: nextValue,\n          selected: nextSelected\n        });\n      }\n    };\n  }, [multiple, onChange, optionIndexesInValue, options, allOptions, valueKey]);\n  var onClear = useCallback(function (event) {\n    onChange(event, {\n      option: undefined,\n      value: '',\n      selected: ''\n    });\n  }, [onChange]);\n  var onNextOption = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = activeIndex + 1;\n\n    while (nextActiveIndex < options.length && isDisabled(nextActiveIndex)) {\n      nextActiveIndex += 1;\n    }\n\n    if (nextActiveIndex !== options.length) {\n      setActiveIndex(nextActiveIndex);\n      setKeyboardNavigation(true);\n    }\n  }, [activeIndex, isDisabled, options]);\n  var onPreviousOption = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = activeIndex - 1;\n\n    if (nextActiveIndex === -1) {\n      var searchInput = searchRef.current;\n      var clearButton = clearRef.current;\n\n      if (clearButton && clearButton.focus && shouldShowClearButton('top')) {\n        setActiveIndex(nextActiveIndex);\n        setFocusWithoutScroll(clearButton);\n      } else if (searchInput && searchInput.focus) {\n        setActiveIndex(nextActiveIndex);\n        setFocusWithoutScroll(searchInput);\n      }\n    }\n\n    while (nextActiveIndex >= 0 && isDisabled(nextActiveIndex)) {\n      nextActiveIndex -= 1;\n    }\n\n    if (nextActiveIndex >= 0) {\n      setActiveIndex(nextActiveIndex);\n      setKeyboardNavigation(true);\n    }\n  }, [activeIndex, isDisabled, shouldShowClearButton]);\n  var onKeyDownOption = useCallback(function (event) {\n    if (!onSearch) {\n      var nextActiveIndex = options.findIndex(function (e, index) {\n        var label;\n\n        if (typeof e === 'object') {\n          label = e.label || applyKey(e, labelKey);\n        } else {\n          label = e;\n        }\n\n        return typeof label === 'string' && label.charAt(0).toLowerCase() === event.key.toLowerCase() && !isDisabled(index);\n      });\n\n      if (nextActiveIndex >= 0) {\n        event.preventDefault();\n        setActiveIndex(nextActiveIndex);\n        setKeyboardNavigation(true);\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  }, [onKeyDown, options, isDisabled, onSearch, labelKey]);\n  var onActiveOption = useCallback(function (index) {\n    return function () {\n      if (!keyboardNavigation) setActiveIndex(index);\n    };\n  }, [keyboardNavigation]);\n  var onSelectOption = useCallback(function (event) {\n    if ((shouldShowClearButton('bottom') || shouldShowClearButton('top')) && containsFocus(clearRef.current)) {\n      onChange(event, {\n        option: undefined,\n        value: '',\n        selected: ''\n      });\n    } else if (activeIndex >= 0 && activeIndex < options.length) {\n      event.preventDefault(); // prevent submitting forms\n\n      selectOption(activeIndex)(event);\n    }\n  }, [activeIndex, selectOption, options, onChange, shouldShowClearButton]);\n  var customSearchInput = theme.select.searchInput;\n  var SelectTextInput = customSearchInput || TextInput;\n  var selectOptionsStyle = theme.select.options ? _extends({}, theme.select.options.box, theme.select.options.container) : {};\n  return /*#__PURE__*/React.createElement(Keyboard, {\n    onEnter: onSelectOption,\n    onSpace: onSelectOption,\n    onUp: onPreviousOption,\n    onDown: onNextOption,\n    onKeyDown: onKeyDownOption\n  }, /*#__PURE__*/React.createElement(StyledContainer, {\n    ref: ref,\n    as: Box,\n    id: id ? id + \"__select-drop\" : undefined,\n    dropHeight: dropHeight\n  }, onSearch && /*#__PURE__*/React.createElement(Box, {\n    pad: !customSearchInput ? 'xsmall' : undefined,\n    flex: false\n  }, /*#__PURE__*/React.createElement(SelectTextInput, {\n    focusIndicator: !customSearchInput,\n    size: \"small\",\n    ref: searchRef,\n    type: \"search\",\n    value: search || '',\n    placeholder: searchPlaceholder,\n    onChange: function onChange(event) {\n      var nextSearch = event.target.value;\n      setSearch(nextSearch);\n      setActiveIndex(-1);\n      onSearch(nextSearch);\n    }\n  })), shouldShowClearButton('top') && /*#__PURE__*/React.createElement(ClearButton, {\n    ref: clearRef,\n    clear: clear,\n    name: name,\n    onClear: onClear,\n    onFocus: function onFocus() {\n      return setActiveIndex(-1);\n    },\n    onMouseOver: function onMouseOver() {\n      return setActiveIndex(-1);\n    },\n    theme: theme\n  }), /*#__PURE__*/React.createElement(OptionsBox, {\n    role: \"listbox\",\n    tabIndex: \"-1\",\n    ref: optionsRef,\n    \"aria-multiselectable\": multiple,\n    onMouseMove: function onMouseMove() {\n      return setKeyboardNavigation(false);\n    }\n  }, options.length > 0 ? /*#__PURE__*/React.createElement(InfiniteScroll, {\n    items: options,\n    step: theme.select.step,\n    onMore: onMore,\n    replace: replace,\n    show: activeIndex !== -1 ? activeIndex : undefined\n  }, function (option, index, optionRef) {\n    var optionDisabled = isDisabled(index);\n    var optionSelected = isSelected(index);\n    var optionActive = activeIndex === index; // Determine whether the label is done as a child or\n    // as an option Button kind property.\n\n    var child;\n    var textComponent = false;\n\n    if (children) {\n      child = children(option, index, options, {\n        active: optionActive,\n        disabled: optionDisabled,\n        selected: optionSelected\n      });\n      if (typeof child === 'string' || child.props && child.props.children && typeof child.props.children === 'string') textComponent = true;\n    } else if (theme.select.options) {\n      child = /*#__PURE__*/React.createElement(Box, selectOptionsStyle, /*#__PURE__*/React.createElement(Text, theme.select.options.text, optionLabel(index)));\n      textComponent = true;\n    } // if we have a child, turn on plain, and hoverIndicator\n\n\n    return /*#__PURE__*/React.createElement(SelectOption // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: index // merge optionRef and activeRef\n      ,\n      ref: function ref(node) {\n        // eslint-disable-next-line no-param-reassign\n        if (optionRef) optionRef.current = node;\n        if (optionActive) activeRef.current = node;\n      },\n      tabIndex: optionSelected ? '0' : '-1',\n      role: \"option\",\n      \"aria-setsize\": options.length,\n      \"aria-posinset\": index + 1,\n      \"aria-selected\": optionSelected,\n      focusIndicator: false,\n      \"aria-disabled\": optionDisabled || undefined,\n      plain: !child ? undefined : true,\n      align: \"start\",\n      kind: !child ? 'option' : undefined,\n      label: !child ? optionLabel(index) : undefined,\n      disabled: optionDisabled || undefined,\n      active: optionActive,\n      selected: optionSelected // allow keyboard navigation to start from\n      // selected option after tabbing to it\n      ,\n      onFocus: function onFocus() {\n        return setActiveIndex(index);\n      },\n      onMouseOver: !optionDisabled ? onActiveOption(index) : undefined,\n      onClick: !optionDisabled ? selectOption(index) : undefined,\n      textComponent: textComponent\n    }, child);\n  }) : /*#__PURE__*/React.createElement(SelectOption, {\n    key: \"search_empty\",\n    tabIndex: \"-1\",\n    role: \"menuitem\",\n    hoverIndicator: \"background\",\n    disabled: true\n  }, /*#__PURE__*/React.createElement(Box, selectOptionsStyle, /*#__PURE__*/React.createElement(Text, theme.select.container.text, emptySearchMessage)))), shouldShowClearButton('bottom') && /*#__PURE__*/React.createElement(ClearButton, {\n    ref: clearRef,\n    clear: clear,\n    name: name,\n    onClear: onClear,\n    onFocus: function onFocus() {\n      return setActiveIndex(-1);\n    },\n    onMouseOver: function onMouseOver() {\n      return setActiveIndex(-1);\n    },\n    theme: theme\n  })));\n});\nexport { SelectContainer };","map":null,"metadata":{},"sourceType":"module"}