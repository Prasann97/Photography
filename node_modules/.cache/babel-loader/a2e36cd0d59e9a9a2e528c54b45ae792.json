{"ast":null,"code":"var _excluded = [\"background\", \"max\", \"round\", \"size\", \"thickness\", \"direction\", \"values\"],\n    _excluded2 = [\"color\", \"highlight\", \"label\", \"onHover\", \"value\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { parseMetricToNum } from '../../utils';\nimport { StyledMeter } from './StyledMeter';\nimport { strokeProps, defaultColor } from './utils';\nvar Bar = /*#__PURE__*/forwardRef(function (props, ref) {\n  var background = props.background,\n      max = props.max,\n      round = props.round,\n      size = props.size,\n      thicknessProp = props.thickness,\n      direction = props.direction,\n      values = props.values,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var length = size === 'full' ? 288 : parseMetricToNum(theme.global.size[size] || size);\n  var thickness = parseMetricToNum(theme.global.edgeSize[thicknessProp] || thicknessProp); // account for the round cap, if any\n\n  var capOffset = round ? thickness / 2 : 0;\n  var mid = thickness / 2;\n  var someHighlight = (values || []).some(function (v) {\n    return v.highlight;\n  });\n  var start = direction === 'horizontal' ? capOffset : max * (length - 2 * capOffset) / max;\n  var paths = (values || []).reduce(function (acc, valueArg, index) {\n    if (valueArg.value > 0) {\n      var color = valueArg.color,\n          highlight = valueArg.highlight,\n          label = valueArg.label,\n          onHover = valueArg.onHover,\n          value = valueArg.value,\n          pathRest = _objectWithoutPropertiesLoose(valueArg, _excluded2);\n\n      var key = \"p-\" + index;\n      var delta = value * (length - 2 * capOffset) / max;\n      var d = direction === 'horizontal' ? \"M \" + start + \",\" + mid + \" L \" + (start + delta) + \",\" + mid : \"M \" + mid + \",\" + start + \" L \" + mid + \",\" + (start - delta);\n      var colorName = color || defaultColor(index, theme, values ? values.length : 0);\n      var hoverProps;\n\n      if (onHover) {\n        hoverProps = {\n          onMouseOver: function onMouseOver() {\n            return onHover(true);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return onHover(false);\n          }\n        };\n      }\n\n      if (direction === 'horizontal') {\n        start += delta;\n      } else {\n        start -= delta;\n      }\n\n      var result = /*#__PURE__*/React.createElement(\"path\", _extends({\n        key: key,\n        d: d,\n        fill: \"none\"\n      }, strokeProps(someHighlight && !highlight ? background : colorName, theme), {\n        strokeWidth: direction === 'horizontal' ? thickness : length,\n        strokeLinecap: round ? 'round' : 'butt'\n      }, hoverProps, pathRest));\n      acc.push(result);\n    }\n\n    return acc;\n  }, []).reverse(); // reverse so the caps looks right\n\n  var width;\n\n  if (direction === 'horizontal') {\n    width = size === 'full' ? '100%' : length;\n  } else {\n    width = size === 'full' ? '100%' : thickness;\n  }\n\n  var backgroundPath = direction === 'horizontal' ? \"M \" + capOffset + \",\" + mid + \" L \" + (length - capOffset) + \",\" + mid : \"M \" + mid + \",\" + capOffset + \" L \" + mid + \",\" + (length - capOffset);\n  return /*#__PURE__*/React.createElement(StyledMeter, _extends({\n    ref: ref,\n    viewBox: direction === 'horizontal' ? \"0 0 \" + length + \" \" + thickness : \"0 0 \" + thickness + \" \" + length,\n    preserveAspectRatio: \"none\",\n    width: width,\n    height: direction === 'horizontal' ? thickness : length,\n    round: round ? {\n      size: thicknessProp\n    } : undefined\n  }, rest), /*#__PURE__*/React.createElement(\"path\", _extends({\n    d: backgroundPath,\n    fill: \"none\"\n  }, strokeProps(background, theme), {\n    strokeWidth: thickness,\n    strokeLinecap: round ? 'round' : 'square'\n  })), paths);\n});\nBar.displayName = 'Bar';\nBar.defaultProps = {\n  background: 'light-1'\n};\nObject.setPrototypeOf(Bar.defaultProps, defaultProps);\nexport { Bar };","map":null,"metadata":{},"sourceType":"module"}