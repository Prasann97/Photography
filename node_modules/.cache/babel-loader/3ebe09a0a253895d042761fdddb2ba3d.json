{"ast":null,"code":"import React, { forwardRef, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { defaultProps } from '../../default-props';\nimport { useForwardedRef } from '../../utils';\nimport { Box } from '../Box';\nimport { CollapsiblePropTypes } from './propTypes';\nvar AnimatedBox = styled(Box).withConfig({\n  displayName: \"Collapsible__AnimatedBox\",\n  componentId: \"sc-15kniua-0\"\n})([\"\", \"\"], function (props) {\n  return props.shouldOpen ? \"visibility: hidden;\\n      position: absolute;\\n      pointer-events: none;\" : // eslint-disable-next-line max-len\n  \"transition: \" + (\"max-\" + props.dimension + \" \" + props.speedProp + \"ms, opacity \" + props.speedProp + \"ms\") + \";\\n      opacity: \" + (props.open ? 1 : 0) + \";\\n      overflow: \" + (props.animate || !props.open ? 'hidden' : 'visible') + \";\";\n});\nvar Collapsible = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      direction = _ref.direction,\n      openArg = _ref.open;\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(openArg),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      animate = _useState2[0],\n      setAnimate = _useState2[1];\n\n  var _useState3 = useState(theme.collapsible.minSpeed),\n      speed = _useState3[0],\n      setSpeed = _useState3[1];\n\n  var dimension = useMemo(function () {\n    return direction === 'horizontal' ? 'width' : 'height';\n  }, [direction]);\n  var containerRef = useForwardedRef(ref);\n  var sizeRef = useRef();\n  var shouldOpen = !open && openArg;\n  var shouldClose = open && !openArg; // when the caller changes openArg, trigger animation\n\n  useEffect(function () {\n    if (openArg !== open) {\n      setAnimate(true);\n      setOpen(openArg);\n    }\n  }, [open, openArg]); // prepare to open or close\n\n  useLayoutEffect(function () {\n    var container = containerRef.current; // skip this if animation is in progress\n\n    if (!animate && shouldOpen) {\n      var parentPrevPosition = container.parentNode.style.position;\n      container.parentNode.style.position = 'relative';\n\n      var _container$getBoundin = container.getBoundingClientRect(),\n          size = _container$getBoundin[dimension];\n\n      container.parentNode.style.position = parentPrevPosition;\n      sizeRef.current = size;\n    }\n\n    if (shouldOpen) {\n      container.style[\"max-\" + dimension] = 0;\n    } else if (shouldClose) {\n      var _container$getBoundin2 = container.getBoundingClientRect(),\n          _size = _container$getBoundin2[dimension];\n\n      container.style[\"max-\" + dimension] = _size + \"px\";\n    }\n  }, [shouldOpen, shouldClose, containerRef, dimension, animate]);\n  useEffect(function () {\n    if (shouldOpen || shouldClose) {\n      var container = containerRef.current;\n      var _theme$collapsible = theme.collapsible,\n          minSpeed = _theme$collapsible.minSpeed,\n          baseline = _theme$collapsible.baseline;\n      var nextSpeed = Math.max(sizeRef.current / baseline * minSpeed, minSpeed);\n      setSpeed(nextSpeed);\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          // Change the max to where we want to end up, the transition will\n          // animate to get there. We do this in an animation frame to\n          // give our starter setting a chance to fully render.\n          container.style[\"max-\" + dimension] = shouldOpen ? sizeRef.current + \"px\" : 0;\n        });\n      });\n    }\n  }, [shouldOpen, shouldClose, containerRef, dimension, theme]);\n  useEffect(function () {\n    if (animate) {\n      var container = containerRef.current;\n      var timer = setTimeout(function () {\n        setAnimate(false);\n        container.removeAttribute('style');\n      }, speed);\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n\n    return undefined; // we need open here to cancel the timer and restart it\n  }, [animate, containerRef, speed, open]);\n  return /*#__PURE__*/React.createElement(AnimatedBox, {\n    \"aria-hidden\": !open,\n    ref: containerRef,\n    open: open,\n    animate: animate,\n    dimension: dimension,\n    speedProp: speed // an intermediate state that will render invisible element\n    // we need to do this because we can't use scrollHeight/scrollWidth\n    // to get size while overflow is hidden.\n    // skipped if animation is in progress\n    ,\n    shouldOpen: !animate && shouldOpen\n  }, shouldOpen || open || animate ? children : null);\n});\nCollapsible.displayName = 'Collapsible';\nCollapsible.propTypes = CollapsiblePropTypes;\nexport { Collapsible };","map":null,"metadata":{},"sourceType":"module"}