{"ast":null,"code":"var _excluded = [\"background\", \"border\", \"column\", \"datum\", \"pad\", \"pin\", \"pinnedOffset\", \"primaryProperty\", \"scope\", \"verticalAlign\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { memo, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Text } from '../Text';\nimport { StyledDataTableCell } from './StyledDataTable';\nimport { datumValue } from './buildState';\nimport { TableContext } from '../Table/TableContext';\nvar Cell = /*#__PURE__*/memo(function (_ref) {\n  var background = _ref.background,\n      border = _ref.border,\n      _ref$column = _ref.column,\n      align = _ref$column.align,\n      columnPin = _ref$column.pin,\n      plain = _ref$column.plain,\n      footer = _ref$column.footer,\n      property = _ref$column.property,\n      render = _ref$column.render,\n      columnVerticalAlign = _ref$column.verticalAlign,\n      size = _ref$column.size,\n      datum = _ref.datum,\n      pad = _ref.pad,\n      cellPin = _ref.pin,\n      pinnedOffset = _ref.pinnedOffset,\n      primaryProperty = _ref.primaryProperty,\n      scope = _ref.scope,\n      verticalAlign = _ref.verticalAlign,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var value = datumValue(datum, property);\n  var context = useContext(TableContext);\n  var renderContexts = context === 'body' || context === 'footer' && footer && footer.aggregate;\n  var content;\n\n  if (render && renderContexts) {\n    content = render(datum);\n  } else if (value !== undefined) {\n    content = value;\n  }\n\n  if (typeof content === 'string' || typeof content === 'number') {\n    var textProps = property === primaryProperty ? theme.dataTable.primary : {};\n    content = /*#__PURE__*/React.createElement(Text, textProps, content);\n  }\n\n  var pin = [];\n  if (cellPin) pin.push.apply(pin, cellPin);\n  if (columnPin) pin.push('left');\n  return /*#__PURE__*/React.createElement(StyledDataTableCell, _extends({\n    scope: scope\n  }, theme.dataTable[context], {\n    align: align,\n    context: context,\n    verticalAlign: verticalAlign || columnVerticalAlign,\n    size: size,\n    background: background,\n    pinnedOffset: pinnedOffset,\n    border: border,\n    pad: pad,\n    pin: pin,\n    plain: plain ? 'noPad' : undefined\n  }, rest), content);\n});\nCell.displayName = 'Cell';\nCell.defaultProps = {};\nObject.setPrototypeOf(Cell.defaultProps, defaultProps);\nexport { Cell };","map":null,"metadata":{},"sourceType":"module"}