{"ast":null,"code":"import styled, { css } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { animationObjectStyle } from '../../utils/animation';\n\nvar animationItemStyle = function animationItemStyle(animationType, theme) {\n  if (typeof animationType === 'string') {\n    return animationObjectStyle({\n      type: animationType\n    }, theme, theme.diagram);\n  }\n\n  if (typeof animationType === 'object') {\n    return animationObjectStyle(animationType, theme, theme.diagram);\n  }\n\n  if (typeof animationType === 'boolean') {\n    return animationObjectStyle({\n      type: 'draw'\n    }, theme, theme.diagram);\n  }\n\n  return '';\n};\n\nvar animationStyle = function animationStyle(props) {\n  var animationCopy = props.animation;\n\n  if (typeof props.animation === 'object') {\n    animationCopy.type = animationCopy.type || 'draw';\n  }\n\n  var animationType = animationCopy.type || animationCopy;\n\n  if (animationType === 'draw' || animationType === true) {\n    return css([\"path{stroke-dasharray:500;stroke-dashoffset:500;animation:\", \";}\"], animationItemStyle(animationCopy, props.theme));\n  }\n\n  return css([\"animation:\", \";\"], animationItemStyle(animationCopy, props.theme));\n};\n\nvar connectionStyle = function connectionStyle(connection, index, theme) {\n  var type = connection.props.animation.type;\n\n  if (typeof connection.props.animation === 'object') {\n    type = type || 'draw';\n  }\n\n  var animationType = type || connection.props.animation;\n  return css([\"path:nth-child(\", \"){stroke-dasharray:\", \";stroke-dashoffset:\", \";animation:\", \";}\"], index + 1, animationType === 'draw' || animationType === true ? 500 : 0, animationType === 'draw' || animationType === true ? 500 : 0, animationItemStyle(connection.props.animation, theme));\n};\n\nvar availableAnimations = [true, 'draw', 'pulse'];\nvar StyledDiagram = styled.svg.withConfig({\n  displayName: \"StyledDiagram\",\n  componentId: \"sc-1vzeu9f-0\"\n})([\"max-width:100%;width:100%;height:100%;\", \" \", \" \", \"\"], function (props) {\n  return props.connections && props.connections.map(function (connection, index) {\n    if (connection !== undefined && connection.props.animation) {\n      var animation = connection.props.animation; // setting type to 'draw' if user doesn't specify a type\n\n      if (typeof animation === 'object') {\n        // copying 'connection' to avoid linter error\n        var connectionCopy = connection;\n        connectionCopy.props.animation.type = animation.type || 'draw';\n        return availableAnimations.includes(animation.type || animation) ? connectionStyle(connectionCopy, index, props.theme) : '';\n      }\n\n      return connectionStyle(connection, index, props.theme);\n    }\n\n    return '';\n  });\n}, function (props) {\n  return props.animation && (availableAnimations.includes(props.animation.type || props.animation) || Object.keys(props.animation).length !== 0) ? animationStyle(props) : '';\n}, function (props) {\n  return props.theme.diagram && props.theme.diagram.extend;\n});\nStyledDiagram.defaultProps = {};\nObject.setPrototypeOf(StyledDiagram.defaultProps, defaultProps);\nexport { StyledDiagram };","map":null,"metadata":{},"sourceType":"module"}