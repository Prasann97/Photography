{"ast":null,"code":"var _excluded = [\"cellProps\", \"columns\", \"data\", \"disabled\", \"onMore\", \"replace\", \"onClickRow\", \"onSelect\", \"pinnedOffset\", \"primaryProperty\", \"rowProps\", \"selected\", \"rowDetails\", \"show\", \"size\", \"step\", \"rowExpand\", \"setRowExpand\", \"verticalAlign\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/* eslint-disable no-underscore-dangle */\n\n\nimport React, { forwardRef, memo, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { useKeyboard } from '../../utils';\nimport { CheckBox } from '../CheckBox';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { TableRow } from '../TableRow';\nimport { TableCell } from '../TableCell';\nimport { Keyboard } from '../Keyboard';\nimport { ExpanderCell } from './ExpanderCell';\nimport { Cell } from './Cell';\nimport { StyledDataTableBody, StyledDataTableRow } from './StyledDataTable';\nimport { datumValue, normalizeRowCellProps } from './buildState';\nimport { defaultProps } from '../../default-props';\nvar Row = /*#__PURE__*/memo(function (_ref) {\n  var cellProps = _ref.cellProps,\n      primaryValue = _ref.primaryValue,\n      index = _ref.index,\n      rowRef = _ref.rowRef,\n      size = _ref.size,\n      active = _ref.active,\n      onClickRow = _ref.onClickRow,\n      datum = _ref.datum,\n      selected = _ref.selected,\n      onSelect = _ref.onSelect,\n      isDisabled = _ref.isDisabled,\n      isSelected = _ref.isSelected,\n      rowDetails = _ref.rowDetails,\n      isRowExpanded = _ref.isRowExpanded,\n      setActive = _ref.setActive,\n      setRowExpand = _ref.setRowExpand,\n      rowExpand = _ref.rowExpand,\n      columns = _ref.columns,\n      pinnedOffset = _ref.pinnedOffset,\n      primaryProperty = _ref.primaryProperty,\n      data = _ref.data,\n      verticalAlign = _ref.verticalAlign;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledDataTableRow, {\n    ref: rowRef,\n    size: size,\n    active: active,\n    \"aria-disabled\": onClickRow && isDisabled || undefined,\n    onClick: onClickRow ? function (event) {\n      if (onClickRow && !isDisabled) {\n        if (typeof onClickRow === 'function') {\n          // extract from React's synthetic event pool\n          event.persist();\n          var adjustedEvent = event;\n          adjustedEvent.datum = datum;\n          adjustedEvent.index = index;\n          onClickRow(adjustedEvent);\n        } else if (onClickRow === 'select') {\n          if (isSelected) {\n            onSelect(selected.filter(function (s) {\n              return s !== primaryValue;\n            }));\n          } else onSelect([].concat(selected, [primaryValue]));\n        }\n      }\n    } : undefined,\n    onMouseEnter: onClickRow && !isDisabled ? function () {\n      return setActive(index);\n    } : undefined,\n    onMouseLeave: onClickRow ? function () {\n      return setActive(undefined);\n    } : undefined\n  }, (selected || onSelect) && /*#__PURE__*/React.createElement(Cell, {\n    background: (pinnedOffset == null ? void 0 : pinnedOffset._grommetDataTableSelect) && cellProps.pinned.background || cellProps.background,\n    pinnedOffset: pinnedOffset == null ? void 0 : pinnedOffset._grommetDataTableSelect,\n    \"aria-disabled\": isDisabled || !onSelect || undefined,\n    column: {\n      pin: Boolean(pinnedOffset == null ? void 0 : pinnedOffset._grommetDataTableSelect),\n      plain: 'noPad',\n      size: 'auto',\n      render: function render() {\n        return /*#__PURE__*/React.createElement(CheckBox, {\n          tabIndex: onClickRow === 'select' ? -1 : undefined,\n          a11yTitle: (isSelected ? 'unselect' : 'select') + \" \" + primaryValue,\n          checked: isSelected,\n          disabled: isDisabled || !onSelect,\n          onChange: function onChange() {\n            if (isSelected) {\n              onSelect(selected.filter(function (s) {\n                return s !== primaryValue;\n              }));\n            } else onSelect([].concat(selected, [primaryValue]));\n          },\n          pad: cellProps.pad\n        });\n      }\n    },\n    verticalAlign: verticalAlign\n  }), rowDetails && /*#__PURE__*/React.createElement(ExpanderCell, {\n    context: isRowExpanded ? 'groupHeader' : 'body',\n    expanded: isRowExpanded,\n    onToggle: function onToggle() {\n      if (isRowExpanded) {\n        setRowExpand(rowExpand.filter(function (s) {\n          return s !== index;\n        }));\n      } else {\n        setRowExpand([].concat(rowExpand, [index]));\n      }\n    },\n    pad: cellProps.pad,\n    verticalAlign: verticalAlign\n  }), columns.map(function (column) {\n    return /*#__PURE__*/React.createElement(Cell, {\n      key: column.property,\n      background: column.pin && cellProps.pinned.background || cellProps.background,\n      border: column.pin && cellProps.pinned.border || cellProps.border,\n      context: \"body\",\n      column: column,\n      datum: datum,\n      pad: column.pin && cellProps.pinned.pad || cellProps.pad,\n      pinnedOffset: pinnedOffset && pinnedOffset[column.property],\n      primaryProperty: primaryProperty,\n      scope: column.primary || column.property === primaryProperty ? 'row' : undefined,\n      verticalAlign: verticalAlign\n    });\n  })), rowDetails && isRowExpanded && /*#__PURE__*/React.createElement(StyledDataTableRow, {\n    key: index.toString() + \"_expand\"\n  }, (selected || onSelect) && /*#__PURE__*/React.createElement(TableCell, null), /*#__PURE__*/React.createElement(TableCell, {\n    colSpan: columns.length + 1\n  }, rowDetails(data[index]))));\n});\nvar Body = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var _ref3;\n\n  var cellPropsProp = _ref2.cellProps,\n      columns = _ref2.columns,\n      data = _ref2.data,\n      disabled = _ref2.disabled,\n      onMore = _ref2.onMore,\n      replace = _ref2.replace,\n      onClickRow = _ref2.onClickRow,\n      onSelect = _ref2.onSelect,\n      pinnedOffset = _ref2.pinnedOffset,\n      primaryProperty = _ref2.primaryProperty,\n      rowProps = _ref2.rowProps,\n      selected = _ref2.selected,\n      rowDetails = _ref2.rowDetails,\n      show = _ref2.show,\n      size = _ref2.size,\n      step = _ref2.step,\n      rowExpand = _ref2.rowExpand,\n      setRowExpand = _ref2.setRowExpand,\n      verticalAlign = _ref2.verticalAlign,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _React$useState = React.useState(),\n      active = _React$useState[0],\n      setActive = _React$useState[1];\n\n  var _React$useState2 = React.useState(),\n      lastActive = _React$useState2[0],\n      setLastActive = _React$useState2[1]; // Determine if using a keyboard to cover focus behavior\n\n\n  var usingKeyboard = useKeyboard();\n  var onFocusActive = (_ref3 = active != null ? active : lastActive) != null ? _ref3 : usingKeyboard ? 0 : undefined;\n\n  var selectRow = function selectRow() {\n    var _data$active;\n\n    var primaryValue = (_data$active = data[active]) == null ? void 0 : _data$active[primaryProperty];\n\n    if (selected && selected.includes(primaryValue)) {\n      onSelect(selected.filter(function (s) {\n        return s !== primaryValue;\n      }));\n    } else onSelect([].concat(selected, [primaryValue]));\n  };\n\n  var clickableRow = onClickRow && active >= 0 && (!disabled || !disabled.includes(datumValue(data[active], primaryProperty)));\n  return /*#__PURE__*/React.createElement(Keyboard, {\n    onEnter: clickableRow ? function (event) {\n      if (clickableRow) {\n        if (typeof onClickRow === 'function') {\n          event.persist();\n          var adjustedEvent = event;\n          adjustedEvent.datum = data[active];\n          onClickRow(adjustedEvent);\n        } else if (onClickRow === 'select') {\n          selectRow();\n        }\n      }\n    } : undefined // The WCAG recommendation for checkboxes is to select them with \"Space\"\n    ,\n    onSpace: function onSpace() {\n      if (clickableRow) {\n        if (onClickRow === 'select') {\n          selectRow();\n        }\n      }\n    },\n    onUp: onClickRow && active ? function () {\n      return setActive(active - 1);\n    } : undefined,\n    onDown: onClickRow && data.length && active < data.length - 1 ? function () {\n      return setActive((active != null ? active : -1) + 1);\n    } : undefined\n  }, /*#__PURE__*/React.createElement(StyledDataTableBody, _extends({\n    ref: ref,\n    size: size,\n    tabIndex: onClickRow ? 0 : undefined,\n    onFocus: function onFocus() {\n      return setActive(onFocusActive);\n    },\n    onBlur: function onBlur() {\n      setLastActive(active);\n      setActive(undefined);\n    }\n  }, rest), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    items: data,\n    onMore: onMore,\n    replace: replace,\n    renderMarker: function renderMarker(marker) {\n      return /*#__PURE__*/React.createElement(TableRow, null, /*#__PURE__*/React.createElement(TableCell, null, marker));\n    },\n    show: show,\n    step: step\n  }, function (datum, index, rowRef) {\n    var primaryValue = primaryProperty ? datumValue(datum, primaryProperty) : undefined;\n    var isSelected = selected && selected.includes(primaryValue);\n    var isDisabled = disabled && disabled.includes(primaryValue);\n    var isRowExpanded = rowExpand && rowExpand.includes(index);\n    var cellProps = normalizeRowCellProps(rowProps, cellPropsProp, primaryValue, index);\n    return /*#__PURE__*/React.createElement(Row, {\n      key: index,\n      setActive: setActive,\n      rowRef: rowRef,\n      cellProps: cellProps,\n      primaryValue: primaryValue,\n      isDisabled: isDisabled,\n      isSelected: isSelected,\n      isRowExpanded: isRowExpanded,\n      index: index,\n      size: size,\n      active: active >= 0 ? active === index : undefined,\n      onClickRow: onClickRow,\n      datum: datum,\n      selected: selected,\n      onSelect: onSelect,\n      rowDetails: rowDetails,\n      setRowExpand: setRowExpand,\n      rowExpand: rowExpand,\n      columns: columns,\n      primaryProperty: primaryProperty,\n      rowProps: rowProps,\n      data: data,\n      theme: theme,\n      pinnedOffset: pinnedOffset,\n      verticalAlign: verticalAlign\n    });\n  })));\n});\nexport { Body };","map":null,"metadata":{},"sourceType":"module"}