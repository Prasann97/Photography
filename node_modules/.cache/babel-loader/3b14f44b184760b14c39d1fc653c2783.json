{"ast":null,"code":"var _excluded = [\"a11yTitle\", \"color\", \"focus\", \"focusIndicator\", \"name\", \"onChange\", \"onFocus\", \"onBlur\", \"value\", \"step\", \"min\", \"max\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useState, useCallback, useEffect } from 'react';\nimport { FormContext } from '../Form/FormContext';\nimport { StyledRangeInput } from './StyledRangeInput';\nimport { RangeInputPropTypes } from './propTypes';\nimport { useForwardedRef } from '../../utils';\nvar RangeInput = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      color = _ref.color,\n      focusProp = _ref.focus,\n      _ref$focusIndicator = _ref.focusIndicator,\n      focusIndicator = _ref$focusIndicator === void 0 ? true : _ref$focusIndicator,\n      name = _ref.name,\n      _onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      _onBlur = _ref.onBlur,\n      valueProp = _ref.value,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 1 : _ref$step,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var formContext = useContext(FormContext);\n\n  var _useState = useState(focusProp),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _formContext$useFormI = formContext.useFormInput({\n    name: name,\n    value: valueProp\n  }),\n      value = _formContext$useFormI[0],\n      setValue = _formContext$useFormI[1];\n\n  var _useState2 = useState({\n    x: null,\n    y: null\n  }),\n      scroll = _useState2[0],\n      setScroll = _useState2[1];\n\n  var rangeInputRef = useForwardedRef(ref);\n  useEffect(function () {\n    var x = scroll.x,\n        y = scroll.y;\n\n    if (x !== null && y !== null) {\n      var handleScrollTo = function handleScrollTo() {\n        return window.scrollTo(x, y);\n      };\n\n      window.addEventListener('scroll', handleScrollTo);\n      return function () {\n        return window.removeEventListener('scroll', handleScrollTo);\n      };\n    }\n\n    return undefined;\n  }, [scroll]);\n  var setRangeInputValue = useCallback(function (nextValue) {\n    if (nextValue > max || nextValue < min) return; // Calling set value function directly on input because React library\n    // overrides setter `event.target.value =` and loses original event\n    // target fidelity.\n    // https://stackoverflow.com/a/46012210\n\n    var nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;\n    nativeInputValueSetter.call(rangeInputRef.current, nextValue);\n    var event = new Event('input', {\n      bubbles: true\n    });\n    rangeInputRef.current.dispatchEvent(event);\n  }, [rangeInputRef, min, max]);\n\n  var handleOnWheel = function handleOnWheel(event) {\n    var newValue = parseFloat(value);\n\n    if (event.deltaY < 0) {\n      setRangeInputValue(newValue + step);\n    } else {\n      setRangeInputValue(newValue - step);\n    }\n  }; // This is to make sure scrollbar doesn't move\n  // when user changes RangeInput value.\n\n\n  var handleMouseOver = function handleMouseOver() {\n    return setScroll({\n      x: window.scrollX,\n      y: window.scrollY\n    });\n  };\n\n  var handleMouseOut = function handleMouseOut() {\n    return setScroll({\n      x: null,\n      y: null\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(StyledRangeInput, _extends({\n    \"aria-label\": a11yTitle,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref: rangeInputRef,\n    name: name,\n    focus: focus,\n    focusIndicator: focusIndicator,\n    value: value\n  }, rest, {\n    color: color,\n    onFocus: function onFocus(event) {\n      setFocus(true);\n      if (_onFocus) _onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      setFocus(false);\n      if (_onBlur) _onBlur(event);\n    },\n    onChange: function onChange(event) {\n      setValue(event.target.value);\n      if (_onChange) _onChange(event);\n    },\n    onMouseOver: handleMouseOver,\n    onMouseOut: handleMouseOut,\n    onWheel: handleOnWheel,\n    step: step,\n    type: \"range\",\n    min: min,\n    max: max\n  }));\n});\nRangeInput.displayName = 'RangeInput';\nRangeInput.propTypes = RangeInputPropTypes;\nexport { RangeInput };","map":null,"metadata":{},"sourceType":"module"}