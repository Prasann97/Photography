{"ast":null,"code":"import React, { useCallback, useContext, useEffect, useRef } from 'react';\nexport var AnalyticsContext = /*#__PURE__*/React.createContext(function () {});\nexport var useAnalytics = function useAnalytics() {\n  return useContext(AnalyticsContext);\n};\nexport var AnalyticsProvider = function AnalyticsProvider(_ref) {\n  var onAnalytics = _ref.onAnalytics,\n      children = _ref.children;\n  var lastUrlRef = useRef();\n  var sendAnalytics = useCallback(function (data) {\n    return onAnalytics && onAnalytics(data);\n  }, [onAnalytics]);\n  useEffect(function () {\n    var observer;\n\n    if (onAnalytics) {\n      observer = new window.MutationObserver(function () {\n        var _window, _window$location;\n\n        var url = (_window = window) == null ? void 0 : (_window$location = _window.location) == null ? void 0 : _window$location.href;\n        var previousUrl = lastUrlRef.current;\n\n        if (url !== previousUrl) {\n          lastUrlRef.current = url;\n          sendAnalytics({\n            type: 'pageView',\n            url: url,\n            previousUrl: previousUrl\n          });\n        }\n      });\n      observer.observe(document, {\n        subtree: true,\n        childList: true\n      });\n    }\n\n    return function () {\n      var _observer;\n\n      return (_observer = observer) == null ? void 0 : _observer.disconnect();\n    };\n  }, [sendAnalytics, onAnalytics]);\n  return /*#__PURE__*/React.createElement(AnalyticsContext.Provider, {\n    value: sendAnalytics\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}