{"ast":null,"code":"var _excluded = [\"fill\", \"color\", \"continents\", \"hoverColor\", \"onSelectPlace\", \"places\"],\n    _excluded2 = [\"location\"],\n    _excluded3 = [\"color\", \"onClick\", \"onHover\"],\n    _excluded4 = [\"color\", \"coords\", \"content\", \"dropProps\", \"key\", \"name\", \"onClick\", \"onHover\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Drop } from '../Drop';\nimport { defaultProps } from '../../default-props';\nimport { normalizeColor, parseMetricToNum } from '../../utils';\nimport { StyledWorldMap } from './StyledWorldMap';\nimport { WorldMapPropTypes } from './propTypes'; // The graphic is drawn as a rectangular grid using coordinates spaced\n// by FACTOR pixels.\n\nvar FACTOR = 10; // Mapping constants between coordinates and latitude+longitude.\n// The map coordinate space isn't precisely a mercator projection. So,\n// we have a few adjustments that we've empirically determined. The following\n// cities were used to make the empirical determinations:\n// London (0 lon), Quito (0 lat), Nome (far west), Sydney (far east),\n// Svalbard (far north), Ushuaia (far south).\n// These map to reality, they aren't adjusted.\n\nvar EQUATOR_Y = 32;\nvar WIDTH = 93; // Scale the latitude and longitude to align better with actual locations.\n\nvar LAT_SCALE = 0.98; // adjust more extreme latitudes to fit with the map dots better\n\nvar LAT_EXTREME_SCALE = 0.91;\nvar LON_SCALE = 0.99; // We shift the map coordinates to align better with actual locations.\n\nvar X_OFFSET = -2;\nvar Y_OFFSET = -2; // The continents have both an area boundary for interaction\n// and dots described as rows where each row is described by three values:\n// a starting coordinate and a length. This approach is more efficient than\n// describing it via SVG elements, keeping the code/library size smaller.\n\nvar CONTINENTS = [{\n  name: 'Australia',\n  origin: [74, 32],\n  area: [[4, 0], [7, 1], [15, 7], [13, 9], [8, 8], [0, 6], [0, 2]],\n  dots: [[4, 0, 1], [2, 1, 6], [0, 2, 9], [0, 3, 10], [0, 4, 10], [0, 5, 3], [5, 5, 5], [5, 6, 4], [8, 8, 1], [15, 7, 1], [14, 8, 1], [13, 9, 1]]\n}, {\n  name: 'Asia',\n  origin: [52, 1],\n  area: [[16, 0], [38, 5], [40, 7], [28, 17], [24, 25], [29, 29], [19, 29], [11, 24], [3, 23], [0, 20], [0, 19], [6, 13], [7, 6]],\n  dots: [[16, 0, 1], [17, 1, 2], [18, 2, 2], [15, 3, 6], [28, 3, 1], [30, 3, 1], [10, 4, 2], [13, 4, 10], [24, 4, 1], [9, 5, 22], [32, 5, 1], [38, 5, 1], [7, 6, 2], [10, 6, 1], [12, 6, 27], [7, 7, 34], [7, 8, 31], [7, 9, 26], [34, 9, 3], [7, 10, 22], [31, 10, 1], [33, 10, 1], [7, 11, 21], [32, 11, 2], [7, 12, 21], [32, 12, 1], [6, 13, 22], [32, 13, 1], [6, 14, 22], [5, 15, 22], [3, 16, 2], [6, 16, 20], [2, 17, 3], [6, 17, 16], [24, 17, 1], [28, 17, 1], [1, 18, 22], [26, 18, 2], [0, 19, 24], [0, 20, 5], [6, 20, 17], [2, 21, 5], [10, 21, 14], [2, 22, 5], [11, 22, 4], [16, 22, 4], [3, 23, 3], [11, 23, 2], [17, 23, 3], [23, 23, 1], [11, 24, 2], [18, 24, 2], [23, 24, 1], [24, 25, 1], [18, 26, 1], [22, 26, 1], [18, 27, 1], [20, 27, 4], [18, 28, 1], [21, 28, 1], [23, 28, 1], [26, 28, 3], [19, 29, 1], [28, 29, 2]]\n}, {\n  name: 'Africa',\n  origin: [40, 19],\n  area: [[3, 0], [6, 0], [11, 2], [16, 7], [16, 15], [11, 18], [9, 18], [0, 6], [0, 3]],\n  dots: [[3, 0, 4], [2, 1, 6], [9, 1, 2], [1, 2, 11], [0, 3, 13], [0, 4, 14], [0, 5, 14], [0, 6, 16], [1, 7, 16], [2, 8, 2], [6, 8, 11], [7, 9, 9], [7, 10, 8], [7, 11, 7], [8, 12, 7], [7, 13, 8], [7, 14, 7], [16, 14, 1], [8, 15, 5], [15, 15, 2], [8, 16, 5], [9, 17, 3], [9, 18, 3]]\n}, {\n  name: 'Europe',\n  origin: [39, 2],\n  area: [[8, 0], [10, 0], [20, 2], [19, 11], [18, 13], [14, 16], [3, 16], [0, 7]],\n  dots: [[8, 0, 3], [9, 1, 1], [20, 2, 1], [19, 3, 1], [12, 4, 1], [19, 4, 1], [9, 5, 6], [9, 6, 7], [17, 6, 3], [0, 7, 1], [8, 7, 12], [7, 8, 3], [11, 8, 9], [7, 9, 3], [11, 9, 9], [4, 10, 1], [7, 10, 1], [9, 10, 1], [11, 10, 9], [3, 11, 2], [7, 11, 13], [4, 12, 1], [6, 12, 13], [4, 13, 15], [5, 14, 3], [9, 14, 4], [15, 14, 2], [3, 15, 3], [8, 15, 1], [10, 15, 5], [6, 15, 2], [3, 16, 2], [10, 16, 5]]\n}, {\n  name: 'South America',\n  origin: [22, 26],\n  area: [[2, 0], [5, 0], [11, 4], [11, 8], [3, 18], [2, 17], [0, 4], [0, 3]],\n  dots: [[2, 0, 4], [1, 1, 7], [1, 2, 7], [0, 3, 10], [0, 4, 12], [1, 5, 11], [2, 6, 9], [3, 7, 8], [3, 8, 8], [3, 9, 6], [3, 10, 6], [3, 11, 5], [3, 12, 3], [2, 13, 3], [2, 14, 3], [2, 15, 2], [2, 16, 2], [2, 17, 2], [3, 18, 1]]\n}, {\n  name: 'North America',\n  origin: [0, 0],\n  area: [[21, 0], [39, 0], [39, 6], [22, 26], [16, 23], [2, 12], [0, 7]],\n  dots: [[22, 0, 6], [29, 0, 1], [31, 0, 1], [33, 0, 5], [20, 1, 1], [22, 1, 1], [24, 1, 2], [27, 1, 13], [17, 2, 1], [20, 2, 5], [26, 2, 13], [13, 3, 1], [19, 3, 1], [21, 3, 3], [26, 3, 14], [14, 4, 1], [16, 4, 4], [21, 4, 3], [29, 4, 11], [12, 5, 3], [16, 5, 1], [18, 5, 1], [20, 5, 3], [24, 5, 1], [30, 5, 8], [14, 6, 3], [19, 6, 1], [22, 6, 4], [31, 6, 8], [0, 7, 15], [16, 7, 1], [18, 7, 4], [24, 7, 2], [30, 7, 7], [2, 8, 20], [24, 8, 3], [29, 8, 5], [2, 9, 20], [24, 9, 2], [30, 9, 3], [1, 10, 18], [23, 10, 2], [31, 10, 1], [2, 11, 2], [8, 11, 11], [23, 11, 2], [26, 11, 1], [2, 12, 1], [8, 12, 13], [24, 12, 3], [10, 13, 12], [23, 13, 5], [11, 14, 17], [11, 15, 9], [21, 15, 6], [28, 15, 2], [11, 16, 11], [23, 16, 4], [11, 17, 14], [12, 18, 11], [12, 19, 12], [13, 20, 9], [15, 21, 3], [22, 21, 1], [16, 22, 2], [16, 23, 2], [20, 23, 1], [23, 23, 1], [18, 24, 3], [21, 25, 1], [22, 26, 1]]\n}];\n\nvar mergeBounds = function mergeBounds(bounds1, bounds2) {\n  return [bounds1 ? Math.min(bounds1[0], bounds2[0]) : bounds2[0], bounds1 ? Math.min(bounds1[1], bounds2[1]) : bounds2[1], bounds1 ? Math.max(bounds1[2], bounds2[2]) : bounds2[2], bounds1 ? Math.max(bounds1[3], bounds2[3]) : bounds2[3]];\n};\n\nvar midPoint = function midPoint(bounds) {\n  return [bounds[0] + (bounds[2] - bounds[0]) / 2, bounds[1] + (bounds[3] - bounds[1]) / 2];\n}; // from https://stackoverflow.com/a/14457180/8513067\n\n\nvar latLonToCoord = function latLonToCoord(_ref) {\n  var lat = _ref[0],\n      lon = _ref[1];\n  var scaledLon = lon * LON_SCALE;\n  var x = Math.round((scaledLon + 180) * (WIDTH / 360)); // adjust more extreme latitudes to fit with the map dots better\n\n  var scaledLat = lat * (lat > 60 || lat < -50 ? LAT_EXTREME_SCALE : LAT_SCALE);\n  var latRad = scaledLat * Math.PI / 180;\n  var mercN = Math.log(Math.tan(Math.PI / 4 + latRad / 2));\n  var y = Math.round(EQUATOR_Y - WIDTH * mercN / (2 * Math.PI));\n  return [x + X_OFFSET, y + Y_OFFSET];\n};\n\nvar coordToLatLon = function coordToLatLon(_ref2) {\n  var x = _ref2[0],\n      y = _ref2[1];\n  var mercN = (EQUATOR_Y - (y - Y_OFFSET)) * (2 * Math.PI) / WIDTH;\n  var latRad = (Math.atan(Math.exp(mercN)) - Math.PI / 4) * 2;\n  var scaledLat = latRad * 180 / Math.PI / LAT_SCALE; // adjust more extreme latitudes to fit with the map dots better\n\n  var lat = scaledLat / (scaledLat > 60 || scaledLat < -50 ? LAT_EXTREME_SCALE : LAT_SCALE);\n  var lon = (x - X_OFFSET) * 360 / WIDTH - 180;\n  return [lat, lon];\n};\n\nvar buildContinent = function buildContinent(_ref3) {\n  var areaProp = _ref3.area,\n      dotsProp = _ref3.dots,\n      name = _ref3.name,\n      origin = _ref3.origin;\n  var bounds = [origin[0], origin[1], origin[0], origin[1]];\n  var dots = dotsProp.map(function (segment) {\n    var count = segment[2];\n    var spots = [];\n\n    for (var i = 0; i < count; i += 1) {\n      spots.push('h0');\n    }\n\n    var dotCommands = spots.join(' m10,0 ');\n    var x = FACTOR * (origin[0] + segment[0] + 1);\n    var y = FACTOR * (origin[1] + segment[1] + 1);\n    bounds = mergeBounds(bounds, [origin[0], origin[1], origin[0] + segment[0] + segment[2], origin[1] + segment[1]]);\n    return \"M\" + x + \",\" + y + \" \" + dotCommands;\n  }).join(' ');\n  var area = areaProp.map(function (point, index) {\n    var x = FACTOR * (point[0] + origin[0] + 1);\n    var y = FACTOR * (point[1] + origin[1] + 1);\n    return \"\" + (index === 0 ? 'M' : 'L') + x + \",\" + y;\n  }).join(' ') + \" Z\";\n  var mid = midPoint(bounds);\n  return {\n    area: area,\n    dots: dots,\n    name: name,\n    origin: origin,\n    bounds: bounds,\n    mid: mid\n  };\n};\n\nvar buildWorld = function buildWorld() {\n  // Build the SVG paths describing the individual dots\n  var continents = CONTINENTS.map(buildContinent);\n  var bounds;\n  continents.forEach(function (continent) {\n    bounds = mergeBounds(bounds, continent.bounds);\n  });\n  return {\n    continents: continents,\n    bounds: bounds,\n    x: bounds[0] * FACTOR,\n    y: bounds[1] * FACTOR,\n    width: (bounds[2] - bounds[0] + 1) * FACTOR,\n    height: (bounds[3] - bounds[1] + 2) * FACTOR\n  };\n};\n\nvar buildInteractiveProps = function buildInteractiveProps(_ref4, activeFunc, active) {\n  var name = _ref4.name,\n      onClick = _ref4.onClick,\n      onHover = _ref4.onHover;\n  return {\n    role: 'button',\n    'aria-label': name,\n    tabIndex: '0',\n    onClick: onClick ? function () {\n      return onClick(name);\n    } : undefined,\n    onMouseOver: function onMouseOver() {\n      if (!active) {\n        activeFunc(name);\n\n        if (onHover) {\n          onHover(true);\n        }\n      }\n    },\n    onMouseLeave: function onMouseLeave() {\n      if (active) {\n        activeFunc(undefined);\n\n        if (onHover) {\n          onHover(false);\n        }\n      }\n    },\n    onFocus: function onFocus() {\n      // This moves the map unnecessarily. Instead, we should check\n      // the position and scroll if it isn't already visible\n      // this._worldMapRef.scrollIntoView();\n      if (!active) {\n        activeFunc(name);\n      }\n    },\n    onBlur: function onBlur() {\n      if (active) {\n        activeFunc(undefined);\n      }\n    }\n  };\n};\n\nvar WorldMap = /*#__PURE__*/forwardRef(function (_ref5, ref) {\n  var fill = _ref5.fill,\n      color = _ref5.color,\n      continentsProp = _ref5.continents,\n      hoverColor = _ref5.hoverColor,\n      onSelectPlace = _ref5.onSelectPlace,\n      placesProp = _ref5.places,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded);\n\n  var theme = React.useContext(ThemeContext);\n  var world = React.useMemo(buildWorld, []);\n\n  var _React$useState = React.useState({}),\n      continents = _React$useState[0],\n      setContinents = _React$useState[1];\n\n  React.useEffect(function () {\n    if (continentsProp) {\n      setContinents(continentsProp.reduce(function (obj, continent) {\n        // eslint-disable-next-line no-param-reassign\n        obj[continent.name] = continent;\n        return obj;\n      }, {}));\n    } else setContinents({});\n  }, [continentsProp]);\n\n  var _React$useState2 = React.useState([]),\n      places = _React$useState2[0],\n      setPlaces = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (placesProp) {\n      setPlaces(placesProp.map(function (_ref6) {\n        var location = _ref6.location,\n            place = _objectWithoutPropertiesLoose(_ref6, _excluded2);\n\n        var coords = latLonToCoord(location);\n        return _extends({\n          coords: coords,\n          key: location.join(',')\n        }, place);\n      }));\n    } else setPlaces([]);\n  }, [placesProp, world]);\n\n  var _React$useState3 = React.useState(),\n      over = _React$useState3[0],\n      setOver = _React$useState3[1];\n\n  var _React$useState4 = React.useState(),\n      activeCoords = _React$useState4[0],\n      setActiveCoords = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      activeContinent = _React$useState5[0],\n      setActiveContinent = _React$useState5[1];\n\n  var _React$useState6 = React.useState(),\n      activePlace = _React$useState6[0],\n      setActivePlace = _React$useState6[1];\n\n  var containerRef = React.useRef(); // targets are used for the Drops associated with places content\n\n  var _React$useState7 = React.useState([]),\n      targets = _React$useState7[0],\n      setTargets = _React$useState7[1];\n\n  var placeRef = React.useCallback(function (node, index) {\n    setTargets(function (prevTargets) {\n      if (!prevTargets[index]) {\n        var nextTargets = [].concat(prevTargets);\n        nextTargets[index] = node;\n        return nextTargets;\n      }\n\n      return prevTargets;\n    });\n  }, []);\n  var onMouseMove = React.useCallback(function (event) {\n    // determine the map coordinates for where the mouse is\n    // containerRef uses the group so we can handle aspect ratio scaling\n    var rect = containerRef.current.getBoundingClientRect(); // since the SVG viewBox might be scaled\n\n    var scale = rect.width / world.width;\n    var coords = [Math.round((event.clientX - rect.left) / scale / FACTOR), Math.round((event.clientY - rect.top) / scale / FACTOR)];\n    setActiveCoords(coords);\n  }, [world.width]);\n  var continentElements = world.continents.map(function (_ref7) {\n    var area = _ref7.area,\n        dots = _ref7.dots,\n        name = _ref7.name;\n\n    var _ref8 = continents[name] || {},\n        continentColor = _ref8.color,\n        onClick = _ref8.onClick,\n        onHover = _ref8.onHover,\n        restContinents = _objectWithoutPropertiesLoose(_ref8, _excluded3);\n\n    var active = activeContinent && activeContinent === name;\n    var interactiveProps = {};\n\n    if (onClick || onHover) {\n      interactiveProps = buildInteractiveProps(continents[name], function (activate) {\n        return setActiveContinent(activate);\n      }, active);\n    }\n\n    return /*#__PURE__*/React.createElement(\"g\", _extends({\n      key: name\n    }, interactiveProps, restContinents), /*#__PURE__*/React.createElement(\"path\", {\n      stroke: \"none\",\n      fill: \"#fff\",\n      fillOpacity: \"0.01\",\n      d: area\n    }), /*#__PURE__*/React.createElement(\"path\", {\n      d: dots,\n      strokeLinecap: \"round\",\n      strokeWidth: parseMetricToNum(theme.worldMap.continent[active ? 'active' : 'base']),\n      stroke: normalizeColor(continentColor || color || theme.worldMap.color, theme)\n    }));\n  });\n  var placesContent = [];\n  var placeElements = places.map(function (place, index) {\n    var placeColor = place.color,\n        coords = place.coords,\n        content = place.content,\n        dropProps = place.dropProps,\n        key = place.key,\n        name = place.name,\n        onClick = place.onClick,\n        onHover = place.onHover,\n        restPlace = _objectWithoutPropertiesLoose(place, _excluded4);\n\n    var d = \"M\" + FACTOR * coords[0] + \", \" + FACTOR * coords[1] + \" h0\";\n    var active = activePlace && activePlace === name;\n    var interactiveProps = {};\n\n    if (onClick || onHover) {\n      interactiveProps = buildInteractiveProps(place, function (activate) {\n        return setActivePlace(activate);\n      }, active);\n    }\n\n    if (content && targets[index]) {\n      placesContent.push( /*#__PURE__*/React.createElement(Drop, _extends({\n        key: key || name\n      }, dropProps, {\n        target: targets[index]\n      }), content));\n    }\n\n    return /*#__PURE__*/React.createElement(\"path\", _extends({\n      key: key,\n      ref: function ref(node) {\n        return placeRef(node, index);\n      },\n      strokeLinecap: \"round\",\n      strokeWidth: parseMetricToNum(theme.worldMap.place[active ? 'active' : 'base']),\n      stroke: normalizeColor(placeColor || color || theme.worldMap.color, theme)\n    }, interactiveProps, restPlace, {\n      d: d\n    }));\n  }); // If the caller is interested in onSelectPlace changes, track where the\n\n  var interactiveProps = {};\n\n  if (onSelectPlace) {\n    interactiveProps = {\n      onMouseOver: function onMouseOver() {\n        return setOver(true);\n      },\n      onMouseMove: over ? onMouseMove : undefined,\n      onMouseLeave: function onMouseLeave() {\n        setOver(false);\n        setActiveCoords(undefined);\n      }\n    };\n  }\n\n  var active;\n\n  if (activeCoords) {\n    var d = \"M\" + FACTOR * activeCoords[0] + \", \" + FACTOR * activeCoords[1] + \" h0\";\n    active = /*#__PURE__*/React.createElement(\"g\", {\n      stroke: \"none\",\n      fill: \"none\",\n      fillRule: \"evenodd\",\n      onClick: function onClick() {\n        return onSelectPlace(coordToLatLon(activeCoords, world.bounds));\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      strokeLinecap: \"round\",\n      strokeWidth: parseMetricToNum(theme.worldMap.place.active),\n      stroke: normalizeColor(hoverColor || color || theme.worldMap.hover.color, theme),\n      d: d\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledWorldMap, _extends({\n    ref: ref,\n    viewBox: world.x + \" \" + world.y + \" \" + world.width + \" \" + world.height,\n    preserveAspectRatio: \"xMinYMin meet\",\n    fillProp: fill,\n    width: world.width,\n    height: world.height\n  }, interactiveProps, rest), /*#__PURE__*/React.createElement(\"g\", {\n    ref: containerRef,\n    stroke: \"none\",\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, continentElements), placeElements, active), placesContent);\n});\nWorldMap.displayName = 'WorldMap';\nWorldMap.defaultProps = {};\nObject.setPrototypeOf(WorldMap.defaultProps, defaultProps);\nWorldMap.propTypes = WorldMapPropTypes;\nexport { WorldMap };","map":null,"metadata":{},"sourceType":"module"}