{"ast":null,"code":"var _excluded = [\"name\", \"value\", \"size\", \"onRemove\", \"onClick\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { FormClose } from 'grommet-icons/icons/FormClose';\nimport { defaultProps } from '../../default-props';\nimport { TagPropTypes } from './propTypes';\nimport { Box } from '../Box';\nimport { Text } from '../Text';\nimport { StyledRemoveButton, StyledTagButton } from './StyledTag';\nvar Tag = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _theme$tag$size, _theme$tag$size$size, _theme$tag$size2, _theme$tag$size2$size, _theme$tag$size3, _theme$tag$size3$size, _theme$tag$size4, _theme$tag$size4$size;\n\n  var name = _ref.name,\n      value = _ref.value,\n      size = _ref.size,\n      onRemove = _ref.onRemove,\n      onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var containerProps = _extends({\n    ref: ref,\n    align: 'center',\n    background: theme.tag.background,\n    border: theme.tag.border,\n    round: ((_theme$tag$size = theme.tag.size) == null ? void 0 : (_theme$tag$size$size = _theme$tag$size[size]) == null ? void 0 : _theme$tag$size$size.round) || theme.tag.round\n  }, rest);\n\n  var contents = /*#__PURE__*/React.createElement(Box, {\n    width: {\n      min: 'min-content'\n    },\n    pad: ((_theme$tag$size2 = theme.tag.size) == null ? void 0 : (_theme$tag$size2$size = _theme$tag$size2[size]) == null ? void 0 : _theme$tag$size2$size.pad) || theme.tag.pad\n  }, /*#__PURE__*/React.createElement(Text, {\n    size: size\n  }, name && /*#__PURE__*/React.createElement(Text, _extends({}, theme.tag.name, {\n    size: size\n  }), ' ', name), name && value ? /*#__PURE__*/React.createElement(Text, {\n    size: size\n  }, theme.tag.separator) : '', value && /*#__PURE__*/React.createElement(Text, _extends({}, theme.tag.value, {\n    size: size\n  }), value)));\n\n  if (onClick && onRemove) {\n    console.warn('Tag cannot combine \"onClick\" and \"onRemove\".');\n  }\n\n  return onRemove || !onClick ? /*#__PURE__*/React.createElement(Box, _extends({\n    flex: false,\n    direction: \"row\",\n    width: {\n      min: 'min-content'\n    }\n  }, containerProps), contents, onRemove && /*#__PURE__*/React.createElement(StyledRemoveButton, _extends({\n    onClick: onRemove,\n    plain: true,\n    hoverIndicator: true,\n    focusIndicator: true,\n    icon: /*#__PURE__*/React.createElement(FormClose, (_theme$tag$size3 = theme.tag.size) == null ? void 0 : (_theme$tag$size3$size = _theme$tag$size3[size]) == null ? void 0 : _theme$tag$size3$size.icon),\n    round: ((_theme$tag$size4 = theme.tag.size) == null ? void 0 : (_theme$tag$size4$size = _theme$tag$size4[size]) == null ? void 0 : _theme$tag$size4$size.round) || theme.tag.round\n  }, theme.tag.remove))) : /*#__PURE__*/React.createElement(StyledTagButton, _extends({\n    flex: false,\n    plain: true,\n    onClick: onClick,\n    hoverIndicator: true,\n    focusIndicator: true\n  }, containerProps), contents);\n});\nTag.displayName = 'Tag';\nTag.prototype = TagPropTypes;\nexport { Tag };","map":null,"metadata":{},"sourceType":"module"}