{"ast":null,"code":"var _excluded = [\"background\", \"children\", \"full\", \"id\", \"margin\", \"modal\", \"onClickOutside\", \"onEsc\", \"plain\", \"position\", \"responsive\", \"target\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useMemo, useRef } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { FocusedContainer } from '../FocusedContainer';\nimport { Keyboard } from '../Keyboard';\nimport { ResponsiveContext } from '../../contexts/ResponsiveContext';\nimport { OptionsContext } from '../../contexts/OptionsContext';\nimport { ContainerTargetContext } from '../../contexts/ContainerTargetContext';\nimport { useAnalytics } from '../../contexts/AnalyticsContext';\nimport { backgroundIsDark, findVisibleParent, PortalContext } from '../../utils';\nimport { StyledLayer, StyledContainer, StyledOverlay } from './StyledLayer';\nvar HiddenAnchor = styled.a.withConfig({\n  displayName: \"LayerContainer__HiddenAnchor\",\n  componentId: \"sc-1srj14c-0\"\n})([\"width:0;height:0;overflow:hidden;position:absolute;\"]);\nvar defaultPortalContext = [];\nvar LayerContainer = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var background = _ref.background,\n      children = _ref.children,\n      _ref$full = _ref.full,\n      full = _ref$full === void 0 ? false : _ref$full,\n      id = _ref.id,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === void 0 ? 'none' : _ref$margin,\n      _ref$modal = _ref.modal,\n      modal = _ref$modal === void 0 ? true : _ref$modal,\n      onClickOutside = _ref.onClickOutside,\n      onEsc = _ref.onEsc,\n      plain = _ref.plain,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'center' : _ref$position,\n      _ref$responsive = _ref.responsive,\n      responsive = _ref$responsive === void 0 ? true : _ref$responsive,\n      layerTarget = _ref.target,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var containerTarget = useContext(ContainerTargetContext);\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var size = useContext(ResponsiveContext); // layerOptions was created to preserve backwards compatibility but\n  // should not be supported in v3\n\n  var _useContext = useContext(OptionsContext),\n      layerOptions = _useContext.layer;\n\n  var anchorRef = useRef();\n  var containerRef = useRef();\n  var layerRef = useRef();\n  var portalContext = useContext(PortalContext) || defaultPortalContext;\n  var portalId = useMemo(function () {\n    return portalContext.length;\n  }, [portalContext]);\n  var nextPortalContext = useMemo(function () {\n    return [].concat(portalContext, [portalId]);\n  }, [portalContext, portalId]);\n  var sendAnalytics = useAnalytics();\n  useEffect(function () {\n    var start = new Date();\n    var element = layerRef.current;\n    var isHidden = position === 'hidden';\n\n    if (!isHidden) {\n      sendAnalytics({\n        type: 'layerOpen',\n        element: element\n      });\n    }\n\n    return function () {\n      if (!isHidden) {\n        sendAnalytics({\n          type: 'layerClose',\n          element: element,\n          elapsed: new Date().getTime() - start.getTime()\n        });\n      }\n    };\n  }, [sendAnalytics, layerRef, position]);\n  useEffect(function () {\n    if (position !== 'hidden') {\n      var node = layerRef.current || containerRef.current || ref.current;\n      if (node && node.scrollIntoView) node.scrollIntoView(); // Once layer is open we make sure it has focus so that you\n      // can start tabbing inside the layer. If the caller put focus\n      // on an element already, we honor that. Otherwise, we put\n      // the focus in the hidden anchor.\n\n      var element = document.activeElement;\n\n      while (element) {\n        if (element === containerRef.current) {\n          // already have focus inside the container\n          break;\n        }\n\n        element = element.parentElement;\n      }\n\n      if (modal && !element && anchorRef.current) {\n        anchorRef.current.focus();\n      }\n    }\n  }, [modal, position, ref]);\n  useEffect(function () {\n    if (position !== 'hidden') {\n      var node = layerRef.current || containerRef.current || ref.current;\n      if (node && node.scrollIntoView) node.scrollIntoView();\n    }\n  }, [position, ref]);\n  useEffect(function () {\n    var onClickDocument = function onClickDocument(event) {\n      // determine which portal id the target is in, if any\n      var clickedPortalId = null;\n      var node = containerTarget === document.body ? event.target : event == null ? void 0 : event.path[0];\n\n      while (clickedPortalId === null && node !== document && node !== null) {\n        // check if user click occurred within the layer\n        var attr = node.getAttribute('data-g-portal-id');\n        if (attr !== null && attr !== '') clickedPortalId = parseInt(attr, 10); // loop upward through parents to see if clicked element is a child\n        // of the Layer. if so, click was inside Layer\n        else node = node.parentNode;\n      }\n\n      if ((clickedPortalId === null || portalContext.indexOf(clickedPortalId) !== -1) && node !== null) {\n        // if the click occurred outside of the Layer portal, call\n        // the user's onClickOutside function\n        onClickOutside(event);\n      }\n    }; // if user provides an onClickOutside function, listen for mousedown event\n\n\n    if (onClickOutside) {\n      document.addEventListener('mousedown', onClickDocument);\n    }\n\n    if (layerTarget) {\n      var updateBounds = function updateBounds() {\n        var windowWidth = window.innerWidth;\n        var windowHeight = window.innerHeight;\n        var target = findVisibleParent(layerTarget); // affects StyledLayer\n\n        var layer = layerRef.current;\n\n        if (layer && target) {\n          // clear prior styling\n          layer.style.left = '';\n          layer.style.top = '';\n          layer.style.bottom = '';\n          layer.style.width = ''; // get bounds\n\n          var targetRect = target.getBoundingClientRect();\n          var layerRect = layer.getBoundingClientRect(); // ensure that layer moves with the target\n\n          layer.style.left = targetRect.left + \"px\";\n          layer.style.right = windowWidth - targetRect.right + \"px\";\n          layer.style.top = targetRect.top + \"px\";\n          layer.style.bottom = windowHeight - targetRect.bottom + \"px\";\n          layer.style.maxHeight = targetRect.height;\n          layer.style.maxWidth = Math.min(layerRect.width, windowWidth);\n        }\n      };\n\n      updateBounds();\n      window.addEventListener('resize', updateBounds);\n      window.addEventListener('scroll', updateBounds, true);\n      return function () {\n        window.removeEventListener('resize', updateBounds);\n        window.removeEventListener('scroll', updateBounds, true);\n\n        if (onClickOutside) {\n          document.removeEventListener('mousedown', onClickDocument);\n        }\n      };\n    }\n\n    return function () {\n      if (onClickOutside) {\n        document.removeEventListener('mousedown', onClickDocument);\n      }\n    };\n  }, [containerTarget, layerTarget, onClickOutside, portalContext, portalId]);\n  var content = /*#__PURE__*/React.createElement(StyledContainer, _extends({\n    ref: ref || containerRef,\n    background: background,\n    elevation: theme.layer.container.elevation // layerOptions was created to preserve backwards compatibility but\n    // should not be supported in v3. In v3, this should always be\n    // ${id}__container\n    ,\n    id: layerOptions && layerOptions.singleId ? id + \"__container\" : id,\n    full: full,\n    margin: margin,\n    modal: modal\n  }, rest, {\n    position: position,\n    plain: plain,\n    responsive: responsive,\n    layerTarget: layerTarget,\n    dir: theme.dir // portalId is used to determine if click occurred inside\n    // or outside of the layer\n    ,\n    \"data-g-portal-id\": portalId\n  }), /*#__PURE__*/React.createElement(HiddenAnchor, {\n    ref: anchorRef,\n    tabIndex: \"-1\",\n    \"aria-hidden\": \"true\"\n  }), children);\n  content = /*#__PURE__*/React.createElement(StyledLayer, {\n    ref: layerRef,\n    id: id,\n    plain: plain,\n    position: position,\n    responsive: responsive,\n    layerTarget: layerTarget,\n    tabIndex: \"-1\",\n    dir: theme.dir\n  }, modal && /*#__PURE__*/React.createElement(StyledOverlay, {\n    plain: plain,\n    responsive: responsive,\n    onMouseDown: onClickOutside\n  }), content);\n\n  if (onEsc) {\n    content = /*#__PURE__*/React.createElement(Keyboard, {\n      onEsc: onEsc ? function (event) {\n        // prevent further capturing or bubbling of event to other\n        // child or parent elements\n        event.stopPropagation();\n        onEsc(event);\n      } : undefined,\n      target: modal === false ? 'document' : undefined\n    }, content);\n  }\n\n  var themeContextValue = useMemo(function () {\n    var dark = backgroundIsDark(theme.layer.background, theme);\n    return _extends({}, theme, {\n      dark: dark\n    });\n  }, [theme]);\n\n  if (theme.layer.background) {\n    var dark = themeContextValue.dark;\n\n    if (dark !== undefined && dark !== theme.dark) {\n      content = /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n        value: themeContextValue\n      }, content);\n    }\n  }\n\n  content = /*#__PURE__*/React.createElement(PortalContext.Provider, {\n    value: nextPortalContext\n  }, content);\n  var hitResponsiveBreakpoint = responsive && size === theme.layer.responsiveBreakpoint; // if layer is responsive and we've hit the breakpoint,\n  // the layer will be filling the viewport, so we want to\n  // restrict the scroll to the layer and not allow the\n  // body to scroll\n\n  if (modal || hitResponsiveBreakpoint) {\n    content = /*#__PURE__*/React.createElement(FocusedContainer, {\n      hidden: position === 'hidden' // if layer has a target, do not restrict scroll.\n      // restricting scroll could inhibit the user's\n      // ability to scroll the page while the layer is open.\n      ,\n      restrictScroll: !layerTarget || hitResponsiveBreakpoint ? true : undefined,\n      trapFocus: true\n    }, content);\n  }\n\n  return content;\n});\nexport { LayerContainer };","map":null,"metadata":{},"sourceType":"module"}