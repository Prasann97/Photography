{"ast":null,"code":"var _excluded = [\"cellProps\", \"columns\", \"data\", \"disabled\", \"groupBy\", \"groups\", \"groupState\", \"pinnedOffset\", \"primaryProperty\", \"onMore\", \"onSelect\", \"onToggle\", \"onUpdate\", \"replace\", \"rowProps\", \"selected\", \"size\", \"step\", \"verticalAlign\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useMemo } from 'react';\nimport { Cell } from './Cell';\nimport { ExpanderCell } from './ExpanderCell';\nimport { StyledDataTableBody, StyledDataTableRow } from './StyledDataTable';\nimport { CheckBox } from '../CheckBox/CheckBox';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { TableRow } from '../TableRow';\nimport { TableCell } from '../TableCell';\nimport { datumValue, normalizeRowCellProps } from './buildState';\nexport var GroupedBody = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var cellPropsProp = _ref.cellProps,\n      columns = _ref.columns,\n      data = _ref.data,\n      disabled = _ref.disabled,\n      groupBy = _ref.groupBy,\n      groups = _ref.groups,\n      groupState = _ref.groupState,\n      pinnedOffset = _ref.pinnedOffset,\n      primaryProperty = _ref.primaryProperty,\n      onMore = _ref.onMore,\n      onSelect = _ref.onSelect,\n      onToggle = _ref.onToggle,\n      onUpdate = _ref.onUpdate,\n      replace = _ref.replace,\n      rowProps = _ref.rowProps,\n      selected = _ref.selected,\n      size = _ref.size,\n      step = _ref.step,\n      verticalAlign = _ref.verticalAlign,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var items = useMemo(function () {\n    var nextItems = [];\n    groups.forEach(function (group) {\n      var _ref2 = groupState[group.key] || {\n        expanded: true\n      },\n          expanded = _ref2.expanded;\n\n      var memberCount = group.data.length;\n      var groupSelected = [];\n      var isGroupSelected = false;\n      var groupDisabled = [];\n      var isGroupDisabled = false;\n\n      if (memberCount > 1 || onUpdate && group.key) {\n        // need a header\n        var primaryKeys = group.data.map(function (datum) {\n          return datum[primaryProperty];\n        });\n        groupSelected = primaryKeys && selected ? primaryKeys.filter(function (val) {\n          return selected.includes(val);\n        }) : [];\n        isGroupSelected = groupBy.select ? groupBy.select[group.key] === 'all' : groupSelected.length === group.data.length && groupSelected.length > 0;\n        var indeterminate = groupBy.select ? groupBy.select[group.key] === 'some' : groupSelected.length > 0 && groupSelected.length < group.data.length;\n        groupDisabled = primaryKeys && disabled ? primaryKeys.filter(function (val) {\n          return disabled.includes(val);\n        }) : [];\n        isGroupDisabled = groupBy.disable ? groupBy.disable[group.key] === 'all' : groupDisabled.length === group.data.length && groupDisabled.length > 0;\n        nextItems.push({\n          expanded: expanded,\n          key: group.key,\n          datum: group.datum,\n          context: 'groupHeader',\n          isDisabled: isGroupDisabled,\n          isSelected: isGroupSelected,\n          indeterminate: indeterminate,\n          onChange: function onChange() {\n            var nextSelected = isGroupSelected || indeterminate ? selected.filter(function (s) {\n              return !groupSelected.includes(s);\n            }) : [].concat(selected, primaryKeys);\n\n            if (groupBy.onSelect) {\n              groupBy.onSelect(nextSelected, group.datum, groupBy.select);\n            } else {\n              onSelect(nextSelected, group.datum);\n            }\n          }\n        });\n      }\n\n      if (!onUpdate && memberCount === 1 || expanded) {\n        // add the group members\n        group.data.forEach(function (datum, index) {\n          var primaryValue = primaryProperty ? datumValue(datum, primaryProperty) : undefined;\n          var isSelected = selected == null ? void 0 : selected.includes(primaryValue);\n          var isDisabled = disabled == null ? void 0 : disabled.includes(primaryValue);\n          nextItems.push({\n            key: datum[primaryProperty],\n            primaryValue: primaryProperty ? datumValue(datum, primaryProperty) : undefined,\n            datum: datum,\n            context: memberCount > 1 && index === memberCount - 1 ? 'groupEnd' : 'body',\n            isDisabled: isDisabled,\n            isSelected: isSelected,\n            onChange: function onChange() {\n              var nextSelected = isSelected ? selected.filter(function (s) {\n                return s !== primaryValue;\n              }) : [].concat(selected, [primaryValue]);\n              onSelect(nextSelected, datum);\n            }\n          });\n        });\n      }\n    });\n    return nextItems;\n  }, [disabled, groups, groupBy, groupState, primaryProperty, selected, onSelect, onUpdate]);\n  return /*#__PURE__*/React.createElement(StyledDataTableBody, _extends({\n    ref: ref,\n    size: size\n  }, rest), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    items: items,\n    onMore: onMore,\n    replace: replace,\n    renderMarker: function renderMarker(marker) {\n      return /*#__PURE__*/React.createElement(TableRow, null, /*#__PURE__*/React.createElement(TableCell, null, marker));\n    },\n    step: step\n  }, function (row, index, rowRef) {\n    var context = row.context,\n        datum = row.datum,\n        expanded = row.expanded,\n        indeterminate = row.indeterminate,\n        isDisabled = row.isDisabled,\n        isSelected = row.isSelected,\n        key = row.key,\n        onChange = row.onChange,\n        primaryValue = row.primaryValue;\n    var cellProps = normalizeRowCellProps(rowProps, cellPropsProp, primaryValue, index);\n    return /*#__PURE__*/React.createElement(StyledDataTableRow, {\n      ref: rowRef,\n      key: key,\n      size: size\n    }, /*#__PURE__*/React.createElement(ExpanderCell, {\n      background: cellProps.background,\n      border: cellProps.border,\n      context: context,\n      pad: cellProps.pad,\n      onToggle: context === 'groupHeader' ? onToggle(key) : undefined,\n      expanded: expanded,\n      verticalAlign: verticalAlign\n    }), (selected || onSelect) && /*#__PURE__*/React.createElement(TableCell, {\n      background: cellProps.background,\n      plain: \"noPad\",\n      size: \"auto\",\n      verticalAlign: verticalAlign,\n      \"aria-disabled\": isDisabled || !onSelect || undefined\n    }, /*#__PURE__*/React.createElement(CheckBox, {\n      a11yTitle: (isSelected ? 'unselect' : 'select') + \" \" + (context === 'groupHeader' ? key : primaryValue),\n      checked: isSelected,\n      indeterminate: indeterminate,\n      disabled: isDisabled || !onSelect,\n      onChange: onChange,\n      pad: cellProps.pad\n    })), columns.map(function (column) {\n      var scope;\n\n      if (context === 'groupHeader') {\n        scope = column.property === groupBy.property ? 'row' : undefined;\n      } else {\n        scope = column.primary ? 'row' : undefined;\n      }\n\n      return /*#__PURE__*/React.createElement(Cell, {\n        key: column.property,\n        background: cellProps.background,\n        border: cellProps.border,\n        context: context,\n        column: column,\n        datum: datum,\n        pad: cellProps.pad,\n        scope: scope,\n        pinnedOffset: context === 'groupHeader' && pinnedOffset && pinnedOffset[column.property],\n        verticalAlign: verticalAlign\n      });\n    }));\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}