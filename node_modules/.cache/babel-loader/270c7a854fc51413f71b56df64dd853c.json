{"ast":null,"code":"var _excluded = [\"background\", \"max\", \"round\", \"size\", \"thickness\", \"type\", \"values\"],\n    _excluded2 = [\"color\", \"highlight\", \"label\", \"onHover\", \"value\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { arcCommands, parseMetricToNum, translateEndAngle } from '../../utils';\nimport { StyledMeter } from './StyledMeter';\nimport { strokeProps, defaultColor } from './utils';\nvar Circle = /*#__PURE__*/forwardRef(function (props, ref) {\n  var background = props.background,\n      max = props.max,\n      round = props.round,\n      size = props.size,\n      thickness = props.thickness,\n      type = props.type,\n      values = props.values,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var theme = useContext(ThemeContext);\n  var width = size === 'full' ? 288 : parseMetricToNum(theme.global.size[size] || size);\n  var strokeWidth = type === 'pie' ? width / 2 : parseMetricToNum(theme.global.edgeSize[thickness] || thickness);\n  var centerX = width / 2;\n  var centerY = width / 2;\n  var radius = width / 2 - strokeWidth / 2; // truncate to avoid floating point arithmetic errors\n  // see: https://github.com/grommet/grommet/issues/6190\n  // Choose a scale factor at least 3 orders of magnitude above max\n\n  var scalePower = Math.max(5, Math.ceil(Math.log10(max)) + 3);\n  var scale = Math.pow(10, scalePower);\n  var anglePer = Math.floor((type === 'semicircle' ? 180 : 360) / max * scale) / scale; //  (type === 'semicircle' ? 180 : 360) / max;\n\n  var someHighlight = (values || []).some(function (v) {\n    return v.highlight;\n  });\n  var startValue = 0;\n  var startAngle = type === 'semicircle' ? 270 : 0;\n  var paths = [];\n  var pathCaps = [];\n  (values || []).filter(function (v) {\n    return v.value > 0;\n  }).forEach(function (valueArg, index) {\n    var color = valueArg.color,\n        highlight = valueArg.highlight,\n        label = valueArg.label,\n        onHover = valueArg.onHover,\n        value = valueArg.value,\n        pathRest = _objectWithoutPropertiesLoose(valueArg, _excluded2);\n\n    var key = \"p-\" + index;\n    var colorName = color || defaultColor(index, theme, values ? values.length : 0);\n    var endAngle;\n\n    if (startValue + value >= max) {\n      endAngle = type === 'semicircle' ? 90 : 360;\n    } else {\n      endAngle = translateEndAngle(startAngle, anglePer, value);\n    }\n\n    var hoverProps;\n\n    if (onHover) {\n      hoverProps = {\n        onMouseOver: function onMouseOver() {\n          return onHover(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return onHover(false);\n        }\n      };\n    }\n\n    var stroke = strokeProps(someHighlight && !highlight ? background : colorName, theme);\n\n    if (round) {\n      var d1 = arcCommands(centerX, centerY, radius, startAngle, endAngle);\n      paths.unshift( /*#__PURE__*/React.createElement(\"path\", _extends({\n        key: key,\n        d: d1,\n        fill: \"none\"\n      }, stroke, {\n        strokeWidth: strokeWidth,\n        strokeLinecap: \"round\"\n      }, hoverProps, pathRest))); // To handle situations where the last values are small, redraw\n      // a dot at the end. Give just a bit of angle to avoid anti-aliasing\n      // leakage around the edge.\n\n      var d2 = arcCommands(centerX, centerY, radius, endAngle - 0.5, endAngle);\n      var pathCap = /*#__PURE__*/React.createElement(\"path\", _extends({\n        key: key + \"-\",\n        d: d2,\n        fill: \"none\"\n      }, stroke, {\n        strokeWidth: strokeWidth,\n        strokeLinecap: \"round\"\n      }, hoverProps, pathRest)); // If we are on a large enough path to not need re-drawing previous\n      // ones, clear the pathCaps we've collected already.\n\n      if (endAngle - startAngle > 2 * anglePer) {\n        pathCaps = [];\n      }\n\n      pathCaps.unshift(pathCap);\n    } else {\n      var d = arcCommands(centerX, centerY, radius, startAngle, endAngle);\n      paths.push( /*#__PURE__*/React.createElement(\"path\", _extends({\n        key: key,\n        d: d,\n        fill: \"none\"\n      }, stroke, {\n        strokeWidth: strokeWidth,\n        strokeLinecap: \"butt\"\n      }, hoverProps, pathRest)));\n    }\n\n    startValue += value;\n    startAngle = endAngle;\n  });\n  var track;\n\n  if (type === 'semicircle') {\n    var d1 = arcCommands(centerX, centerY, radius, 270, 90);\n    track = /*#__PURE__*/React.createElement(\"path\", _extends({\n      d: d1,\n      strokeWidth: strokeWidth,\n      fill: \"none\"\n    }, strokeProps(background, theme), {\n      strokeLinecap: round ? 'round' : 'square'\n    }));\n  } else {\n    track = /*#__PURE__*/React.createElement(\"circle\", _extends({\n      cx: centerX,\n      cy: centerY,\n      r: radius\n    }, strokeProps(background, theme), {\n      strokeWidth: strokeWidth,\n      strokeLinecap: round ? 'round' : 'square',\n      fill: \"none\"\n    }));\n  }\n\n  var viewBoxHeight = type === 'semicircle' ? width / 2 : width;\n  return /*#__PURE__*/React.createElement(StyledMeter, _extends({\n    ref: ref,\n    viewBox: \"0 0 \" + width + \" \" + viewBoxHeight,\n    width: size === 'full' ? '100%' : width,\n    height: size === 'full' ? '100%' : viewBoxHeight\n  }, rest), track, paths, pathCaps);\n});\nCircle.displayName = 'Circle';\nCircle.defaultProps = {};\nObject.setPrototypeOf(Circle.defaultProps, defaultProps);\nexport { Circle };","map":null,"metadata":{},"sourceType":"module"}