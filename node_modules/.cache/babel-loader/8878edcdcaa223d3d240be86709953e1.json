{"ast":null,"code":"var _excluded = [\"a11yTitle\", \"aria-label\", \"action\", \"as\", \"background\", \"border\", \"children\", \"data\", \"defaultItemProps\", \"disabled\", \"focus\", \"itemKey\", \"itemProps\", \"onActive\", \"onClickItem\", \"onKeyDown\", \"onMore\", \"onOrder\", \"pad\", \"paginate\", \"primaryKey\", \"secondaryKey\", \"show\", \"step\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { Fragment, useContext, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Pagination } from '../Pagination';\nimport { Text } from '../Text';\nimport { focusStyle, genericStyles, normalizeColor, normalizeShow, unfocusStyle, useForwardedRef, usePagination } from '../../utils';\nimport { useAnalytics } from '../../contexts/AnalyticsContext';\nimport { ListPropTypes } from './propTypes';\nvar StyledList = styled.ul.withConfig({\n  displayName: \"List__StyledList\",\n  componentId: \"sc-130gdqg-0\"\n})([\"list-style:none;\", \" padding:0;\", \" &:focus{\", \"}\", \"}\", \"}\"], function (props) {\n  return !props.margin && 'margin: 0;';\n}, genericStyles, function (props) {\n  return props.tabIndex >= 0 && focusStyle({\n    forceOutline: true,\n    skipSvgChildren: true\n  });\n}, function (props) {\n  return props.itemFocus && focusStyle({\n    forceOutline: true,\n    skipSvgChildren: true\n  });\n}, function (props) {\n  return props.theme.list && props.theme.list.extend;\n});\nvar StyledItem = styled(Box).withConfig({\n  displayName: \"List__StyledItem\",\n  componentId: \"sc-130gdqg-1\"\n})([\"\", \" \", \" &:focus{\", \"}\", \" &:hover{\", \"}\", \"\"], function (props) {\n  return props.onClick && !props.isDisabled && \"cursor: pointer;\";\n}, function (props) {\n  return props.draggable && !props.isDisabled && \"cursor: move;\";\n}, unfocusStyle({\n  forceOutline: true,\n  skipSvgChildren: true\n}), function (props) {\n  var _props$theme$list, _props$theme$list$ite;\n\n  var disabledStyle;\n\n  if (props.isDisabled && (_props$theme$list = props.theme.list) != null && (_props$theme$list$ite = _props$theme$list.item) != null && _props$theme$list$ite.disabled) {\n    var _props$theme$list$ite2 = props.theme.list.item.disabled,\n        color = _props$theme$list$ite2.color,\n        cursor = _props$theme$list$ite2.cursor;\n    disabledStyle = {\n      color: normalizeColor(color, props.theme),\n      cursor: cursor\n    };\n  }\n\n  return disabledStyle;\n}, function (props) {\n  return props.isDisabled && \"background-color: unset;\";\n}, function (props) {\n  return props.theme.list && props.theme.list.item && props.theme.list.item.extend;\n}); // when paginated, this wraps the data table and pagination component\n\nvar StyledContainer = styled(Box).withConfig({\n  displayName: \"List__StyledContainer\",\n  componentId: \"sc-130gdqg-2\"\n})([\"\", \";\"], function (props) {\n  return props.theme.list && props.theme.list.container && props.theme.list.container.extend;\n});\n\nvar normalize = function normalize(item, index, property) {\n  if (typeof property === 'function') {\n    return property(item, index);\n  }\n\n  return item[property];\n};\n\nvar reorder = function reorder(array, source, target) {\n  var result = array.slice(0);\n  var tmp = result[source];\n  if (source < target) for (var i = source; i < target; i += 1) {\n    result[i] = result[i + 1];\n  } else for (var _i = source; _i > target; _i -= 1) {\n    result[_i] = result[_i - 1];\n  }\n  result[target] = tmp;\n  return result;\n}; // Determine the primary content for a row. If the List\n// has a primaryKey defined this returns the item data\n// based on this primary key. If no primaryKey property\n// is defined this will return unknown. The intent of\n// the content from the primary key is that it is unique\n// within the list.\n\n\nvar getPrimaryContent = function getPrimaryContent(item, index, primaryKey) {\n  var primaryContent;\n\n  if (primaryKey) {\n    if (typeof primaryKey === 'function') {\n      primaryContent = primaryKey(item, index);\n    } else {\n      primaryContent = normalize(item, index, primaryKey);\n    }\n  }\n\n  return primaryContent;\n};\n\nvar getKey = function getKey(item, index, primaryContent) {\n  if (typeof primaryContent === 'string') {\n    return primaryContent;\n  }\n\n  return typeof item === 'string' ? item : index;\n};\n\nvar getItemId = function getItemId(item, index, primaryKey) {\n  var primaryContent = getPrimaryContent(item, index, primaryKey);\n  return getKey(item, index, primaryContent);\n};\n\nvar List = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      ariaLabel = _ref['aria-label'],\n      action = _ref.action,\n      as = _ref.as,\n      background = _ref.background,\n      border = _ref.border,\n      children = _ref.children,\n      data = _ref.data,\n      defaultItemProps = _ref.defaultItemProps,\n      disabledItems = _ref.disabled,\n      focus = _ref.focus,\n      itemKey = _ref.itemKey,\n      itemProps = _ref.itemProps,\n      onActive = _ref.onActive,\n      onClickItem = _ref.onClickItem,\n      onKeyDown = _ref.onKeyDown,\n      onMore = _ref.onMore,\n      onOrder = _ref.onOrder,\n      pad = _ref.pad,\n      paginate = _ref.paginate,\n      primaryKey = _ref.primaryKey,\n      secondaryKey = _ref.secondaryKey,\n      showProp = _ref.show,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? paginate ? 50 : undefined : _ref$step,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var listRef = useForwardedRef(ref);\n  var theme = useContext(ThemeContext); // active will be the index of the current 'active'\n  // control in the list. If the onOrder property is defined\n  // this will be the index of up or down control for ordering\n  // items in the list. In this case the item index of that\n  // control would be the active index / 2.\n  // If onOrder is not defined but onClickItem is (e.g. the\n  // List items are likely selectable), active will be the\n  // index of the item which is currently active.\n\n  var _useState = useState(),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useState2 = useState(),\n      lastActive = _useState2[0],\n      setLastActive = _useState2[1];\n\n  var updateActive = function updateActive(nextActive) {\n    setActive(nextActive); // we occasionally call updateActive with undefined when it already is so,\n    // no need to call onActive in that case\n\n    if (onActive && onClickItem && nextActive !== active) onActive(nextActive);\n  };\n\n  var _useState3 = useState(),\n      itemFocus = _useState3[0],\n      setItemFocus = _useState3[1];\n\n  var _useState4 = useState(),\n      dragging = _useState4[0],\n      setDragging = _useState4[1];\n\n  var _usePagination = usePagination(_extends({\n    data: data,\n    page: normalizeShow(showProp, step),\n    step: step\n  }, paginate)),\n      items = _usePagination[0],\n      paginationProps = _usePagination[1];\n\n  var Container = paginate ? StyledContainer : Fragment;\n  var containterProps = paginate ? _extends({}, theme.list.container) : undefined;\n\n  var _useState5 = useState(),\n      orderingData = _useState5[0],\n      setOrderingData = _useState5[1];\n\n  var draggingRef = useRef();\n  var sendAnalytics = useAnalytics();\n  var ariaProps = {\n    role: onClickItem || onOrder ? 'listbox' : 'list'\n  };\n\n  if (active >= 0) {\n    var activeId; // We have an item that is 'focused' within the list. This could\n    // be the list item or one of the up/down ordering buttons.\n    // We need to figure out an id of the thing that will be shown as active\n\n    if (onOrder) {\n      // figure out which arrow button will be the active one.\n      var buttonId = active % 2 ? 'MoveDown' : 'MoveUp';\n      var itemIndex = Math.trunc(active / 2);\n      activeId = \"\" + getItemId(data[itemIndex], itemIndex, primaryKey) + buttonId;\n    } else if (onClickItem) {\n      // The whole list item is active. Figure out an id\n      activeId = getItemId(data[active], active, primaryKey);\n    }\n\n    ariaProps['aria-activedescendant'] = activeId;\n  }\n\n  return /*#__PURE__*/React.createElement(Container, containterProps, /*#__PURE__*/React.createElement(Keyboard, {\n    onEnter: (onClickItem || onOrder) && active >= 0 ? function (event) {\n      if (onOrder) {\n        var index = Math.trunc(active / 2); // Call onOrder with the re-ordered data.\n        // Update the active control index so that the\n        // active control will stay on the same item\n        // even though it moved up or down.\n\n        if (active % 2) {\n          onOrder(reorder(data, index, index + 1));\n          updateActive(Math.min(active + 2, data.length * 2 - 2));\n        } else {\n          onOrder(reorder(data, index, index - 1));\n          updateActive(Math.max(active - 2, 1));\n        }\n      } else if (disabledItems != null && disabledItems.includes(typeof itemKey === 'function' ? itemKey(data[active]) : data[active])) {\n        event.preventDefault();\n      } else if (onClickItem) {\n        event.persist();\n        var adjustedEvent = event;\n        adjustedEvent.item = data[active];\n        adjustedEvent.index = active;\n        onClickItem(adjustedEvent);\n        sendAnalytics({\n          type: 'listItemClick',\n          element: listRef.current,\n          event: adjustedEvent,\n          item: data[active],\n          index: active\n        });\n      }\n    } : undefined,\n    onUp: (onClickItem || onOrder) && active ? function () {\n      var min = onOrder ? 1 : 0;\n      updateActive(Math.max(active - 1, min));\n    } : undefined,\n    onDown: (onClickItem || onOrder) && data && data.length ? function () {\n      var min = onOrder ? 1 : 0;\n      var max = onOrder ? data.length * 2 - 2 : data.length - 1;\n      updateActive(active >= min ? Math.min(active + 1, max) : min);\n    } : undefined,\n    onKeyDown: onKeyDown\n  }, /*#__PURE__*/React.createElement(StyledList, _extends({\n    \"aria-label\": ariaLabel || a11yTitle,\n    ref: listRef,\n    as: as || 'ul',\n    itemFocus: itemFocus,\n    tabIndex: onClickItem || onOrder ? 0 : undefined,\n    onFocus: function onFocus() {\n      return (// Fixes zero-th index showing undefined.\n        // Checks for active variable to stop bug where activeStyle\n        // gets applied to lastActive instead of the item the user\n        // is currently clicking on\n        !active && active !== 0 ? updateActive(lastActive) : updateActive(active)\n      );\n    },\n    onBlur: function onBlur() {\n      setLastActive(active);\n      updateActive(undefined);\n    }\n  }, ariaProps, rest), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    items: !paginate ? orderingData || data : items,\n    onMore: onMore,\n    show: !paginate ? showProp : undefined,\n    step: step,\n    renderMarker: function renderMarker(marker) {\n      return /*#__PURE__*/React.createElement(Box, {\n        as: \"li\",\n        flex: false\n      }, marker);\n    }\n  }, function (item, index) {\n    var content;\n    var boxProps = {};\n    var itemId;\n\n    if (children) {\n      content = children(item, index, onClickItem ? {\n        active: active === index\n      } : undefined);\n    } else if (primaryKey) {\n      if (typeof primaryKey === 'function') {\n        itemId = primaryKey(item, index);\n        content = itemId;\n      } else {\n        itemId = normalize(item, index, primaryKey);\n        content = /*#__PURE__*/React.createElement(Text, {\n          key: \"p\",\n          weight: \"bold\"\n        }, itemId);\n      }\n\n      if (secondaryKey) {\n        if (typeof secondaryKey === 'function') {\n          content = [content, secondaryKey(item, index)];\n        } else {\n          content = [content, /*#__PURE__*/React.createElement(Text, {\n            key: \"s\"\n          }, normalize(item, index, secondaryKey))];\n        }\n\n        boxProps = {\n          direction: 'row',\n          align: 'center',\n          justify: 'between',\n          gap: 'medium'\n        };\n      }\n    } else if (typeof item === 'object') {\n      content = item[Object.keys(item)[0]];\n    } else {\n      content = item;\n    }\n\n    if (itemKey) {\n      if (typeof itemKey === 'function') {\n        itemId = itemKey(item);\n      } else {\n        itemId = normalize(item, index, itemKey);\n      }\n    }\n\n    var key = itemKey ? itemId : getKey(item, index, itemId);\n    var isDisabled;\n\n    if (disabledItems) {\n      if (typeof item === 'object' && !itemKey) {\n        console.error( // eslint-disable-next-line max-len\n        \"Warning: Missing prop itemKey. Prop disabled requires itemKey to be specified when data is of type 'object'.\");\n      }\n\n      isDisabled = disabledItems == null ? void 0 : disabledItems.includes(key);\n    }\n\n    if (action) {\n      content = [/*#__PURE__*/React.createElement(Box, {\n        align: \"start\",\n        key: \"actionContainer\" + index\n      }, content), action(item, index)];\n      boxProps = {\n        direction: 'row',\n        align: secondaryKey ? 'start' : 'center',\n        justify: 'between',\n        gap: 'medium'\n      };\n    }\n\n    var adjustedBackground = background || theme.list.item.background;\n\n    if (!onOrder && active === index || dragging === index) {\n      adjustedBackground = theme.global.hover.background;\n    } else if (Array.isArray(adjustedBackground)) {\n      adjustedBackground = adjustedBackground[index % adjustedBackground.length];\n    }\n\n    var adjustedBorder = border !== undefined ? border : theme.list.item.border;\n\n    if (adjustedBorder === 'horizontal' && index) {\n      adjustedBorder = 'bottom';\n    }\n\n    var clickProps;\n\n    if (onClickItem && !onOrder) {\n      clickProps = {\n        role: 'option',\n        tabIndex: -1,\n        active: active === index,\n        onClick: function onClick(event) {\n          // Only prevent event when disabled. We still want screen\n          // readers to be aware that an option exists, but is in a\n          // disabled state.\n          if (isDisabled) {\n            event.preventDefault();\n          } else {\n            // extract from React's synthetic event pool\n            event.persist();\n            var adjustedEvent = event;\n            adjustedEvent.item = item;\n            adjustedEvent.index = index;\n            onClickItem(adjustedEvent); // put focus on the List container to meet WCAG\n            // accessibility guidelines that focus remains on `ul`\n\n            listRef.current.focus();\n            sendAnalytics({\n              type: 'listItemClick',\n              element: listRef.current,\n              event: adjustedEvent,\n              item: item,\n              index: index\n            });\n          }\n        },\n        onMouseOver: function onMouseOver() {\n          return updateActive(index);\n        },\n        onMouseOut: function onMouseOut() {\n          return updateActive(undefined);\n        },\n        onFocus: function onFocus() {\n          updateActive(index);\n          setItemFocus(true);\n        },\n        onBlur: function onBlur() {\n          updateActive(undefined);\n          setItemFocus(false);\n        }\n      };\n    }\n\n    var orderProps;\n    var orderControls;\n\n    if (onOrder) {\n      orderProps = {\n        draggable: true,\n        onDragStart: function onDragStart(event) {\n          event.dataTransfer.setData('text/plain', ''); // allowed per\n          // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API#define_the_drag_effect\n          // eslint-disable-next-line no-param-reassign\n\n          event.dataTransfer.effectAllowed = 'move';\n          setDragging(index);\n          updateActive(undefined);\n        },\n        onDragEnd: function onDragEnd() {\n          setDragging(undefined);\n          setOrderingData(undefined);\n        },\n        onDragOver: function onDragOver(event) {\n          if (dragging !== undefined) {\n            event.preventDefault();\n\n            if (dragging !== index) {\n              // eslint-disable-next-line no-param-reassign\n              event.dataTransfer.dropEffect = 'move';\n              setOrderingData(reorder(orderingData || data, dragging, index));\n              setDragging(index);\n            }\n          }\n        },\n        onDrop: function onDrop() {\n          if (orderingData) {\n            onOrder(orderingData);\n          }\n        },\n        ref: dragging === index ? draggingRef : undefined\n      };\n      var Up = theme.list.icons.up;\n      var Down = theme.list.icons.down;\n      orderControls = /*#__PURE__*/React.createElement(Box, {\n        direction: \"row\",\n        align: \"center\",\n        justify: \"end\"\n      }, /*#__PURE__*/React.createElement(Button, {\n        id: key + \"MoveUp\",\n        a11yTitle: index + 1 + \" \" + key + \" move up\",\n        icon: /*#__PURE__*/React.createElement(Up, null),\n        hoverIndicator: true,\n        focusIndicator: false,\n        disabled: !index,\n        active: active === index * 2,\n        onClick: function onClick(event) {\n          event.stopPropagation();\n          onOrder(reorder(data, index, index - 1));\n        },\n        tabIndex: -1,\n        onMouseOver: function onMouseOver() {\n          return updateActive(index * 2);\n        },\n        onMouseOut: function onMouseOut() {\n          return updateActive(undefined);\n        },\n        onFocus: function onFocus() {\n          updateActive(index * 2);\n          setItemFocus(true);\n        },\n        onBlur: function onBlur() {\n          updateActive(undefined);\n          setItemFocus(false);\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        id: key + \"MoveDown\",\n        a11yTitle: index + 1 + \" \" + key + \" move down\",\n        icon: /*#__PURE__*/React.createElement(Down, null),\n        hoverIndicator: true,\n        focusIndicator: false,\n        disabled: index >= data.length - 1,\n        active: active === index * 2 + 1,\n        onClick: function onClick(event) {\n          event.stopPropagation();\n          onOrder(reorder(data, index, index + 1));\n        },\n        tabIndex: -1,\n        onMouseOver: function onMouseOver() {\n          return updateActive(index * 2 + 1);\n        },\n        onMouseOut: function onMouseOut() {\n          return updateActive(undefined);\n        },\n        onFocus: function onFocus() {\n          updateActive(index * 2 + 1);\n          setItemFocus(true);\n        },\n        onBlur: function onBlur() {\n          updateActive(undefined);\n          setItemFocus(false);\n        }\n      }));\n      boxProps = {\n        direction: 'row',\n        align: defaultItemProps && defaultItemProps.align || 'center',\n        gap: 'medium'\n      };\n      content = /*#__PURE__*/React.createElement(Box, {\n        flex: true\n      }, content);\n    }\n\n    var itemAriaProps;\n\n    if (isDisabled) {\n      itemAriaProps = {\n        'aria-disabled': true\n      };\n\n      if (onClickItem) {\n        itemAriaProps = _extends({}, itemAriaProps, {\n          'aria-selected': false\n        });\n      }\n    }\n\n    if (itemProps && itemProps[index]) {\n      boxProps = _extends({}, boxProps, itemProps[index]);\n    }\n\n    return /*#__PURE__*/React.createElement(StyledItem, _extends({\n      key: key,\n      tag: \"li\",\n      background: adjustedBackground,\n      border: adjustedBorder,\n      isDisabled: isDisabled,\n      flex: false,\n      pad: pad || theme.list.item.pad\n    }, defaultItemProps, boxProps, clickProps, orderProps, itemAriaProps), onOrder && /*#__PURE__*/React.createElement(Text, null, index + 1), content, orderControls);\n  }))), paginate && data.length > step && items && items.length ? /*#__PURE__*/React.createElement(Pagination, _extends({\n    alignSelf: \"end\"\n  }, paginationProps)) : null);\n});\nList.displayName = 'List';\nList.propTypes = ListPropTypes;\nexport { List };","map":null,"metadata":{},"sourceType":"module"}