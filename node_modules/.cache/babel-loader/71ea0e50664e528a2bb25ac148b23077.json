{"ast":null,"code":"var _excluded = [\"children\", \"color\", \"tag\", \"as\", \"tip\", \"a11yTitle\", \"truncate\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useState } from 'react';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { StyledText } from './StyledText';\nimport { Tip } from '../Tip';\nimport { useForwardedRef } from '../../utils';\nimport { TextPropTypes } from './propTypes';\nvar Text = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      color = _ref.color,\n      tag = _ref.tag,\n      as = _ref.as,\n      tipProp = _ref.tip,\n      _ref$a11yTitle = _ref.a11yTitle,\n      a11yTitle = _ref$a11yTitle === void 0 ? typeof tipProp === 'string' && tipProp || (tipProp == null ? void 0 : tipProp.content) || undefined : _ref$a11yTitle,\n      truncate = _ref.truncate,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var textRef = useForwardedRef(ref);\n\n  var _useState = useState(false),\n      textTruncated = _useState[0],\n      setTextTruncated = _useState[1];\n\n  useLayoutEffect(function () {\n    var updateTip = function updateTip() {\n      setTextTruncated(false);\n\n      if (truncate === 'tip' && textRef.current && textRef.current.scrollWidth > textRef.current.offsetWidth) {\n        setTextTruncated(true);\n      }\n    };\n\n    window.addEventListener('resize', updateTip);\n    updateTip();\n    return function () {\n      return window.removeEventListener('resize', updateTip);\n    };\n  }, [textRef, truncate]);\n  var styledTextResult = /*#__PURE__*/React.createElement(StyledText, _extends({\n    as: !as && tag ? tag : as,\n    colorProp: color,\n    \"aria-label\": a11yTitle,\n    truncate: truncate\n  }, rest, {\n    ref: textRef\n  }), children);\n\n  if (tipProp || textTruncated) {\n    // place the text content in a tip if truncate === 'tip'\n    // and the text has been truncated\n    if (textTruncated) {\n      return /*#__PURE__*/React.createElement(Tip, _extends({\n        content: children\n      }, tipProp), styledTextResult);\n    } // place the text content in a tip if truncate !== 'tip'\n    // it displays even if the text has not truncated\n\n\n    if (truncate !== 'tip') {\n      return /*#__PURE__*/React.createElement(Tip, tipProp, styledTextResult);\n    }\n  }\n\n  return styledTextResult;\n});\nText.displayName = 'Text';\nText.defaultProps = {\n  level: 1\n};\nText.propTypes = TextPropTypes;\nexport { Text };","map":null,"metadata":{},"sourceType":"module"}