{"ast":null,"code":"var _excluded = [\"active\", \"align\", \"aria-label\", \"badge\", \"color\", \"children\", \"disabled\", \"icon\", \"focusIndicator\", \"gap\", \"fill\", \"href\", \"justify\", \"kind\", \"label\", \"onBlur\", \"onClick\", \"onFocus\", \"onMouseOut\", \"onMouseOver\", \"plain\", \"primary\", \"reverse\", \"secondary\", \"selected\", \"size\", \"tip\", \"type\", \"a11yTitle\", \"as\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { cloneElement, Children, forwardRef, useContext, useMemo, useState, useCallback } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { backgroundAndTextColors, colorIsDark, findButtonParent, normalizeBackground, normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { ButtonPropTypes } from './propTypes';\nimport { Box } from '../Box';\nimport { Tip } from '../Tip';\nimport { Badge } from './Badge';\nimport { StyledButton } from './StyledButton';\nimport { StyledButtonKind } from './StyledButtonKind';\nimport { useAnalytics } from '../../contexts/AnalyticsContext'; // We have two Styled* components to separate\n// the newer default|primary|secondary approach,\n// which we use the term \"kind\" to refer to,\n// from the previous approach. Hopefully, when we get to grommet v3,\n// we can drop the old way and just use kind.\n//\n// In the kind approach, we rely on the basic structure of the theme\n// being repeated. For example: button.default, button.active,\n// button.active.default all refer to a similar object containing\n// { background, border, color, padding }.\n// This allows us to use the same code to evaluate color and generate CSS.\n// We just need to build up CSS, since selectors override previous ones.\n// See StyledButtonKind.kindStyles() for this.\n// And we build down to determine icon color, once we have a color from\n// the latest applicable state, we can stop. See Button.getIconColor() for this.\n// backgroundAndTextColor() is used in both cases to ensure we are determining\n// color in the same way, so the icon and label align.\n// only when default is in the theme\n// Used to get the color for the icon to match what StyledButtonKind\n// and backgroundStyle() will do for the label.\n// The paths are ordered from basic to specific. Go through them\n// specific to base until we find one that has a color and use that.\n\nvar getIconColor = function getIconColor(paths, theme, colorProp, kind) {\n  if (paths === void 0) {\n    paths = [];\n  }\n\n  var result = [];\n  var index = paths.length - 1; // caller has specified a themeObj to use for styling\n  // relevant for cases like pagination which looks to theme.pagination.button\n\n  if (typeof kind === 'object') index = 0; // stop when we have a color or no more paths\n\n  while (index >= 0 && !result[1]) {\n    var baseObj = typeof kind === 'object' && kind || theme.button;\n    var obj = baseObj; // find sub-object under the button theme that corresponds with this path\n    // for example: 'active.primary'\n\n    if (paths[index]) {\n      var parts = paths[index].split('.');\n\n      while (obj && parts.length) {\n        obj = obj[parts.shift()];\n      }\n    }\n\n    if (obj) {\n      var _obj, _obj$icon, _obj$icon$props; // use passed in color for background if the theme has a background color\n\n\n      var background = colorProp && obj.background && obj.background.color ? colorProp : obj.background; // if theme object explicitly sets the color to undefined, pass false\n      // to indicate that the theme doesn't want any text color\n\n      var objColor = obj.color || (Object.prototype.hasOwnProperty.call(obj, 'color') && obj.color === undefined ? false : undefined);\n      var color = void 0;\n      if ((_obj = obj) != null && (_obj$icon = _obj.icon) != null && (_obj$icon$props = _obj$icon.props) != null && _obj$icon$props.color) color = obj.icon.props.color; // if no icon defined for this state, see if there is an icon\n      // with color defined at one higher level\n      else if (paths[index + 1]) {\n        var _obj2, _obj2$icon, _obj2$icon$props;\n\n        var _parts = paths[index + 1].split('.');\n\n        while (baseObj && _parts.length) {\n          obj = baseObj[_parts.shift()];\n        }\n\n        if ((_obj2 = obj) != null && (_obj2$icon = _obj2.icon) != null && (_obj2$icon$props = _obj2$icon.props) != null && _obj2$icon$props.color) color = obj.icon.props.color;\n      } // use passed in color for text if the theme doesn't have\n      // background or border color\n\n      if (!color) color = colorProp && (!obj.background || !obj.background.color) && (!obj.border || !obj.border.color) ? colorProp : objColor;\n      result = backgroundAndTextColors(background, color, theme);\n    }\n\n    index -= 1;\n  }\n\n  return result[1] || undefined;\n}; // get the icon for the current button state\n\n\nvar getKindIcon = function getKindIcon(paths, theme, kind) {\n  if (paths === void 0) {\n    paths = [];\n  }\n\n  var result;\n  var index = paths.length - 1; // caller has specified a themeObj to use for styling\n  // relevant for cases like pagination which looks to theme.pagination.button\n\n  if (typeof kind === 'object') index = 0; // stop when we have a color or no more paths\n\n  while (index >= 0 && !result) {\n    var _obj3;\n\n    var obj = typeof kind === 'object' && kind || theme.button; // find sub-object under the button theme that corresponds with this path\n    // for example: 'active.primary'\n\n    if (paths[index]) {\n      var parts = paths[index].split('.');\n\n      while (obj && parts.length) {\n        obj = obj[parts.shift()];\n      }\n    }\n\n    if ((_obj3 = obj) != null && _obj3.icon) result = obj.icon;\n    index -= 1;\n  }\n\n  return result || undefined;\n};\n\nvar getPropertyColor = function getPropertyColor(property, paths, theme, kind, primary) {\n  if (paths === void 0) {\n    paths = [];\n  }\n\n  var result;\n\n  if (kind) {\n    var obj = typeof kind === 'object' && kind || theme.button; // index 0 is default state\n\n    if (paths[0]) {\n      var parts = paths[0].split('.');\n\n      while (obj && parts.length) {\n        obj = obj[parts.shift()];\n      }\n    }\n\n    if (obj) {\n      result = obj[property] || obj[property] && obj[property].color;\n    }\n  } else if (primary && theme && theme.button && theme.button.primary) {\n    result = theme.button.primary[property] || theme.button.primary[property] && theme.button.primary[property].color;\n  } else {\n    result = theme && theme.button && theme.button[property] || theme && theme.button && theme.button[property] && theme.button[property].color;\n  }\n\n  return result;\n};\n\nvar Button = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _theme$button$kind;\n\n  var active = _ref.active,\n      _ref$align = _ref.align,\n      align = _ref$align === void 0 ? 'center' : _ref$align,\n      ariaLabel = _ref['aria-label'],\n      badgeProp = _ref.badge,\n      color = _ref.color,\n      children = _ref.children,\n      disabled = _ref.disabled,\n      icon = _ref.icon,\n      _ref$focusIndicator = _ref.focusIndicator,\n      focusIndicator = _ref$focusIndicator === void 0 ? true : _ref$focusIndicator,\n      gap = _ref.gap,\n      fill = _ref.fill,\n      href = _ref.href,\n      justify = _ref.justify,\n      kindArg = _ref.kind,\n      label = _ref.label,\n      _onBlur = _ref.onBlur,\n      onClickProp = _ref.onClick,\n      _onFocus = _ref.onFocus,\n      onMouseOut = _ref.onMouseOut,\n      onMouseOver = _ref.onMouseOver,\n      plain = _ref.plain,\n      primary = _ref.primary,\n      reverseProp = _ref.reverse,\n      secondary = _ref.secondary,\n      selected = _ref.selected,\n      size = _ref.size,\n      tip = _ref.tip,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'button' : _ref$type,\n      _ref$a11yTitle = _ref.a11yTitle,\n      a11yTitle = _ref$a11yTitle === void 0 ? typeof tip === 'string' ? tip : undefined : _ref$a11yTitle,\n      as = _ref.as,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _useState2 = useState(false),\n      hover = _useState2[0],\n      setHover = _useState2[1];\n\n  if ((icon || label) && children) {\n    console.warn('Button should not have children if icon or label is provided');\n  }\n\n  var sendAnalytics = useAnalytics();\n  var onClick = useCallback(function (event) {\n    sendAnalytics({\n      type: 'buttonClick',\n      element: findButtonParent(event.target),\n      event: event,\n      href: href,\n      label: typeof label === 'string' ? label : undefined\n    });\n    if (onClickProp) onClickProp(event);\n  }, [onClickProp, sendAnalytics, href, label]); // kindArg is object if we are referencing a theme object\n  // outside of theme.button\n\n  var kindObj = useMemo(function () {\n    return typeof kindArg === 'object';\n  }, [kindArg]); // if the theme has button.default, what kind of Button is this\n\n  var kind = useMemo(function () {\n    if (theme.button[\"default\"] || kindObj) {\n      if (kindArg) return kindArg;\n      if (primary) return 'primary';\n      if (secondary) return 'secondary';\n      return 'default';\n    }\n\n    return undefined; // pre-default, no kind\n  }, [kindArg, kindObj, primary, secondary, theme]); // When we have a kind and are not plain, themePaths stores the relative\n  // paths within the theme for the current kind and state of the button.\n  // These paths are used with getIconColor() above and kindStyle() within\n  // StyledButtonKind.\n\n  var themePaths = useMemo(function () {\n    if (!kind || plain) return undefined;\n    var result = {\n      base: [],\n      hover: []\n    };\n    if (!kindObj) result.base.push(kind);\n\n    if (selected) {\n      result.base.push('selected');\n      if (!kindObj) result.base.push(\"selected.\" + kind);\n    }\n\n    if (disabled) {\n      result.base.push('disabled');\n      if (!kindObj) result.base.push(\"disabled.\" + kind);\n    } else {\n      if (active) {\n        result.base.push('active');\n        if (!kindObj) result.base.push(\"active.\" + kind);\n      }\n\n      result.hover.push('hover');\n      if (!kindObj) result.hover.push(\"hover.\" + kind);\n\n      if (active) {\n        result.hover.push(\"hover.active\");\n\n        if (!kindObj) {\n          result.hover.push(\"hover.active.\" + kind);\n        }\n      }\n    }\n\n    return result;\n  }, [active, disabled, kind, kindObj, plain, selected]); // only used when theme does not have button.default\n\n  var isDarkBackground = function isDarkBackground() {\n    var backgroundColor = normalizeBackground(normalizeColor(color || theme.button.primary && theme.button.primary.color || theme.global.colors.control || 'brand', theme), theme);\n    return colorIsDark(backgroundColor, theme);\n  };\n\n  var onMouseOverButton = function onMouseOverButton(event) {\n    setHover(true);\n\n    if (onMouseOver) {\n      onMouseOver(event);\n    }\n  };\n\n  var onMouseOutButton = function onMouseOutButton(event) {\n    setHover(false);\n\n    if (onMouseOut) {\n      onMouseOut(event);\n    }\n  };\n\n  var kindIcon = hover && getKindIcon(themePaths == null ? void 0 : themePaths.hover, theme, kind) || getKindIcon(themePaths == null ? void 0 : themePaths.base, theme, kind);\n  var buttonIcon = icon || kindIcon; // only change color if user did not specify the color themselves...\n\n  if (icon && !icon.props.color) {\n    if (kind) {\n      if (!plain) {\n        // match what the label will use\n        var iconColor = hover && getIconColor(themePaths.hover, theme) || getIconColor(themePaths.base, theme, color, kind);\n        if (iconColor) buttonIcon = /*#__PURE__*/cloneElement(icon, {\n          color: iconColor\n        });\n      }\n    } else if (primary) {\n      buttonIcon = /*#__PURE__*/cloneElement(icon, {\n        color: theme.global.colors.text[isDarkBackground() ? 'dark' : 'light']\n      });\n    }\n  } else if (kindIcon && !plain) {\n    var _iconColor = hover && getIconColor(themePaths.hover, theme) || getIconColor(themePaths.base, theme, color, kind);\n\n    if (_iconColor) buttonIcon = /*#__PURE__*/cloneElement(kindIcon, {\n      color: _iconColor\n    });\n  }\n\n  var reverse = reverseProp != null ? reverseProp : (_theme$button$kind = theme.button[kind]) == null ? void 0 : _theme$button$kind.reverse;\n  var domTag = !as && href ? 'a' : as;\n  var first = reverse ? label : buttonIcon;\n  var second = reverse ? buttonIcon : label;\n  var contents;\n\n  if (first && second) {\n    contents = /*#__PURE__*/React.createElement(Box, {\n      direction: \"row\",\n      align: \"center\",\n      justify: justify || (align === 'center' ? 'center' : 'between'),\n      gap: gap || theme.button.gap,\n      responsive: false\n    }, first, second);\n  } else if (typeof children === 'function') {\n    contents = children({\n      disabled: disabled,\n      hover: hover,\n      focus: focus\n    });\n  } else {\n    contents = first || second || children;\n  }\n\n  var background = getPropertyColor('background', themePaths && themePaths.base, theme, kind, primary);\n  var border = getPropertyColor('border', themePaths && themePaths.base, theme, kind, primary); // set the badge relative to the button content\n  // when the button doesn't have background or border\n  // (!kind && icon && !label) is necessary because for old button logic,\n  // if button has icon but not label, it will be considered \"plain\",\n  // so no border or background will be applied\n\n  var innerBadge = !background && !border || !kind && icon && !label;\n\n  if (badgeProp && innerBadge) {\n    contents = /*#__PURE__*/React.createElement(Badge, {\n      content: badgeProp\n    }, contents);\n  }\n\n  var styledButtonResult;\n\n  if (kind) {\n    styledButtonResult = /*#__PURE__*/React.createElement(StyledButtonKind, _extends({}, rest, {\n      as: domTag,\n      ref: ref,\n      active: active,\n      align: align,\n      \"aria-label\": ariaLabel || a11yTitle,\n      badge: badgeProp,\n      colorValue: color,\n      disabled: disabled,\n      hasIcon: !!icon,\n      gap: gap,\n      hasLabel: !!label,\n      icon: icon,\n      fillContainer: fill,\n      focus: focus,\n      focusIndicator: focusIndicator,\n      href: href,\n      kind: kind,\n      themePaths: themePaths,\n      onClick: onClick,\n      onFocus: function onFocus(event) {\n        setFocus(true);\n        if (_onFocus) _onFocus(event);\n      },\n      onBlur: function onBlur(event) {\n        setFocus(false);\n        if (_onBlur) _onBlur(event);\n      },\n      onMouseOver: onMouseOverButton,\n      onMouseOut: onMouseOutButton,\n      plain: plain || Children.count(children) > 0,\n      primary: primary,\n      sizeProp: size,\n      type: !href ? type : undefined\n    }), contents);\n  } else {\n    styledButtonResult = /*#__PURE__*/React.createElement(StyledButton, _extends({}, rest, {\n      as: domTag,\n      ref: ref,\n      \"aria-label\": ariaLabel || a11yTitle,\n      colorValue: color,\n      active: active,\n      selected: selected,\n      disabled: disabled,\n      hasIcon: !!icon,\n      gap: gap,\n      hasLabel: !!label,\n      fillContainer: fill,\n      focus: focus,\n      focusIndicator: focusIndicator,\n      href: href,\n      kind: kind,\n      themePaths: themePaths,\n      onClick: onClick,\n      onFocus: function onFocus(event) {\n        setFocus(true);\n        if (_onFocus) _onFocus(event);\n      },\n      onBlur: function onBlur(event) {\n        setFocus(false);\n        if (_onBlur) _onBlur(event);\n      },\n      onMouseOver: onMouseOverButton,\n      onMouseOut: onMouseOutButton,\n      pad: !plain,\n      plain: typeof plain !== 'undefined' ? plain : Children.count(children) > 0 || icon && !label,\n      primary: primary,\n      sizeProp: size,\n      type: !href ? type : undefined\n    }), contents);\n  }\n\n  if (tip) {\n    if (typeof tip === 'string') {\n      styledButtonResult = /*#__PURE__*/React.createElement(Tip, {\n        content: tip\n      }, styledButtonResult);\n    } else {\n      styledButtonResult = /*#__PURE__*/React.createElement(Tip, tip, styledButtonResult);\n    }\n  } // if button has background or border, place badge relative\n  // to outer edge of button\n\n\n  if (badgeProp && !innerBadge) {\n    styledButtonResult = /*#__PURE__*/React.createElement(Badge, {\n      content: badgeProp\n    }, styledButtonResult);\n  }\n\n  return styledButtonResult;\n});\nButton.displayName = 'Button';\nButton.propTypes = ButtonPropTypes;\nexport { Button };","map":null,"metadata":{},"sourceType":"module"}