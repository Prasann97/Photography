{"ast":null,"code":"var _excluded = [\"alignControls\", \"children\", \"flex\", \"justify\", \"messages\", \"responsive\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useContext, useState, useEffect, useRef, useMemo } from 'react';\nimport { Previous } from 'grommet-icons/icons/Previous';\nimport { Next } from 'grommet-icons/icons/Next';\nimport { ThemeContext } from 'styled-components';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { TabsContext } from './TabsContext';\nimport { ResponsiveContext } from '../../contexts/ResponsiveContext';\nimport { StyledTabPanel, StyledTabs, StyledTabsHeader } from './StyledTabs';\nimport { normalizeColor } from '../../utils';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { TabsPropTypes } from './propTypes';\nimport { useAnalytics } from '../../contexts/AnalyticsContext/AnalyticsContext';\nvar Tabs = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var alignControls = _ref.alignControls,\n      children = _ref.children,\n      flex = _ref.flex,\n      _ref$justify = _ref.justify,\n      justify = _ref$justify === void 0 ? 'center' : _ref$justify,\n      messages = _ref.messages,\n      _ref$responsive = _ref.responsive,\n      responsive = _ref$responsive === void 0 ? true : _ref$responsive,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useContext = useContext(MessageContext),\n      format = _useContext.format;\n\n  var propsActiveIndex = rest.activeIndex,\n      onActive = rest.onActive;\n\n  var _useState = useState(rest.activeIndex || 0),\n      activeIndex = _useState[0],\n      setActiveIndex = _useState[1];\n\n  var _useState2 = useState(),\n      activeContent = _useState2[0],\n      setActiveContent = _useState2[1];\n\n  var _useState3 = useState(),\n      activeTitle = _useState3[0],\n      setActiveTitle = _useState3[1];\n\n  var _useState4 = useState(),\n      disableLeftArrow = _useState4[0],\n      setDisableLeftArrow = _useState4[1];\n\n  var _useState5 = useState(),\n      disableRightArrow = _useState5[0],\n      setDisableRightArrow = _useState5[1];\n\n  var _useState6 = useState(),\n      overflow = _useState6[0],\n      setOverflow = _useState6[1];\n\n  var _useState7 = useState(-1),\n      focusIndex = _useState7[0],\n      setFocusIndex = _useState7[1];\n\n  var headerRef = useRef();\n  var size = useContext(ResponsiveContext);\n  var sendAnalytics = useAnalytics();\n\n  if (activeIndex !== propsActiveIndex && propsActiveIndex !== undefined) {\n    setActiveIndex(propsActiveIndex);\n  } // Safari v15.5 has an issue with scrolling when overflow='hidden'\n  // and scroll-behavior='smooth'. For now we are detecting if the browser\n  // is safari to workaround this issue. The issue should be resolved soon\n  // and we can remove this. https://github.com/WebKit/WebKit/pull/1387\n\n\n  var isSafari = typeof window !== 'undefined' ? /^((?!chrome|android).)*safari/i.test(window.navigator.userAgent) : true;\n  /* eslint-disable no-param-reassign */\n\n  delete rest.activeIndex;\n  delete rest.onActive;\n  /* eslint-enable no-param-reassign */\n\n  var tabRefs = useMemo(function () {\n    return React.Children.map(children, function () {\n      return /*#__PURE__*/React.createRef();\n    });\n  }, [children]); // check if tab is in view\n\n  var isVisible = useCallback(function (index) {\n    if (tabRefs[index].current) {\n      var _headerRef$current;\n\n      var tabRect = tabRefs[index].current.getBoundingClientRect();\n      var headerRect = (_headerRef$current = headerRef.current) == null ? void 0 : _headerRef$current.getBoundingClientRect();\n\n      if (tabRect && headerRect) {\n        // the -1 and +1 allow a little leniency when calculating if a tab\n        // is in view. Without the -1 and +1 a tab could be fully in view\n        // but isVisible will return false.\n        return tabRect.left >= headerRect.left - 1 && tabRect.right <= headerRect.right + 1;\n      }\n    }\n\n    return undefined;\n  }, [headerRef, tabRefs]);\n  var updateArrowState = useCallback(function () {\n    setDisableLeftArrow(isVisible(0));\n    setDisableRightArrow(isVisible(tabRefs.length - 1));\n  }, [tabRefs, isVisible]);\n  var scrollTo = useCallback(function (index, keyboard) {\n    var tabRect = tabRefs[index].current.getBoundingClientRect();\n    var headerRect = headerRef.current.getBoundingClientRect();\n    var amountHidden = 0;\n\n    if (tabRect.left >= headerRect.left && tabRect.left <= headerRect.right) {\n      amountHidden = tabRect.width - (headerRect.right - tabRect.left);\n    } else if (tabRect.right >= headerRect.left && tabRect.right <= headerRect.right) {\n      amountHidden = tabRect.width - (tabRect.right - headerRect.left);\n      amountHidden = 0 - amountHidden;\n    } else if (tabRect.left >= headerRect.right) {\n      amountHidden = tabRect.right - headerRect.right;\n    } else if (tabRect.right <= headerRect.left) {\n      amountHidden = headerRect.left - tabRect.left;\n      amountHidden = 0 - amountHidden;\n    } // We are adding or subtracting 2 from amountHidden to\n    // ensure the focusIndicator is visible when navigating\n    // by keyboard\n\n\n    if (keyboard) {\n      if (amountHidden < 0) amountHidden -= 2;\n      if (amountHidden > 0) amountHidden += 2;\n    }\n\n    if (isSafari) {\n      headerRef.current.scrollBy({\n        left: amountHidden\n      });\n    } else {\n      headerRef.current.scrollBy({\n        left: amountHidden,\n        behavior: 'smooth'\n      });\n    } // wait for scroll animation to finish\n    // checks every 50 milliseconds for 1000 milliseconds\n    // if the scroll animation has finished. Most scroll\n    // animations will finish in 1000 milliseconds unless\n    // the tab name is very long.\n\n\n    if (isSafari) {\n      updateArrowState();\n    } else {\n      var checkVisible = setInterval(function () {\n        if (tabRefs[index].current && isVisible(index)) {\n          updateArrowState();\n          clearInterval(checkVisible);\n        }\n      }, 50);\n      setTimeout(function () {\n        updateArrowState();\n        clearInterval(checkVisible);\n      }, 1000);\n    }\n  }, [tabRefs, headerRef, isVisible, updateArrowState, isSafari]);\n\n  var moveByArrowKey = function moveByArrowKey(direction) {\n    var previous = direction === 'previous';\n    var index = direction === 'previous' ? 0 : tabRefs.length - 1;\n    var scrolledToIndex;\n    var moveBy = theme.tabs.step[size] - 1 || 0;\n\n    while (scrolledToIndex === undefined && (previous && index < tabRefs.length - 1 || !previous && index > 0)) {\n      if (!isVisible(index) && (previous && isVisible(index + 1) || !previous && isVisible(index - 1))) {\n        if (previous) {\n          if (index - moveBy >= 0) {\n            scrollTo(index - moveBy, false);\n            scrolledToIndex = index - moveBy;\n          } else {\n            scrollTo(0, false);\n            scrolledToIndex = 0;\n          }\n        } else if (index + moveBy < tabRefs.length) {\n          scrollTo(index + moveBy, false);\n          scrolledToIndex = index + moveBy;\n        } else {\n          scrollTo(tabRefs.length - 1, false);\n          scrolledToIndex = tabRefs.length - 1;\n        }\n      }\n\n      index = previous ? index + 1 : index - 1;\n    }\n  };\n\n  useEffect(function () {\n    // if the active tab isn't visible scroll to it\n    if (overflow && tabRefs && tabRefs[activeIndex].current && !isVisible(activeIndex)) scrollTo(activeIndex, true);\n  }, [overflow, activeIndex, tabRefs, isVisible, scrollTo]);\n  useEffect(function () {\n    // scroll focus item into view if it is not already visible\n    if (overflow && focusIndex !== -1 && !isVisible(focusIndex)) scrollTo(focusIndex, true);else if (overflow && focusIndex !== -1) {\n      // If the browser scrolled the focused item into view and\n      // the focusedTab is on the edge of the header container\n      // scroll slightly further to show the focusIndicator\n      var tabRect = tabRefs[focusIndex].current.getBoundingClientRect();\n      var headerRect = headerRef.current.getBoundingClientRect();\n      var amountHidden = 0;\n      if (tabRect.left >= headerRect.left && tabRect.right <= headerRect.right && tabRect.right + 2 >= headerRect.right) amountHidden = 2;else if (tabRect.right <= headerRect.right && tabRect.left >= headerRect.left && tabRect.left - 2 <= headerRect.left) amountHidden = -2;\n      headerRef.current.scrollBy({\n        left: amountHidden\n      });\n    }\n  }, [overflow, tabRefs, focusIndex, isVisible, scrollTo]);\n  useLayoutEffect(function () {\n    var onResize = function onResize() {\n      // check if tabs are overflowing\n      if (headerRef.current.scrollWidth > headerRef.current.offsetWidth) {\n        setOverflow(true);\n      } else setOverflow(false);\n\n      updateArrowState();\n    };\n\n    onResize();\n    window.addEventListener('resize', onResize);\n    return function () {\n      return window.removeEventListener('resize', onResize);\n    };\n  }, [tabRefs, disableLeftArrow, disableRightArrow, activeIndex, headerRef, overflow, updateArrowState]);\n  var getTabsContext = useCallback(function (index) {\n    var activateTab = function activateTab(nextIndex) {\n      sendAnalytics({\n        type: 'activateTab',\n        element: tabRefs[nextIndex].current\n      });\n\n      if (propsActiveIndex === undefined) {\n        setActiveIndex(nextIndex);\n      }\n\n      if (onActive) {\n        onActive(nextIndex);\n      }\n    };\n\n    return {\n      activeIndex: activeIndex,\n      active: activeIndex === index,\n      index: index,\n      ref: tabRefs[index],\n      onActivate: function onActivate() {\n        return activateTab(index);\n      },\n      setActiveContent: setActiveContent,\n      setActiveTitle: setActiveTitle,\n      setFocusIndex: setFocusIndex\n    };\n  }, [activeIndex, onActive, propsActiveIndex, sendAnalytics, tabRefs]);\n  var tabs = React.Children.map(children, function (child, index) {\n    return /*#__PURE__*/React.createElement(TabsContext.Provider, {\n      value: getTabsContext(index)\n    }, child ?\n    /*#__PURE__*/\n    // cloneElement is needed for backward compatibility with custom\n    // styled components that rely on props.active. We should reassess\n    // if it is still necessary in our next major release.\n    React.cloneElement(child, {\n      active: activeIndex === index\n    }) : child);\n  });\n  var tabsHeaderStyles = {};\n\n  if (theme.tabs.header && theme.tabs.header.border) {\n    var borderColor = theme.tabs.header.border.color || theme.global.control.border.color;\n    borderColor = normalizeColor(borderColor, theme);\n    tabsHeaderStyles.border = {\n      side: theme.tabs.header.border.side,\n      size: theme.tabs.header.border.size,\n      style: theme.tabs.header.border.style,\n      color: borderColor\n    };\n  }\n\n  var tabContentTitle = (activeTitle || '') + \" \" + format({\n    id: 'tabs.tabContents',\n    messages: messages\n  });\n  return /*#__PURE__*/React.createElement(StyledTabs, _extends({\n    ref: ref,\n    as: Box,\n    role: \"tablist\",\n    flex: flex,\n    responsive: responsive\n  }, rest, {\n    background: theme.tabs.background\n  }), /*#__PURE__*/React.createElement(Box, _extends({\n    flex: false,\n    direction: overflow ? 'row' : 'column'\n  }, tabsHeaderStyles), overflow && /*#__PURE__*/React.createElement(Button, {\n    a11yTitle: \"Previous Tab\",\n    disabled: disableLeftArrow // removed from tabIndex, button is redundant for keyboard users\n    ,\n    tabIndex: -1,\n    onClick: function onClick() {\n      return moveByArrowKey('previous');\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    pad: {\n      vertical: 'xsmall',\n      horizontal: 'small'\n    }\n  }, /*#__PURE__*/React.createElement(Previous, {\n    color: disableLeftArrow ? theme.button.disabled.color : theme.global.colors.text\n  }))), /*#__PURE__*/React.createElement(StyledTabsHeader, {\n    ref: headerRef,\n    as: Box,\n    direction: \"row\",\n    justify: overflow ? 'start' : justify,\n    alignSelf: alignControls,\n    flex: !!overflow,\n    wrap: false,\n    overflow: overflow ? 'hidden' : 'visible',\n    background: theme.tabs.header.background,\n    gap: theme.tabs.gap,\n    pad: overflow ? '2px' : undefined,\n    margin: overflow ? '-2px' : undefined\n  }, tabs), overflow && /*#__PURE__*/React.createElement(Button, {\n    a11yTitle: \"Next Tab\",\n    disabled: disableRightArrow // removed from tabIndex, button is redundant for keyboard users\n    ,\n    tabIndex: -1,\n    onClick: function onClick() {\n      return moveByArrowKey('next');\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    pad: {\n      vertical: 'xsmall',\n      horizontal: 'small'\n    }\n  }, /*#__PURE__*/React.createElement(Next, {\n    color: disableRightArrow ? theme.button.disabled.color : theme.global.colors.text\n  })))), /*#__PURE__*/React.createElement(StyledTabPanel, {\n    flex: flex,\n    \"aria-label\": tabContentTitle,\n    role: \"tabpanel\"\n  }, activeContent));\n});\nTabs.displayName = 'Tabs';\nTabs.propTypes = TabsPropTypes;\nexport { Tabs };","map":null,"metadata":{},"sourceType":"module"}