{"ast":null,"code":"var _excluded = [\"alignSelf\", \"autoPlay\", \"children\", \"controls\", \"gridArea\", \"loop\", \"margin\", \"messages\", \"mute\", \"onDurationChange\", \"onEnded\", \"onPause\", \"onPlay\", \"onTimeUpdate\", \"onVolumeChange\", \"skipInterval\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { defaultProps } from '../../default-props';\nimport { AnnounceContext } from '../../contexts/AnnounceContext';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Menu } from '../Menu';\nimport { Meter } from '../Meter';\nimport { Stack } from '../Stack';\nimport { Text } from '../Text';\nimport { Keyboard } from '../Keyboard';\nimport { containsFocus, useForwardedRef } from '../../utils';\nimport { StyledVideo, StyledVideoContainer, StyledVideoControls, StyledVideoScrubber } from './StyledVideo';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { VideoPropTypes } from './propTypes'; // Split the volume control into 6 segments. Empirically determined.\n\nvar VOLUME_STEP = 0.166667;\n\nvar formatTime = function formatTime(time) {\n  var minutes = Math.round(time / 60);\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  var seconds = Math.round(time) % 60;\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return minutes + \":\" + seconds;\n};\n\nvar Video = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var alignSelf = _ref.alignSelf,\n      autoPlay = _ref.autoPlay,\n      children = _ref.children,\n      controlsProp = _ref.controls,\n      gridArea = _ref.gridArea,\n      loop = _ref.loop,\n      margin = _ref.margin,\n      messages = _ref.messages,\n      mute = _ref.mute,\n      _onDurationChange = _ref.onDurationChange,\n      _onEnded = _ref.onEnded,\n      _onPause = _ref.onPause,\n      _onPlay = _ref.onPlay,\n      _onTimeUpdate = _ref.onTimeUpdate,\n      _onVolumeChange = _ref.onVolumeChange,\n      skipInterval = _ref.skipInterval,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useContext = useContext(MessageContext),\n      format = _useContext.format;\n\n  var announce = useContext(AnnounceContext);\n\n  var _useState = useState([]),\n      captions = _useState[0],\n      setCaptions = _useState[1];\n\n  var _useState2 = useState(),\n      currentTime = _useState2[0],\n      setCurrentTime = _useState2[1];\n\n  var _useState3 = useState(),\n      duration = _useState3[0],\n      setDuration = _useState3[1];\n\n  var _useState4 = useState(),\n      percentagePlayed = _useState4[0],\n      setPercentagePlayed = _useState4[1];\n\n  var _useState5 = useState(false),\n      playing = _useState5[0],\n      setPlaying = _useState5[1];\n\n  var _useState6 = useState(false),\n      announceAudioDescription = _useState6[0],\n      setAnnounceAudioDescription = _useState6[1];\n\n  var _useState7 = useState(),\n      scrubTime = _useState7[0],\n      setScrubTime = _useState7[1];\n\n  var _useState8 = useState(),\n      volume = _useState8[0],\n      setVolume = _useState8[1];\n\n  var _useState9 = useState(false),\n      hasPlayed = _useState9[0],\n      setHasPlayed = _useState9[1];\n\n  var _useState10 = useState(),\n      interacting = _useState10[0],\n      setInteracting = _useState10[1];\n\n  var _useState11 = useState(),\n      height = _useState11[0],\n      setHeight = _useState11[1];\n\n  var _useState12 = useState(),\n      width = _useState12[0],\n      setWidth = _useState12[1];\n\n  var containerRef = useRef();\n  var scrubberRef = useRef();\n  var videoRef = useForwardedRef(ref);\n  var controls = useMemo(function () {\n    var result;\n\n    if (typeof controlsProp === 'string' || typeof controlsProp === 'boolean') {\n      result = {\n        items: ['volume', 'fullScreen'],\n        position: controlsProp\n      };\n    } else {\n      result = {\n        items: (controlsProp == null ? void 0 : controlsProp.items) || ['volume', 'fullScreen'],\n        position: (controlsProp == null ? void 0 : controlsProp.position) || 'over'\n      };\n    }\n\n    return result;\n  }, [controlsProp]); // mute if needed\n\n  useEffect(function () {\n    var video = videoRef.current;\n    if (video && mute) video.muted = true;\n  }, [mute, videoRef]); // when the video is first rendered, set state from it where needed\n\n  useEffect(function () {\n    var video = videoRef.current;\n\n    if (video) {\n      // hide all captioning to start with\n      var textTracks = video.textTracks;\n\n      for (var i = 0; i < textTracks.length; i += 1) {\n        textTracks[i].mode = 'hidden';\n      }\n\n      setCurrentTime(video.currentTime);\n      setPercentagePlayed(video.currentTime / video.duration * 100);\n      setVolume(videoRef.current.volume);\n    }\n  }, [videoRef]); // turn off interacting after a while\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      if (interacting && !containsFocus(containerRef.current)) {\n        setInteracting(false);\n      }\n    }, 3000);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [interacting]); // track which audio description track is active\n\n  var _useState13 = useState(),\n      activeTrack = _useState13[0],\n      setActiveTrack = _useState13[1];\n\n  useLayoutEffect(function () {\n    var video = videoRef.current;\n\n    if (video) {\n      if (video.videoHeight) {\n        // set the size based on the video aspect ratio\n        var rect = video.getBoundingClientRect();\n        var ratio = rect.width / rect.height;\n        var videoRatio = video.videoWidth / video.videoHeight;\n\n        if (videoRatio > ratio) {\n          var nextHeight = rect.width / videoRatio;\n\n          if (nextHeight !== height) {\n            setHeight(nextHeight);\n            setWidth(undefined);\n          }\n        } else {\n          var nextWidth = rect.height * videoRatio;\n\n          if (nextWidth !== width) {\n            setHeight(undefined);\n            setWidth(nextWidth);\n          }\n        }\n      } // remember the state of the text tracks for subsequent rendering\n\n\n      var textTracks = video.textTracks;\n      var nextCaptions = [];\n      var set = false; // iterate through all of the tracks provided\n\n      var _loop = function _loop(i) {\n        var track = textTracks[i];\n        var active = track.mode === 'showing';\n\n        var getActiveTrack = function getActiveTrack(currentVideoTime) {\n          var nextActiveTrack;\n\n          for (var j = 0; j < track.cues.length; j += 1) {\n            var _track$cues$j, _track$cues$j2;\n\n            if (currentVideoTime > (track == null ? void 0 : (_track$cues$j = track.cues[j]) == null ? void 0 : _track$cues$j.startTime) && currentVideoTime < (track == null ? void 0 : (_track$cues$j2 = track.cues[j]) == null ? void 0 : _track$cues$j2.endTime)) {\n              var _track$cues$j3;\n\n              nextActiveTrack = track == null ? void 0 : (_track$cues$j3 = track.cues[j]) == null ? void 0 : _track$cues$j3.text;\n            }\n          }\n\n          return nextActiveTrack;\n        }; // track is an audio description\n\n\n        if (track.kind === 'descriptions') {\n          if (announceAudioDescription) {\n            video.ontimeupdate = function () {\n              var nextActiveTrack = getActiveTrack(video.currentTime);\n\n              if (activeTrack !== nextActiveTrack) {\n                if (nextActiveTrack) {\n                  announce(nextActiveTrack, 'assertive');\n                }\n\n                setActiveTrack(nextActiveTrack);\n              }\n            };\n          }\n        } // otherwise treat as captions\n        else {\n          nextCaptions.push({\n            label: track.label,\n            active: active\n          });\n\n          if (!captions || !captions[i] || captions[i].active !== active) {\n            set = true;\n          }\n\n          if (set) {\n            setCaptions(nextCaptions);\n          }\n        }\n      };\n\n      for (var i = 0; i < textTracks.length; i += 1) {\n        _loop(i);\n      }\n    }\n  }, [activeTrack, announce, announceAudioDescription, captions, height, videoRef, width]);\n  var play = useCallback(function () {\n    return videoRef.current.play();\n  }, [videoRef]);\n  var pause = useCallback(function () {\n    return videoRef.current.pause();\n  }, [videoRef]);\n  var scrub = useCallback(function (event) {\n    if (scrubberRef.current) {\n      var scrubberRect = scrubberRef.current.getBoundingClientRect();\n      var percent = (event.clientX - scrubberRect.left) / scrubberRect.width;\n      setScrubTime(duration * percent);\n    }\n  }, [duration]);\n  var seek = useCallback(function (event) {\n    if (scrubberRef.current) {\n      var scrubberRect = scrubberRef.current.getBoundingClientRect();\n      var percent = (event.clientX - scrubberRect.left) / scrubberRect.width;\n      if (duration) videoRef.current.currentTime = duration * percent;\n    }\n  }, [duration, videoRef]);\n  var seekForward = useCallback(function () {\n    setInteracting(true);\n    videoRef.current.currentTime += skipInterval || theme.video.scrubber.interval;\n  }, [skipInterval, theme.video.scrubber.interval, videoRef]);\n  var seekBackward = useCallback(function () {\n    setInteracting(true);\n    videoRef.current.currentTime -= skipInterval || theme.video.scrubber.interval;\n  }, [skipInterval, theme.video.scrubber.interval, videoRef]);\n  var louder = useCallback(function () {\n    videoRef.current.volume += VOLUME_STEP;\n  }, [videoRef]);\n  var quieter = useCallback(function () {\n    videoRef.current.volume -= VOLUME_STEP;\n  }, [videoRef]);\n  var showCaptions = useCallback(function (index) {\n    var textTracks = videoRef.current.textTracks;\n\n    for (var i = 0; i < textTracks.length; i += 1) {\n      textTracks[i].mode = i === index ? 'showing' : 'hidden';\n    }\n  }, [videoRef]);\n  var fullscreen = useCallback(function () {\n    var video = videoRef.current;\n\n    if (video.requestFullscreen) {\n      video.requestFullscreen();\n    } else if (video.msRequestFullscreen) {\n      video.msRequestFullscreen();\n    } else if (video.mozRequestFullScreen) {\n      video.mozRequestFullScreen();\n    } else if (video.webkitRequestFullscreen) {\n      video.webkitRequestFullscreen();\n    } else {\n      console.warn(\"This browser doesn't support fullscreen.\");\n    }\n  }, [videoRef]);\n  var controlsElement;\n\n  if (controls != null && controls.position) {\n    var _controls$items;\n\n    var over = controls.position === 'over';\n    var background = over ? theme.video.controls && theme.video.controls.background || {\n      color: 'background-back',\n      opacity: 'strong',\n      dark: true\n    } : undefined;\n    var iconColor = over && (theme.video.icons.color || 'text');\n    var formattedTime = formatTime(scrubTime || currentTime || duration);\n    var Icons = {\n      ClosedCaption: theme.video.icons.closedCaption,\n      Configure: theme.video.icons.configure,\n      FullScreen: theme.video.icons.fullScreen,\n      Pause: theme.video.icons.pause,\n      Play: theme.video.icons.play,\n      ReduceVolume: theme.video.icons.reduceVolume,\n      Volume: theme.video.icons.volume,\n      Description: theme.video.icons.description\n    };\n    var captionControls = captions.map(function (caption, index) {\n      return {\n        icon: caption.label ? undefined : /*#__PURE__*/React.createElement(Icons.ClosedCaption, {\n          color: iconColor\n        }),\n        label: caption.label,\n        active: caption.active,\n        a11yTitle: caption.label || format({\n          id: 'video.captions',\n          messages: messages\n        }),\n        onClick: function onClick() {\n          showCaptions(caption.active ? -1 : index);\n          var updatedCaptions = [];\n\n          for (var i = 0; i < captions.length; i += 1) {\n            updatedCaptions.push(captions[i]); // set other captions to active=false\n\n            if (i !== index && updatedCaptions[i].active) updatedCaptions[i].active = false; // set the currently selected captions to active\n            else if (i === index) updatedCaptions[i].active = !captions[index].active;\n          }\n\n          setCaptions(updatedCaptions);\n        }\n      };\n    });\n    var descriptionControls = {\n      icon: /*#__PURE__*/React.createElement(Icons.Description, {\n        color: iconColor\n      }),\n      a11yTitle: format({\n        id: 'video.audioDescriptions',\n        messages: messages\n      }),\n      active: announceAudioDescription,\n      onClick: function onClick() {\n        return setAnnounceAudioDescription(!announceAudioDescription);\n      }\n    };\n    var volumeControls = ['volume', 'reduceVolume'].map(function (control) {\n      return {\n        icon: control === 'volume' ? /*#__PURE__*/React.createElement(Icons.Volume, {\n          color: iconColor\n        }) : /*#__PURE__*/React.createElement(Icons.ReduceVolume, {\n          color: iconColor\n        }),\n        a11yTitle: format({\n          id: control === 'volume' ? 'video.volumeUp' : 'video.volumeDown',\n          messages: messages\n        }),\n        onClick: function onClick() {\n          if (volume <= 1 - VOLUME_STEP && control === 'volume') {\n            return louder();\n          }\n\n          if (volume >= VOLUME_STEP && control === 'reduceVolume') {\n            return quieter();\n          }\n\n          return undefined;\n        },\n        close: false\n      };\n    });\n    var buttonProps = {\n      captions: captionControls,\n      descriptions: descriptionControls,\n      volume: volumeControls,\n      fullScreen: {\n        icon: /*#__PURE__*/React.createElement(Icons.FullScreen, {\n          color: iconColor\n        }),\n        a11yTitle: format({\n          id: 'video.fullScreen',\n          messages: messages\n        }),\n        onClick: fullscreen\n      },\n      pause: {\n        icon: /*#__PURE__*/React.createElement(Icons.Pause, {\n          color: iconColor\n        }),\n        a11yTitle: format({\n          id: 'video.pauseButton',\n          messages: messages\n        }),\n        disabled: !playing,\n        onClick: pause\n      },\n      play: {\n        icon: /*#__PURE__*/React.createElement(Icons.Play, {\n          color: iconColor\n        }),\n        a11yTitle: format({\n          id: 'video.playButton',\n          messages: messages\n        }),\n        disabled: playing,\n        onClick: play\n      }\n    };\n    var controlsMenuItems = [];\n    (_controls$items = controls.items) == null ? void 0 : _controls$items.map(function (item) {\n      if (item === 'volume') {\n        volumeControls.map(function (control) {\n          return controlsMenuItems.push(control);\n        });\n        return undefined;\n      }\n\n      if (item === 'captions' && typeof buttonProps[item] === 'object') {\n        for (var i = 0; i < buttonProps[item].length; i += 1) {\n          controlsMenuItems.push(buttonProps[item][i]);\n        }\n\n        return undefined;\n      }\n\n      if (item === 'descriptions') {\n        controlsMenuItems.push(buttonProps[item]);\n        return undefined;\n      }\n\n      if (typeof item === 'string') {\n        return controlsMenuItems.push(buttonProps[item]);\n      }\n\n      return controlsMenuItems.push(item);\n    });\n    controlsElement = /*#__PURE__*/React.createElement(StyledVideoControls, {\n      over: over,\n      active: !hasPlayed || controls.position === 'below' || over && interacting,\n      onBlur: function onBlur() {\n        if (!containsFocus(containerRef.current)) setInteracting(false);\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      direction: \"row\",\n      align: \"center\",\n      justify: \"between\",\n      background: background\n    }, /*#__PURE__*/React.createElement(Button, {\n      icon: playing ? /*#__PURE__*/React.createElement(Icons.Pause, {\n        color: iconColor,\n        a11yTitle: format({\n          id: 'video.pauseButton',\n          messages: messages\n        })\n      }) : /*#__PURE__*/React.createElement(Icons.Play, {\n        color: iconColor,\n        a11yTitle: format({\n          id: 'video.playButton',\n          messages: messages\n        })\n      }),\n      hoverIndicator: \"background\",\n      onClick: playing ? pause : play,\n      onFocus: function onFocus() {\n        return setInteracting(true);\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      direction: \"row\",\n      align: \"center\",\n      flex: true\n    }, /*#__PURE__*/React.createElement(Box, {\n      flex: true\n    }, /*#__PURE__*/React.createElement(Stack, null, /*#__PURE__*/React.createElement(Meter, {\n      \"aria-label\": format({\n        id: 'video.progressMeter',\n        messages: messages\n      }),\n      background: over ? theme.video.scrubber && theme.video.scrubber.track && theme.video.scrubber.track.color || 'dark-3' : undefined,\n      size: \"full\",\n      thickness: \"small\",\n      values: [{\n        value: percentagePlayed || 0\n      }]\n    }), /*#__PURE__*/React.createElement(StyledVideoScrubber, {\n      \"aria-label\": format({\n        id: 'video.scrubber',\n        messages: messages\n      }),\n      ref: scrubberRef,\n      tabIndex: 0,\n      role: \"button\",\n      value: scrubTime ? Math.round(scrubTime / duration * 100) : undefined,\n      onMouseMove: scrub,\n      onMouseLeave: function onMouseLeave() {\n        return setScrubTime(undefined);\n      },\n      onClick: seek,\n      onFocus: function onFocus() {\n        return setInteracting(true);\n      }\n    }))), /*#__PURE__*/React.createElement(Box, {\n      pad: {\n        horizontal: 'small'\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      margin: \"none\"\n    }, formattedTime))), /*#__PURE__*/React.createElement(Menu, {\n      icon: /*#__PURE__*/React.createElement(Icons.Configure, {\n        color: iconColor\n      }),\n      dropAlign: {\n        bottom: 'top',\n        right: 'right'\n      },\n      dropBackground: background,\n      messages: {\n        openMenu: format({\n          id: 'video.openMenu',\n          messages: messages\n        }),\n        closeMenu: format({\n          id: 'video.closeMenu',\n          messages: messages\n        })\n      },\n      items: [].concat(controlsMenuItems),\n      onFocus: function onFocus() {\n        return setInteracting(true);\n      }\n    })));\n  }\n\n  var mouseEventListeners;\n\n  if ((controls == null ? void 0 : controls.position) === 'over') {\n    mouseEventListeners = {\n      onMouseEnter: function onMouseEnter() {\n        return setInteracting(true);\n      },\n      onMouseMove: function onMouseMove() {\n        return setInteracting(true);\n      },\n      onTouchStart: function onTouchStart() {\n        return setInteracting(true);\n      }\n    };\n  }\n\n  var style;\n\n  if (rest.fit === 'contain' && (controls == null ? void 0 : controls.position) === 'over') {\n    // constrain the size to fit the aspect ratio so the controls\n    // overlap correctly\n    if (width) {\n      style = {\n        width: width\n      };\n    } else if (height) {\n      style = {\n        height: height\n      };\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Keyboard, {\n    onLeft: seekBackward,\n    onRight: seekForward\n  }, /*#__PURE__*/React.createElement(StyledVideoContainer, _extends({\n    ref: containerRef\n  }, mouseEventListeners, {\n    alignSelf: alignSelf,\n    gridArea: gridArea,\n    margin: margin,\n    style: style,\n    tabIndex: \"-1\"\n  }), /*#__PURE__*/React.createElement(StyledVideo, _extends({}, rest, {\n    ref: videoRef,\n    onDurationChange: function onDurationChange(event) {\n      var video = videoRef.current;\n      setDuration(video.duration);\n      setPercentagePlayed(video.currentTime / video.duration * 100);\n      if (_onDurationChange) _onDurationChange(event);\n    },\n    onEnded: function onEnded(event) {\n      setPlaying(false);\n      if (_onEnded) _onEnded(event);\n    },\n    onPause: function onPause(event) {\n      setPlaying(false);\n      if (_onPause) _onPause(event);\n    },\n    onPlay: function onPlay(event) {\n      setPlaying(true);\n      setHasPlayed(true);\n      if (_onPlay) _onPlay(event);\n    },\n    onTimeUpdate: function onTimeUpdate(event) {\n      var video = videoRef.current;\n      setCurrentTime(video.currentTime);\n      setPercentagePlayed(video.currentTime / video.duration * 100);\n      if (_onTimeUpdate) _onTimeUpdate(event);\n    },\n    onVolumeChange: function onVolumeChange(event) {\n      setVolume(videoRef.current.volume);\n      if (_onVolumeChange) _onVolumeChange(event);\n    },\n    autoPlay: autoPlay || false,\n    loop: loop || false\n  }), children), controlsElement));\n});\nVideo.defaultProps = {};\nVideo.displayName = 'Video';\nVideo.propTypes = VideoPropTypes;\nexport { Video };","map":null,"metadata":{},"sourceType":"module"}