{"ast":null,"code":"var _excluded = [\"values\", \"pad\", \"renderValue\", \"serie\", \"theme\", \"thickness\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useMemo } from 'react';\nimport { edgeToNum } from '../../utils';\nimport { Box } from '../Box';\nvar XAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var values = _ref.values,\n      padProp = _ref.pad,\n      renderValue = _ref.renderValue,\n      serie = _ref.serie,\n      theme = _ref.theme,\n      thickness = _ref.thickness,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded); // pad to the edge of the thickness, for when padding is more than half\n  // the thickness\n\n\n  var pad = useMemo(function () {\n    return {\n      start: edgeToNum(padProp.start || padProp.horizontal, theme) - edgeToNum(thickness, theme) / 2 + \"px\",\n      end: edgeToNum(padProp.end || padProp.horizontal, theme) - edgeToNum(thickness, theme) / 2 + \"px\"\n    };\n  }, [padProp, theme, thickness]); // When there are only labels at the end of the axis and there isn't\n  // much space for them, let them take as much space as they like\n  // flowing in from the edges.\n  // Otherwise, align their container to the\n  // data/guide lines and then let their content overflow that.\n\n  var labelContainerProps = useMemo(function () {\n    // 24px was chosen empirically as 48px is enough to show some simple text\n    var centered = values.length !== 2 || edgeToNum(padProp.start || padProp.horizontal, theme) >= 24;\n    if (centered) return {\n      width: thickness,\n      overflow: 'visible',\n      align: 'center'\n    };\n    return {};\n  }, [padProp, theme, thickness, values]);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    ref: ref,\n    gridArea: \"xAxis\",\n    direction: \"row\",\n    justify: \"between\",\n    pad: pad\n  }, rest), values.map(function (dataIndex, i) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(Box, _extends({\n        key: i\n      }, labelContainerProps), serie ? renderValue(serie, dataIndex) : dataIndex)\n    );\n  }));\n});\nexport { XAxis };","map":null,"metadata":{},"sourceType":"module"}