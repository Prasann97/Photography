{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport PropTypes from 'prop-types';\nimport { alignPropType, genericProps, heightPropType, padPropType, widthPropType } from '../../utils/general-prop-types';\nvar fixedSizes = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nvar sizes = ['xsmall', 'small', 'medium', 'large', 'xlarge', 'full', '1/2', '1/3', '2/3', '1/4', '2/4', '3/4', 'flex', 'auto'];\nvar edgeSizes = ['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'none'];\nvar BORDER_SHAPE = PropTypes.shape({\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n    dark: PropTypes.string,\n    light: PropTypes.string\n  })]),\n  side: PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'start', 'end', 'horizontal', 'vertical', 'all', 'between']),\n  size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]),\n  style: PropTypes.oneOf(['solid', 'dashed', 'dotted', 'double', 'groove', 'ridge', 'inset', 'outset', 'hidden'])\n});\nvar PropType = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  PropType = _extends({}, genericProps, {\n    align: alignPropType,\n    alignContent: PropTypes.oneOfType([PropTypes.oneOf(['around', 'baseline', 'between', 'center', 'evenly', 'end', 'start', 'stretch']), PropTypes.string]),\n    areas: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      start: PropTypes.arrayOf(PropTypes.number),\n      end: PropTypes.arrayOf(PropTypes.number)\n    })), PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))]),\n    border: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'left', 'bottom', 'right', 'start', 'end', 'horizontal', 'vertical', 'all']), BORDER_SHAPE, PropTypes.arrayOf(BORDER_SHAPE)]),\n    columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(sizes), PropTypes.string])), PropTypes.oneOf(sizes), PropTypes.string])), PropTypes.oneOf(sizes), PropTypes.shape({\n      count: PropTypes.oneOfType([PropTypes.oneOf(['fit', 'fill']), PropTypes.number]),\n      size: PropTypes.oneOfType([PropTypes.oneOf(sizes), PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(sizes), PropTypes.string])), PropTypes.string])\n    }), PropTypes.string]),\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]),\n    gap: PropTypes.oneOfType([PropTypes.oneOf(edgeSizes), PropTypes.shape({\n      row: PropTypes.oneOfType([PropTypes.oneOf(edgeSizes), PropTypes.string]),\n      column: PropTypes.oneOfType([PropTypes.oneOf(edgeSizes), PropTypes.string])\n    }), PropTypes.string]),\n    height: heightPropType,\n    justify: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n    justifyContent: PropTypes.oneOf(['start', 'center', 'end', 'between', 'around', 'stretch']),\n    pad: padPropType,\n    responsive: PropTypes.bool,\n    rows: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(sizes), PropTypes.string])), PropTypes.oneOf(sizes), PropTypes.string])), PropTypes.oneOf(fixedSizes), PropTypes.string]),\n    tag: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    width: widthPropType\n  });\n}\n\nexport var GridPropTypes = PropType;","map":null,"metadata":{},"sourceType":"module"}