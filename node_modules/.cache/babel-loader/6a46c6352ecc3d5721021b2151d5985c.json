{"ast":null,"code":"var _excluded = [\"sticky\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useContext, useEffect } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { findScrollParent, useForwardedRef } from '../../utils';\nimport { Box } from '../Box';\nvar Header = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _theme$header2, _theme$header2$sticky;\n\n  var sticky = _ref.sticky,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext);\n  var headerRef = useForwardedRef(ref);\n  useEffect(function () {\n    var scrollTop = 0;\n\n    var updateScrollDir = function updateScrollDir() {\n      // target is its scroll parent\n      var target = findScrollParent(headerRef.current);\n      var header = headerRef.current;\n\n      if (target && sticky === 'scrollup') {\n        var nextScrollTop = target === document ? window.pageYOffset : target.scrollTop;\n\n        if (scrollTop - nextScrollTop <= 0) {\n          header.style.top = \"-\" + header.getBoundingClientRect().height + \"px\";\n          header.style.zIndex = '';\n        } else if (scrollTop - nextScrollTop > 0) {\n          var _theme$header, _theme$header$sticky; // ensure that header moves with the target\n\n\n          header.style.position = 'sticky';\n          header.style.top = '0px';\n          header.style.zIndex = \"\" + ((_theme$header = theme.header) == null ? void 0 : (_theme$header$sticky = _theme$header.sticky) == null ? void 0 : _theme$header$sticky.zIndex);\n          header.style.transition = 'top 0.6s';\n        }\n\n        scrollTop = nextScrollTop;\n      }\n    };\n\n    if (sticky === 'scrollup') {\n      updateScrollDir();\n      window.addEventListener('resize', updateScrollDir);\n      window.addEventListener('scroll', updateScrollDir, true);\n    }\n\n    return function () {\n      if (sticky === 'scrollup') {\n        window.removeEventListener('resize', updateScrollDir);\n        window.removeEventListener('scroll', updateScrollDir, true);\n      }\n    };\n  }, [headerRef, sticky, (_theme$header2 = theme.header) == null ? void 0 : (_theme$header2$sticky = _theme$header2.sticky) == null ? void 0 : _theme$header2$sticky.zIndex]);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    align: \"center\",\n    as: \"header\",\n    direction: \"row\",\n    flex: false,\n    justify: \"between\",\n    gap: \"medium\",\n    ref: headerRef\n  }, rest));\n});\nHeader.displayName = 'Header';\nexport { Header };","map":null,"metadata":{},"sourceType":"module"}