{"ast":null,"code":"var _excluded = [\"align\", \"aria-disabled\", \"background\", \"border\", \"children\", \"className\", \"colSpan\", \"onWidth\", \"pad\", \"plain\", \"rowSpan\", \"scope\", \"size\", \"verticalAlign\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useMemo, useRef } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { defaultProps } from '../../default-props';\nimport { backgroundIsDark, useForwardedRef } from '../../utils';\nimport { Box } from '../Box';\nimport { TableContext } from '../Table/TableContext';\nimport { StyledTableCell } from '../Table/StyledTable';\nimport { TableCellPropTypes } from './propTypes';\nexport var verticalAlignToJustify = {\n  middle: 'center',\n  top: 'start',\n  bottom: 'end'\n};\nvar TableCell = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var align = _ref.align,\n      ariaDisabled = _ref['aria-disabled'],\n      background = _ref.background,\n      border = _ref.border,\n      children = _ref.children,\n      className = _ref.className,\n      colSpan = _ref.colSpan,\n      onWidth = _ref.onWidth,\n      pad = _ref.pad,\n      plain = _ref.plain,\n      rowSpan = _ref.rowSpan,\n      scope = _ref.scope,\n      size = _ref.size,\n      verticalAlign = _ref.verticalAlign,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var tableContext = useContext(TableContext);\n  var cellRef = useForwardedRef(ref);\n  var containerRef = useRef();\n  useLayoutEffect(function () {\n    if (onWidth) {\n      var _cellRef$current$getB = cellRef.current.getBoundingClientRect(),\n          width = _cellRef$current$getB.width;\n\n      onWidth(width);\n    }\n  }, [cellRef, onWidth]); // if window resizes, recalculate cell height so that content\n  // will continue to fill the height if the dimensions of the cell\n  // have changed\n\n  useEffect(function () {\n    var updateHeight = function updateHeight() {\n      if (plain === 'noPad') {\n        var cell = cellRef.current;\n        var container = containerRef.current;\n\n        if (cell && container) {\n          container.style.height = '';\n          var cellRect = cell.getBoundingClientRect(); // height must match cell height otherwise table will apply some\n          // margin around the cell content\n\n          container.style.height = Math.max(cellRect.height - (border || theme.table[tableContext].border ? theme.global.borderSize.xsmall.replace('px', '') : 0), 0) + \"px\";\n        }\n      }\n    };\n\n    window.addEventListener('resize', updateHeight);\n    updateHeight();\n    return function () {\n      window.removeEventListener('resize', updateHeight);\n    };\n  }, [border, cellRef, plain, tableContext, theme.global.borderSize, theme.table]);\n  var tableContextTheme;\n\n  if (tableContext === 'header') {\n    tableContextTheme = theme.table && theme.table.header;\n  } else if (tableContext === 'footer') {\n    tableContextTheme = theme.table && theme.table.footer;\n  } else {\n    tableContextTheme = theme.table && theme.table.body;\n  } // merge tableContextTheme and rest\n\n\n  var mergedProps = _extends({}, tableContextTheme, rest);\n\n  Object.keys(mergedProps).forEach(function (key) {\n    if (rest[key] === undefined) mergedProps[key] = tableContextTheme[key];\n  }); // split out background, border, pad, and aria-disabled\n\n  var cellProps = {\n    align: align || mergedProps.align || undefined,\n    'aria-disabled': ariaDisabled || undefined,\n    background: background || mergedProps.background || undefined,\n    border: border || mergedProps.border || undefined,\n    pad: plain !== 'noPad' ? pad || mergedProps.pad || undefined : undefined,\n    verticalAlign: verticalAlign || mergedProps.verticalAlign || undefined\n  };\n  delete mergedProps.align;\n  delete mergedProps.ariaDisabled;\n  delete mergedProps.background;\n  delete mergedProps.border;\n  delete mergedProps.pad;\n  delete mergedProps.verticalAlign;\n  var content = children;\n\n  if (plain === 'noPad' && children) {\n    // a Box with explicitly set height is necessary\n    // for the child contents to be able to fill the\n    // TableCell\n    content = /*#__PURE__*/React.createElement(Box, {\n      ref: containerRef,\n      justify: verticalAlign ? verticalAlignToJustify[verticalAlign] : 'center'\n    }, children);\n  } // construct a new theme object in case we have a background that wants\n  // to change the background color context\n\n\n  var nextTheme = useMemo(function () {\n    var result;\n\n    if (cellProps.background || theme.darkChanged) {\n      var dark = backgroundIsDark(cellProps.background, theme);\n      var darkChanged = dark !== undefined && dark !== theme.dark;\n\n      if (darkChanged || theme.darkChanged) {\n        result = _extends({}, theme);\n        result.dark = dark === undefined ? theme.dark : dark;\n        result.background = cellProps.background;\n      } else if (cellProps.background) {\n        // This allows DataTable to intelligently set the background\n        // of a pinned header or footer.\n        result = _extends({}, theme);\n        result.background = cellProps.background;\n      }\n    }\n\n    return result || theme;\n  }, [cellProps.background, theme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: nextTheme\n  }, /*#__PURE__*/React.createElement(StyledTableCell, _extends({\n    ref: cellRef,\n    as: scope ? 'th' : undefined,\n    scope: scope,\n    size: size,\n    colSpan: colSpan,\n    rowSpan: rowSpan,\n    tableContext: tableContext,\n    tableContextTheme: tableContextTheme\n  }, plain === true ? mergedProps : {}, cellProps, {\n    className: className\n  }), plain || !Object.keys(mergedProps).length ? content : /*#__PURE__*/React.createElement(Box, _extends({}, mergedProps, {\n    align: align,\n    justify: verticalAlignToJustify[verticalAlign]\n  }), children)));\n});\nTableCell.displayName = 'TableCell';\nTableCell.propTypes = TableCellPropTypes;\nexport { TableCell };","map":null,"metadata":{},"sourceType":"module"}