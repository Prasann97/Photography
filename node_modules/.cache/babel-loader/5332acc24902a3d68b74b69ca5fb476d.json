{"ast":null,"code":"var _excluded = [\"align\", \"layout\", \"nameProps\", \"pairProps\", \"valueProps\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useMemo } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Grid } from '../Grid';\nimport { ResponsiveContext } from '../../contexts/ResponsiveContext';\nimport { NameValueListContext } from './NameValueListContext';\nvar NameValueList = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _theme$nameValueList$, _theme$nameValueList$2;\n\n  var align = _ref.align,\n      _ref$layout = _ref.layout,\n      layout = _ref$layout === void 0 ? 'column' : _ref$layout,\n      nameProps = _ref.nameProps,\n      _ref$pairProps = _ref.pairProps,\n      pairProps = _ref$pairProps === void 0 ? {\n    direction: 'row'\n  } : _ref$pairProps,\n      valueProps = _ref.valueProps,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var size = useContext(ResponsiveContext);\n  var theme = useContext(ThemeContext); // If layout is grid, valueWidth sets the max width of the column.\n  // Grid will 'fit' as many columns of valueWidth per row as container's\n  // width allows.\n\n  var columns;\n  var valueWidth = (valueProps == null ? void 0 : valueProps.width) || theme.nameValueList.value.width;\n  var nameWidth = (nameProps == null ? void 0 : nameProps.width) || theme.nameValueList.name.width;\n  if (size === 'small' || layout === 'grid') columns = {\n    count: 'fit',\n    size: !Array.isArray(valueWidth) ? ['auto', valueWidth] : valueWidth\n  };else if (layout === 'column' && pairProps.direction === 'row') columns = [nameWidth, !Array.isArray(valueWidth) ? ['auto', valueWidth] : valueWidth];else columns = [valueWidth];\n  var gap = theme.nameValueList.gap;\n\n  if ((pairProps.direction === 'column' || size === 'small') && (_theme$nameValueList$ = theme.nameValueList.pair) != null && (_theme$nameValueList$2 = _theme$nameValueList$.column) != null && _theme$nameValueList$2.gap) {\n    gap = theme.nameValueList.pair.column.gap;\n  }\n\n  var listContextValue = useMemo(function () {\n    return {\n      nameProps: nameProps,\n      pairProps: pairProps,\n      valueProps: valueProps\n    };\n  }, [nameProps, pairProps, valueProps]);\n  return /*#__PURE__*/React.createElement(NameValueListContext.Provider, {\n    value: listContextValue\n  }, /*#__PURE__*/React.createElement(Grid, _extends({\n    as: \"dl\",\n    ref: ref,\n    columns: columns,\n    gap: gap,\n    fill: layout === 'grid',\n    margin: \"none\" // override browser default margin for dl\n\n  }, rest)));\n});\nNameValueList.displayName = 'NameValueList';\nexport { NameValueList };","map":null,"metadata":{},"sourceType":"module"}