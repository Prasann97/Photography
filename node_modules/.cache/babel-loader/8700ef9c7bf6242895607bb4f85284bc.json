{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React, { Children, cloneElement, forwardRef, useContext, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { Drop } from '../Drop';\nimport { useForwardedRef, useKeyboard } from '../../utils';\nimport { TipPropTypes } from './propTypes';\nvar Tip = /*#__PURE__*/forwardRef(function (_ref, tipRef) {\n  var children = _ref.children,\n      content = _ref.content,\n      dropProps = _ref.dropProps,\n      plain = _ref.plain;\n  var theme = useContext(ThemeContext);\n\n  var _useState = useState(false),\n      over = _useState[0],\n      setOver = _useState[1];\n\n  var usingKeyboard = useKeyboard();\n  var componentRef = useForwardedRef(tipRef); // Three use case for children\n  // 1. Tip has a single child + it is a React Element => Great!\n  // 2. Tip has a single child +  not React Element =>\n  // span will wrap the child so we can use ref and events.\n  // 3. Tip has more than one child => Abort, display Children.only error\n\n  var child = Children.count(children) <= 1 && ! /*#__PURE__*/React.isValidElement(children) && /*#__PURE__*/React.createElement(\"span\", null, children) || Children.only(children);\n  var clonedChild = /*#__PURE__*/cloneElement(child, {\n    onMouseEnter: function onMouseEnter(event) {\n      var _child$props;\n\n      setOver(true);\n      if ((_child$props = child.props) != null && _child$props.onMouseEnter) child.props.onMouseEnter(event);\n    },\n    onMouseLeave: function onMouseLeave(event) {\n      var _child$props2;\n\n      setOver(false);\n      if ((_child$props2 = child.props) != null && _child$props2.onMouseLeave) child.props.onMouseLeave(event);\n    },\n    onFocus: function onFocus(event) {\n      var _child$props3;\n\n      if (usingKeyboard) setOver(true);\n      if ((_child$props3 = child.props) != null && _child$props3.onFocus) child.props.onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      var _child$props4;\n\n      if (usingKeyboard) setOver(false);\n      if ((_child$props4 = child.props) != null && _child$props4.onBlur) child.props.onBlur(event);\n    },\n    key: 'tip-child',\n    ref: function ref(node) {\n      // https://github.com/facebook/react/issues/8873#issuecomment-287873307\n      if (typeof componentRef === 'function') {\n        componentRef(node);\n      } else if (componentRef) {\n        // eslint-disable-next-line no-param-reassign\n        componentRef.current = node;\n      } // Call the original ref, if any\n\n\n      var callerRef = child.ref;\n\n      if (typeof callerRef === 'function') {\n        callerRef(node);\n      } else if (callerRef) {\n        callerRef.current = node;\n      }\n    }\n  });\n  return [clonedChild, over && /*#__PURE__*/React.createElement(Drop, _extends({\n    target: componentRef.current,\n    trapFocus: false,\n    key: \"tip-drop\"\n  }, theme.tip.drop, dropProps), plain ? content : /*#__PURE__*/React.createElement(Box, theme.tip.content, content))];\n});\nTip.displayName = 'Tip';\nTip.propTypes = TipPropTypes;\nexport { Tip };","map":null,"metadata":{},"sourceType":"module"}