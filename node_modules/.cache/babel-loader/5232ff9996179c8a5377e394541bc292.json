{"ast":null,"code":"var _excluded = [\"a11yTitle\", \"aria-label\", \"numberItems\", \"numberEdgePages\", \"numberMiddlePages\", \"onChange\", \"page\", \"size\", \"step\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Nav } from '../Nav';\nimport { PageControl } from './PageControl';\nimport { PaginationPropTypes } from './propTypes';\nvar StyledPaginationContainer = styled(Box).withConfig({\n  displayName: \"Pagination__StyledPaginationContainer\",\n  componentId: \"sc-rnlw6m-0\"\n})([\"\", \"\"], function (props) {\n  return props.theme.pagination.container && props.theme.pagination.container.extend;\n});\n\nvar getPageIndices = function getPageIndices(begin, end) {\n  var indices = [];\n\n  for (var i = begin; i <= end; i += 1) {\n    indices.push(i);\n  }\n\n  return indices;\n};\n\nvar Pagination = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      ariaLabel = _ref['aria-label'],\n      numberItems = _ref.numberItems,\n      _ref$numberEdgePages = _ref.numberEdgePages,\n      numberEdgePages = _ref$numberEdgePages === void 0 ? 1 : _ref$numberEdgePages,\n      _ref$numberMiddlePage = _ref.numberMiddlePages,\n      numberMiddlePagesProp = _ref$numberMiddlePage === void 0 ? 3 : _ref$numberMiddlePage,\n      onChange = _ref.onChange,\n      pageProp = _ref.page,\n      size = _ref.size,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 10 : _ref$step,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  /* Calculate total number pages */\n\n  var totalPages = Math.ceil(numberItems / step);\n\n  var _useState = useState(Math.min(pageProp, totalPages) || 1),\n      activePage = _useState[0],\n      setActivePage = _useState[1];\n\n  useEffect(function () {\n    setActivePage(pageProp || 1);\n  }, [pageProp]);\n  /* Define page indices to display */\n\n  var beginPages = getPageIndices(1, Math.min(numberEdgePages, totalPages));\n  var endPages = getPageIndices(Math.max(totalPages - numberEdgePages + 1, numberEdgePages + 1), totalPages);\n  var numberMiddlePages;\n\n  if (numberMiddlePagesProp < 1) {\n    numberMiddlePages = 1;\n    console.warn( // eslint-disable-next-line max-len\n    \"Property \\\"numberMiddlePages\\\" should not be < 1. One middle page button will be shown. Set \\\"numberMiddlePages\\\" >= 1 to remove this warning.\");\n  } else numberMiddlePages = numberMiddlePagesProp;\n\n  var startingMiddlePages; // odd\n\n  if (numberMiddlePages % 2) startingMiddlePages = Math.min(activePage - Math.floor(numberMiddlePages / 2), totalPages - numberEdgePages - numberMiddlePages); // even, cannot split equally around active page\n  // let extra page appear on middlePagesEnd instead\n  else startingMiddlePages = Math.min(activePage - Math.floor(numberMiddlePages / 2) + 1, totalPages - numberEdgePages - numberMiddlePages);\n  var middlePagesBegin = Math.max(startingMiddlePages, numberEdgePages + 2);\n  var middlePagesEnd = Math.min(Math.max(activePage + Math.floor(numberMiddlePages / 2), numberEdgePages + numberMiddlePages + 1), endPages.length > 0 ? endPages[0] - 2 : totalPages - 1);\n  var middlePages = getPageIndices(middlePagesBegin, middlePagesEnd);\n  var beginFlex = [];\n  if (middlePagesBegin > numberEdgePages + 2) beginFlex = ['more-prev'];else if (numberEdgePages + 1 < totalPages - numberEdgePages) beginFlex = [numberEdgePages + 1];\n  var endFlex = [];\n  if (middlePagesEnd < totalPages - numberEdgePages - 1) endFlex = ['more-next'];else if (totalPages - numberEdgePages > numberEdgePages) endFlex = [totalPages - numberEdgePages];\n\n  var getItemIndices = function getItemIndices(nextPage) {\n    var startIndex = step * (nextPage - 1);\n    var endIndex = startIndex + step;\n    return {\n      startIndex: startIndex,\n      endIndex: endIndex\n    };\n  };\n\n  var handleClick = function handleClick(event, nextPage) {\n    setActivePage(nextPage);\n\n    if (onChange) {\n      event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.page = nextPage; // for controlled use cases, provide user with info on\n      // what range of indices should be displayed given the active page\n\n      var _getItemIndices = getItemIndices(nextPage),\n          startIndex = _getItemIndices.startIndex,\n          endIndex = _getItemIndices.endIndex;\n\n      adjustedEvent.startIndex = startIndex;\n      adjustedEvent.endIndex = endIndex;\n      onChange(adjustedEvent);\n    }\n  };\n\n  var NextIcon = theme.pagination.icons.next;\n  var PreviousIcon = theme.pagination.icons.previous;\n  var iconColor = theme.pagination.icons.color;\n  var navProps = {\n    next: {\n      // https://a11y-style-guide.com/style-guide/section-navigation.html#kssref-navigation-pagination\n      'aria-disabled': activePage === totalPages ? 'true' : undefined,\n      disabled: activePage === totalPages || !numberItems,\n      icon: /*#__PURE__*/React.createElement(NextIcon, {\n        color: iconColor\n      }),\n      onClick: function onClick(event) {\n        var nextPage = activePage + 1;\n        handleClick(event, nextPage);\n      },\n      label: undefined\n    },\n    previous: {\n      'aria-disabled': activePage === 1 ? 'true' : undefined,\n      disabled: activePage === 1 || !numberItems,\n      icon: /*#__PURE__*/React.createElement(PreviousIcon, {\n        color: iconColor\n      }),\n      onClick: function onClick(event) {\n        var previousPage = activePage - 1;\n        handleClick(event, previousPage);\n      },\n      label: undefined\n    }\n  };\n  var controls = ['previous'].concat(beginPages, beginFlex, middlePages, endFlex, endPages, ['next']);\n  /* Set props for each page index. Each page index should display a\n   * clickable index, control, or placeholder (e.g. ellipsis) indicating\n   * more pages are available.\n   */\n\n  controls = controls.map(function (control) {\n    return _extends({\n      active: control === activePage,\n      a11yTitle: typeof control === 'number' ? \"Go to page \" + control : \"Go to \" + control + \" page\",\n      // https://a11y-style-guide.com/style-guide/section-navigation.html#kssref-navigation-pagination\n      // https://www.w3.org/TR/wai-aria-1.1/#aria-current\n      'aria-current': control === activePage ? 'page' : undefined,\n      control: control,\n      onClick: function onClick(event) {\n        handleClick(event, control);\n      },\n      separator: control === 'more-prev' || control === 'more-next'\n    }, navProps[control]);\n  });\n  return /*#__PURE__*/React.createElement(StyledPaginationContainer, _extends({}, theme.pagination.container, rest), /*#__PURE__*/React.createElement(Nav, {\n    a11yTitle: ariaLabel || a11yTitle || 'Pagination Navigation',\n    ref: ref\n  }, /*#__PURE__*/React.createElement(Box, _extends({\n    as: \"ul\"\n  }, theme.pagination.controls), controls.map(function (control, index) {\n    return (\n      /*#__PURE__*/\n\n      /* Using index as key (as opposed to a unique id) seems to\n       * help React prioritize rendering the updated controls as\n       * desired. Whereas, using a unique id resulted in rendering\n       * the active control with an undesired lag. */\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(PageControl, _extends({\n        key: index,\n        size: size\n      }, control))\n    );\n  }))));\n});\nPagination.displayName = 'Pagination';\nPagination.propTypes = PaginationPropTypes;\nexport { Pagination };","map":null,"metadata":{},"sourceType":"module"}