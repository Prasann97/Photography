{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React, { Fragment, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { Text } from '../Text';\nimport { ResponsiveContext } from '../../contexts/ResponsiveContext';\nimport { NameValueListContext } from '../NameValueList/NameValueListContext';\n\nvar NameValuePair = function NameValuePair(_ref) {\n  var _theme$nameValuePair, _theme$nameValuePair$;\n\n  var children = _ref.children,\n      nameProp = _ref.name;\n\n  var _useContext = useContext(NameValueListContext),\n      nameProps = _useContext.nameProps,\n      pairProps = _useContext.pairProps,\n      valueProps = _useContext.valueProps;\n\n  var size = useContext(ResponsiveContext);\n  var theme = useContext(ThemeContext);\n  var direction = pairProps == null ? void 0 : pairProps.direction;\n  var column = direction === 'column' || direction === 'column-reverse' || size === 'small';\n  var Container = column ? Box : Fragment;\n  var nameAlign = size !== 'small' ? nameProps == null ? void 0 : nameProps.align : undefined;\n  var valueAlign = size !== 'small' ? valueProps == null ? void 0 : valueProps.align : undefined; // using margin to act as gap\n  // <dl> elements must only directly contain\n  // properly-ordered <dt> and <dd> groups\n\n  var valueGap;\n  if (column && (_theme$nameValuePair = theme.nameValuePair) != null && (_theme$nameValuePair$ = _theme$nameValuePair.column) != null && _theme$nameValuePair$.gap) valueGap = {\n    bottom: theme.nameValuePair.column.gap\n  };\n  var name;\n  if (typeof nameProp === 'string' || typeof nameProp === 'number') name = /*#__PURE__*/React.createElement(Text, _extends({\n    as: \"dt\",\n    margin: valueGap,\n    textAlign: nameAlign\n  }, theme.nameValuePair.name), nameProp);else name = /*#__PURE__*/React.createElement(Box, {\n    as: \"dt\",\n    align: nameAlign\n  }, nameProp);\n  var value;\n  if (typeof children === 'string' || typeof children === 'number') value =\n  /*#__PURE__*/\n  // override browser default margin for dd\n  React.createElement(Text, _extends({\n    as: \"dd\",\n    margin: \"none\",\n    textAlign: valueAlign\n  }, theme.nameValuePair.value), children);else value =\n  /*#__PURE__*/\n  // override browser default margin for dd\n  React.createElement(Box, {\n    margin: \"none\",\n    as: \"dd\",\n    align: valueAlign\n  }, children);\n  var first = direction !== 'column-reverse' ? name : value;\n  var second = direction !== 'column-reverse' ? value : name;\n  return /*#__PURE__*/React.createElement(Container, null, first, second);\n};\n\nexport { NameValuePair };","map":null,"metadata":{},"sourceType":"module"}