{"ast":null,"code":"var _excluded = [\"buttonProps\", \"calendarProps\", \"defaultValue\", \"disabled\", \"dropProps\", \"format\", \"id\", \"icon\", \"inline\", \"inputProps\", \"name\", \"onChange\", \"onFocus\", \"plain\", \"reverse\", \"value\", \"messages\"],\n    _excluded2 = [\"icon\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useRef, forwardRef, useContext, useEffect, useMemo, useState, useCallback } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Calendar as CalendarIcon } from 'grommet-icons/icons/Calendar';\nimport { defaultProps } from '../../default-props';\nimport { AnnounceContext } from '../../contexts/AnnounceContext';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Calendar } from '../Calendar';\nimport { Drop } from '../Drop';\nimport { DropButton } from '../DropButton';\nimport { FormContext } from '../Form';\nimport { Keyboard } from '../Keyboard';\nimport { MaskedInput } from '../MaskedInput';\nimport { useForwardedRef } from '../../utils';\nimport { formatToSchema, schemaToMask, valuesAreEqual, valueToText, textToValue } from './utils';\nimport { DateInputPropTypes } from './propTypes';\nimport { getOutputFormat } from '../Calendar/Calendar';\n\nvar getReference = function getReference(value) {\n  var adjustedDate;\n  var res;\n  if (typeof value === 'string') res = value;else if (Array.isArray(value) && Array.isArray(value[0])) res = value[0].find(function (date) {\n    return date;\n  });else if (Array.isArray(value) && value.length) {\n    res = value[0];\n  }\n\n  if (res) {\n    var _res;\n\n    adjustedDate = new Date(res); // if time is not specified in ISOstring, normalize to midnight\n\n    if (((_res = res) == null ? void 0 : _res.indexOf('T')) === -1) {\n      var offset = adjustedDate.getTimezoneOffset();\n      var hour = adjustedDate.getHours();\n      adjustedDate.setHours(hour, offset);\n    }\n  }\n\n  return adjustedDate;\n};\n\nvar DateInput = /*#__PURE__*/forwardRef(function (_ref, refArg) {\n  var buttonProps = _ref.buttonProps,\n      calendarProps = _ref.calendarProps,\n      defaultValue = _ref.defaultValue,\n      disabled = _ref.disabled,\n      dropProps = _ref.dropProps,\n      format = _ref.format,\n      id = _ref.id,\n      icon = _ref.icon,\n      _ref$inline = _ref.inline,\n      inline = _ref$inline === void 0 ? false : _ref$inline,\n      inputProps = _ref.inputProps,\n      name = _ref.name,\n      _onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      plain = _ref.plain,\n      _ref$reverse = _ref.reverse,\n      reverseProp = _ref$reverse === void 0 ? false : _ref$reverse,\n      valueArg = _ref.value,\n      messages = _ref.messages,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var announce = useContext(AnnounceContext);\n\n  var _useContext = useContext(MessageContext),\n      formatMessage = _useContext.format;\n\n  var iconSize = theme.dateInput.icon && theme.dateInput.icon.size || 'medium';\n\n  var _useContext2 = useContext(FormContext),\n      useFormInput = _useContext2.useFormInput;\n\n  var ref = useForwardedRef(refArg);\n  var containerRef = useRef();\n\n  var _useFormInput = useFormInput({\n    name: name,\n    value: valueArg,\n    initialValue: defaultValue\n  }),\n      value = _useFormInput[0],\n      setValue = _useFormInput[1];\n\n  var _useState = useState(getOutputFormat(value)),\n      outputFormat = _useState[0],\n      setOutputFormat = _useState[1];\n\n  useEffect(function () {\n    setOutputFormat(function (previousFormat) {\n      var nextFormat = getOutputFormat(value); // when user types, date could become something like 07//2020\n      // and value becomes undefined. don't lose the format from the\n      // previous valid date\n\n      return previousFormat !== nextFormat ? previousFormat : nextFormat;\n    });\n  }, [value]); // keep track of timestamp from original date(s)\n\n  var _useState2 = useState(getReference(value)),\n      reference = _useState2[0],\n      setReference = _useState2[1]; // do we expect multiple dates?\n\n\n  var range = Array.isArray(value) || format && format.includes('-'); // parse format and build a formal schema we can use elsewhere\n\n  var schema = useMemo(function () {\n    return formatToSchema(format);\n  }, [format]); // mask is only used when a format is provided\n\n  var mask = useMemo(function () {\n    return schemaToMask(schema);\n  }, [schema]); // textValue is only used when a format is provided\n\n  var _useState3 = useState(schema ? valueToText(value, schema) : undefined),\n      textValue = _useState3[0],\n      setTextValue = _useState3[1]; // Setting the icon through `inputProps` is deprecated.\n  // The `icon` prop should be used instead.\n\n\n  var _ref2 = inputProps || {},\n      MaskedInputIcon = _ref2.icon,\n      restOfInputProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  if (MaskedInputIcon) {\n    console.warn(\"Customizing the DateInput icon through inputProps is deprecated. \\nUse the icon prop instead.\");\n  }\n\n  var reverse = reverseProp || restOfInputProps.reverse;\n  var calendarDropdownAlign = {\n    top: 'bottom',\n    left: 'left'\n  }; // We need to distinguish between the caller changing a Form value\n  // and the user typing a date that he isn't finished with yet.\n  // To handle this, we see if we have a value and the text value\n  // associated with it doesn't align to it, then we update the text value.\n  // We compare using textToValue to avoid \"06/01/2021\" not\n  // matching \"06/1/2021\".\n\n  useEffect(function () {\n    if (schema && value !== undefined) {\n      var nextTextValue = valueToText(value, schema);\n\n      if (!valuesAreEqual(textToValue(textValue, schema, range, reference), textToValue(nextTextValue, schema, range, reference)) || textValue === '' && nextTextValue !== '') {\n        setTextValue(nextTextValue);\n      }\n    }\n  }, [range, schema, textValue, reference, value]); // when format and not inline, whether to show the Calendar in a Drop\n\n  var _useState4 = useState(),\n      open = _useState4[0],\n      setOpen = _useState4[1];\n\n  var openCalendar = useCallback(function () {\n    setOpen(true);\n    announce(formatMessage({\n      id: 'dateInput.enterCalendar',\n      messages: messages\n    }));\n  }, [announce, formatMessage, messages]);\n  var closeCalendar = useCallback(function () {\n    setOpen(false);\n    announce(formatMessage({\n      id: 'dateInput.exitCalendar',\n      messages: messages\n    }));\n  }, [announce, formatMessage, messages]);\n  var calendar = /*#__PURE__*/React.createElement(Calendar, _extends({\n    ref: inline ? ref : undefined,\n    id: inline && !format ? id : undefined,\n    range: range,\n    date: range ? undefined : value // when caller initializes with empty array, dates should be undefined\n    // allowing the user to select both begin and end of the range\n    ,\n    dates: range && value.length ? [value] : undefined // places focus on days grid when Calendar opens\n    ,\n    initialFocus: open ? 'days' : undefined,\n    onSelect: disabled ? undefined : function (nextValue) {\n      var normalizedValue;\n\n      if (range && Array.isArray(nextValue)) {\n        normalizedValue = nextValue[0];\n      } // clicking an edge date removes it\n      else if (range) normalizedValue = [nextValue, nextValue];else normalizedValue = nextValue;\n\n      if (schema) setTextValue(valueToText(normalizedValue, schema));\n      setValue(normalizedValue);\n      setReference(getReference(nextValue));\n      if (_onChange) _onChange({\n        value: normalizedValue\n      });\n\n      if (open && !range) {\n        closeCalendar();\n        setTimeout(function () {\n          return ref.current.focus();\n        }, 1);\n      }\n    }\n  }, calendarProps));\n  var formContextValue = useMemo(function () {\n    return {\n      useFormInput: function useFormInput(_ref3) {\n        var valueProp = _ref3.value;\n        return [valueProp, function () {}];\n      }\n    };\n  }, []);\n\n  if (!format) {\n    // When no format is specified, we don't give the user a way to type\n    if (inline) return calendar;\n    return /*#__PURE__*/React.createElement(DropButton, _extends({\n      ref: ref,\n      id: id,\n      dropProps: _extends({\n        align: calendarDropdownAlign\n      }, dropProps),\n      dropContent: calendar,\n      icon: icon || MaskedInputIcon || /*#__PURE__*/React.createElement(CalendarIcon, {\n        size: iconSize\n      })\n    }, buttonProps));\n  }\n\n  var calendarButton = /*#__PURE__*/React.createElement(Button, {\n    onClick: open ? closeCalendar : openCalendar,\n    plain: true,\n    icon: icon || MaskedInputIcon || /*#__PURE__*/React.createElement(CalendarIcon, {\n      size: iconSize\n    }),\n    margin: reverse ? {\n      left: 'small'\n    } : {\n      right: 'small'\n    }\n  });\n  var input = /*#__PURE__*/React.createElement(FormContext.Provider, {\n    key: \"input\" // don't let MaskedInput drive the Form\n    ,\n    value: formContextValue\n  }, /*#__PURE__*/React.createElement(Keyboard, {\n    onEsc: open ? function () {\n      return closeCalendar();\n    } : undefined,\n    onSpace: function onSpace(event) {\n      event.preventDefault();\n      openCalendar();\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    ref: containerRef,\n    border: !plain,\n    round: \"xxsmall\",\n    direction: \"row\",\n    fill: true\n  }, reverse && calendarButton, /*#__PURE__*/React.createElement(MaskedInput, _extends({\n    ref: ref,\n    id: id,\n    name: name,\n    reverse: true,\n    disabled: disabled,\n    mask: mask,\n    plain: true\n  }, restOfInputProps, rest, {\n    value: textValue,\n    onChange: function onChange(event) {\n      var nextTextValue = event.target.value;\n      setTextValue(nextTextValue);\n      var nextValue = textToValue(nextTextValue, schema, range, reference, outputFormat);\n      if (nextValue !== undefined) setReference(getReference(nextValue)); // update value even when undefined\n\n      setValue(nextValue);\n\n      if (_onChange) {\n        event.persist(); // extract from React synthetic event pool\n\n        var adjustedEvent = event;\n        adjustedEvent.value = nextValue;\n\n        _onChange(adjustedEvent);\n      }\n    },\n    onFocus: function onFocus(event) {\n      announce(formatMessage({\n        id: 'dateInput.openCalendar',\n        messages: messages\n      }));\n      if (_onFocus) _onFocus(event);\n    }\n  })), !reverse && calendarButton)));\n\n  if (inline) {\n    return /*#__PURE__*/React.createElement(Box, null, input, calendar);\n  }\n\n  if (open) {\n    return [input, /*#__PURE__*/React.createElement(Keyboard, {\n      key: \"drop\",\n      onEsc: function onEsc() {\n        return ref.current.focus();\n      }\n    }, /*#__PURE__*/React.createElement(Drop, _extends({\n      overflow: \"visible\",\n      id: id ? id + \"__drop\" : undefined,\n      target: containerRef.current,\n      align: _extends({}, calendarDropdownAlign, dropProps),\n      onEsc: closeCalendar,\n      onClickOutside: function onClickOutside(_ref4) {\n        var target = _ref4.target;\n\n        if (target !== containerRef.current && !containerRef.current.contains(target)) {\n          closeCalendar();\n        }\n      }\n    }, dropProps), calendar))];\n  }\n\n  return input;\n});\nDateInput.displayName = 'DateInput';\nDateInput.propTypes = DateInputPropTypes;\nexport { DateInput };","map":null,"metadata":{},"sourceType":"module"}