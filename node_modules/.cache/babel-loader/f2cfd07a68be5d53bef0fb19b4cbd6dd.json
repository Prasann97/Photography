{"ast":null,"code":"var _excluded = [\"a11yTitle\", \"aria-label\", \"children\", \"color\", \"disabled\", \"gap\", \"href\", \"icon\", \"label\", \"onBlur\", \"onClick\", \"onFocus\", \"reverse\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { cloneElement, forwardRef, useCallback, useContext, useEffect, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { findButtonParent, normalizeColor } from '../../utils';\nimport { Box } from '../Box';\nimport { StyledAnchor } from './StyledAnchor';\nimport { AnchorPropTypes } from './propTypes';\nimport { useAnalytics } from '../../contexts/AnalyticsContext';\nvar Anchor = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      ariaLabel = _ref['aria-label'],\n      children = _ref.children,\n      color = _ref.color,\n      disabled = _ref.disabled,\n      gap = _ref.gap,\n      href = _ref.href,\n      icon = _ref.icon,\n      label = _ref.label,\n      _onBlur = _ref.onBlur,\n      onClickProp = _ref.onClick,\n      _onFocus = _ref.onFocus,\n      reverse = _ref.reverse,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var sendAnalytics = useAnalytics();\n  var onClick = useCallback(function (event) {\n    sendAnalytics({\n      type: 'anchorClick',\n      element: findButtonParent(event.target),\n      event: event,\n      href: href,\n      label: typeof label === 'string' ? label : undefined\n    });\n    if (onClickProp) onClickProp(event);\n  }, [onClickProp, sendAnalytics, label, href]);\n  useEffect(function () {\n    if ((icon || label) && children) {\n      console.warn('Anchor should not have children if icon or label is provided');\n    }\n  }, [children, icon, label]);\n  var coloredIcon = icon;\n\n  if (icon && !icon.props.color) {\n    coloredIcon = /*#__PURE__*/cloneElement(icon, {\n      color: normalizeColor(color || theme.anchor.color, theme)\n    });\n  }\n\n  var first = reverse ? label : coloredIcon;\n  var second = reverse ? coloredIcon : label;\n  return /*#__PURE__*/React.createElement(StyledAnchor, _extends({}, rest, {\n    ref: ref,\n    \"aria-label\": ariaLabel || a11yTitle,\n    colorProp: color,\n    disabled: disabled,\n    hasIcon: !!icon,\n    focus: focus,\n    hasLabel: label,\n    reverse: reverse,\n    href: !disabled ? href : undefined,\n    onClick: !disabled ? onClick : undefined,\n    onFocus: function onFocus(event) {\n      setFocus(true);\n      if (_onFocus) _onFocus(event);\n    },\n    onBlur: function onBlur(event) {\n      setFocus(false);\n      if (_onBlur) _onBlur(event);\n    }\n  }), first && second ? /*#__PURE__*/React.createElement(Box, {\n    as: \"span\",\n    direction: \"row\",\n    align: \"center\",\n    gap: gap || theme.anchor.gap,\n    responsive: false,\n    style: {\n      display: 'inline-flex'\n    }\n  }, first, second) : first || second || children);\n});\nAnchor.displayName = 'Anchor';\nAnchor.propTypes = AnchorPropTypes;\nexport { Anchor };","map":null,"metadata":{},"sourceType":"module"}