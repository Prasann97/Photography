{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport PropTypes from 'prop-types';\nimport { colorPropType, genericProps, padPropType, patternPropType, pointPropType } from '../../utils/general-prop-types';\nvar thicknessType = PropTypes.oneOfType([PropTypes.oneOf(['hair', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'none']), PropTypes.string, PropTypes.number]);\nvar PropType = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  PropType = _extends({}, genericProps, {\n    animate: PropTypes.bool,\n    bounds: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n    color: PropTypes.oneOfType([colorPropType, PropTypes.shape({\n      color: colorPropType,\n      // deprecated, use top level 'opacity'\n      opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.bool])\n    }), PropTypes.arrayOf(PropTypes.shape({\n      color: colorPropType,\n      value: PropTypes.number\n    }))]),\n    id: PropTypes.string,\n    dash: PropTypes.bool,\n    gap: PropTypes.oneOfType([PropTypes.oneOf(['none', 'xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]),\n    onClick: PropTypes.func,\n    onHover: PropTypes.func,\n    opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.bool]),\n    overflow: PropTypes.bool,\n    pad: padPropType,\n    pattern: patternPropType,\n    point: pointPropType,\n    round: PropTypes.bool,\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'fill', 'full']), PropTypes.shape({\n      height: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'fill', 'full']), PropTypes.string]),\n      width: PropTypes.oneOfType([PropTypes.oneOf(['xxsmall', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'fill', 'full', 'auto']), PropTypes.string])\n    }), PropTypes.string]),\n    thickness: thicknessType,\n    type: PropTypes.oneOf(['bar', 'line', 'area', 'point']),\n    values: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number), PropTypes.shape({\n      color: colorPropType,\n      label: PropTypes.string,\n      // for accessibility of bars and points\n      onClick: PropTypes.func,\n      onHover: PropTypes.func,\n      opacity: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\n      thickness: thicknessType,\n      value: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)])\n    })]))\n  });\n}\n\nexport var ChartPropTypes = PropType;","map":null,"metadata":{},"sourceType":"module"}