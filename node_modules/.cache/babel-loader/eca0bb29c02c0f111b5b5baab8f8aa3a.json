{"ast":null,"code":"var _excluded = [\"children\", \"full\", \"containerTarget\", \"theme\", \"options\", \"messages\", \"onAnalytics\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useEffect, useMemo, useState } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { ContainerTargetContext, ResponsiveContext, ThemeContext } from '../../contexts';\nimport { deepMerge, backgroundIsDark, getBreakpoint, getDeviceBreakpoint, normalizeColor, useForwardedRef } from '../../utils';\nimport { base as baseTheme } from '../../themes';\nimport { StyledGrommet } from './StyledGrommet';\nimport { RootsContext } from '../../contexts/RootsContext';\nimport { OptionsContext } from '../../contexts/OptionsContext';\nimport { format as _format, MessageContext } from '../../contexts/MessageContext';\nimport defaultMessages from '../../languages/default.json';\nimport { GrommetPropTypes } from './propTypes';\nimport { AnalyticsProvider } from '../../contexts/AnalyticsContext';\nvar FullGlobalStyle = createGlobalStyle([\"body{margin:0;}\"]);\n\nvar deviceResponsive = function deviceResponsive(userAgent, theme) {\n  // log('--deviceResponsive', userAgent, theme);\n\n  /*\n   * Regexes provided for mobile and tablet detection are meant to replace\n   * a full-featured specific library due to contributing a considerable size\n   * into the bundle.\n   *\n   * User agents found https://deviceatlas.com/blog/list-of-user-agent-strings\n   */\n  if (userAgent) {\n    if (/(tablet|ipad|playbook|silk)|(android(?!.*mobile))/i.test(userAgent)) {\n      return getDeviceBreakpoint('tablet', theme);\n    }\n\n    if (/Mobile|iPhone|Android/.test(userAgent)) {\n      return getDeviceBreakpoint('phone', theme);\n    }\n\n    return getDeviceBreakpoint('computer', theme);\n  }\n\n  return undefined;\n};\n\nvar defaultOptions = {};\nvar Grommet = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      full = props.full,\n      _props$containerTarge = props.containerTarget,\n      containerTarget = _props$containerTarge === void 0 ? typeof document === 'object' ? document.body : undefined : _props$containerTarge,\n      themeProp = props.theme,\n      _props$options = props.options,\n      options = _props$options === void 0 ? defaultOptions : _props$options,\n      messagesProp = props.messages,\n      onAnalytics = props.onAnalytics,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var background = props.background,\n      dir = props.dir,\n      themeMode = props.themeMode,\n      userAgent = props.userAgent;\n\n  var _useState = useState(),\n      stateResponsive = _useState[0],\n      setResponsive = _useState[1];\n\n  var _useState2 = useState([]),\n      roots = _useState2[0],\n      setRoots = _useState2[1];\n\n  var theme = useMemo(function () {\n    var nextTheme = deepMerge(baseTheme, themeProp || {}); // if user provides specific menu alignment, we don't want\n    // the defaults to be included at all (can cause issues with controlMirror)\n    // override merged value with themeProp value\n\n    if (themeProp && themeProp.menu && themeProp.menu.drop && themeProp.menu.drop.align) {\n      delete nextTheme.menu.drop.align;\n      nextTheme.menu.drop.align = themeProp.menu.drop.align;\n    }\n\n    var themeBackground = nextTheme.global.colors.background;\n    nextTheme.dark = (themeMode || nextTheme.defaultMode) === 'dark';\n    var color = normalizeColor(background || themeBackground, nextTheme);\n    nextTheme.dark = backgroundIsDark(color, nextTheme);\n    nextTheme.baseBackground = background || themeBackground; // This allows DataTable to intelligently set the background of a pinned\n    // header or footer.\n\n    nextTheme.background = nextTheme.baseBackground;\n\n    if (dir) {\n      nextTheme.dir = dir;\n    }\n\n    return nextTheme;\n  }, [background, dir, themeMode, themeProp]);\n  var messages = useMemo(function () {\n    // combine the passed in messages, if any, with the default\n    // messages and format function.\n    var nextMessages = deepMerge(defaultMessages, (messagesProp == null ? void 0 : messagesProp.messages) || {});\n    return {\n      messages: nextMessages,\n      format: function format(opts) {\n        var message = (messagesProp == null ? void 0 : messagesProp.format) && messagesProp.format(opts);\n        return typeof message !== 'undefined' ? message : _format(opts, nextMessages);\n      }\n    };\n  }, [messagesProp]);\n  useEffect(function () {\n    var onResize = function onResize() {\n      setResponsive(getBreakpoint(document.body.clientWidth, theme));\n    };\n\n    window.addEventListener('resize', onResize);\n    onResize();\n    return function () {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [theme]);\n  var responsive = stateResponsive || deviceResponsive(userAgent, theme) || theme.global.deviceBreakpoints.tablet;\n  var grommetRef = useForwardedRef(ref);\n  useEffect(function () {\n    if (grommetRef.current) setRoots([grommetRef.current]);\n  }, [grommetRef]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(ResponsiveContext.Provider, {\n    value: responsive\n  }, /*#__PURE__*/React.createElement(RootsContext.Provider, {\n    value: roots\n  }, /*#__PURE__*/React.createElement(ContainerTargetContext.Provider, {\n    value: containerTarget\n  }, /*#__PURE__*/React.createElement(OptionsContext.Provider, {\n    value: options\n  }, /*#__PURE__*/React.createElement(MessageContext.Provider, {\n    value: messages\n  }, /*#__PURE__*/React.createElement(AnalyticsProvider, {\n    onAnalytics: onAnalytics\n  }, /*#__PURE__*/React.createElement(StyledGrommet, _extends({\n    full: full\n  }, rest, {\n    ref: grommetRef\n  }), children), full && /*#__PURE__*/React.createElement(FullGlobalStyle, null))))))));\n});\nGrommet.displayName = 'Grommet';\nGrommet.propTypes = GrommetPropTypes;\nexport { Grommet };","map":null,"metadata":{},"sourceType":"module"}