{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { normalizeColor, parseMetricToNum } from '../../utils';\n\nvar Swatch = function Swatch(_ref) {\n  var aspect = _ref.aspect,\n      color = _ref.color,\n      dash = _ref.dash,\n      point = _ref.point,\n      round = _ref.round,\n      thickness = _ref.thickness,\n      type = _ref.type;\n  var theme = useContext(ThemeContext);\n  var dim = parseInt(theme.global.spacing, 10) / 2;\n  var half = dim / 2;\n  var height = dim;\n  var width = dim;\n  var normalizedColor = color ? normalizeColor(color.color || color, theme) : undefined;\n  var fill = normalizedColor;\n  var stroke = 'none';\n  var content;\n  if (aspect === 'x') content = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M 0 \" + half + \" L \" + dim + \" \" + half,\n    stroke: \"#000\"\n  });else if (aspect === 'y') content = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M \" + half + \" 0 L \" + half + \" \" + dim,\n    stroke: \"#000\"\n  });else if (aspect === 'thickness') content = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"#000\",\n    fill: \"none\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: half,\n    cy: half,\n    r: half / 4\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: half,\n    cy: half,\n    r: half - 1\n  }));else if (aspect === 'color') content = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: half,\n    height: dim,\n    fill: \"#000\",\n    opacity: 0.4\n  }), /*#__PURE__*/React.createElement(\"rect\", {\n    x: half,\n    y: 0,\n    width: half,\n    height: dim,\n    fill: \"#000\",\n    opacity: 0.8\n  }));else if (point) {\n    if (point === 'circle') content = /*#__PURE__*/React.createElement(\"circle\", {\n      cx: half,\n      cy: half,\n      r: half\n    });else {\n      var d;\n      if (point === 'diamond') d = \"M \" + half + \" 0 L \" + dim + \" \" + half + \" L \" + half + \" \" + dim + \" L 0 \" + half + \" Z\";else if (point === 'star') {\n        var off1 = half / 3;\n        var off2 = off1 * 2;\n        d = \"M \" + half + \" 0 L \" + (half - off2) + \" \" + dim + \" L \" + dim + \" \" + (half - off1) + \" L 0 \" + (half - off1) + \" L \" + (half + off2) + \" \" + dim + \" Z\";\n      } else if (point === 'triangle') d = \"M \" + half + \" 0 L \" + dim + \" \" + dim + \" L 0 \" + dim + \" Z\";else if (point === 'triangleDown') d = \"M 0 0 L \" + dim + \" 0 L \" + half + \" \" + dim + \" Z\";else if (point === 'square') d = \"M 0 0 L \" + dim + \" 0 L \" + dim + \" \" + dim + \" L 0 \" + dim + \" Z\";\n      if (d) content = /*#__PURE__*/React.createElement(\"path\", {\n        d: d\n      });\n    }\n  } else if (type === 'area') {\n    if (round) content = /*#__PURE__*/React.createElement(\"circle\", {\n      cx: half,\n      cy: half,\n      r: half\n    });else content = /*#__PURE__*/React.createElement(\"rect\", {\n      x: 0,\n      y: 0,\n      width: width,\n      height: height\n    });\n  } else {\n    // draw a line oriented based on the type and then match style\n    var strokeWidth = parseMetricToNum(theme.global.edgeSize[thickness]) || dim;\n\n    var _d;\n\n    if (type === 'line' || type === 'area') {\n      width = Math.max(width, strokeWidth * 4);\n      height = strokeWidth;\n      _d = \"M 0 \" + height / 2 + \" L \" + width + \" \" + height / 2;\n    } else {\n      width = strokeWidth;\n      _d = \"M \" + width / 2 + \" 0 L \" + width / 2 + \" \" + dim;\n    }\n\n    fill = 'none';\n    stroke = normalizedColor;\n    var strokeProps = {};\n    if (round) strokeProps.strokeLinecap = 'round';\n    if (dash) strokeProps.strokeDasharray = round ? strokeWidth + \" \" + strokeWidth * 1.5 : strokeWidth * 2 + \" \" + strokeWidth / 2;\n    content = /*#__PURE__*/React.createElement(\"path\", _extends({\n      d: _d,\n      strokeWidth: strokeWidth\n    }, strokeProps));\n  }\n  var opacity = color && color.opacity ? theme.global.opacity[color.opacity] : undefined;\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    viewBox: \"0 0 \" + width + \" \" + height,\n    fill: fill,\n    opacity: opacity,\n    stroke: stroke\n  }, content);\n};\n\nexport { Swatch };","map":null,"metadata":{},"sourceType":"module"}